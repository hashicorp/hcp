// Code generated by mockery. DO NOT EDIT.

package mock_billing_account_service

import (
	billing_account_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-billing/preview/2020-11-05/client/billing_account_service"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// BillingAccountServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BillingAccountServiceCreate(params *billing_account_service.BillingAccountServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BillingAccountServiceCreate")
	}

	var r0 *billing_account_service.BillingAccountServiceCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceCreateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceCreateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) *billing_account_service.BillingAccountServiceCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing_account_service.BillingAccountServiceCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*billing_account_service.BillingAccountServiceCreateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BillingAccountServiceCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingAccountServiceCreate'
type MockClientService_BillingAccountServiceCreate_Call struct {
	*mock.Call
}

// BillingAccountServiceCreate is a helper method to define mock.On call
//   - params *billing_account_service.BillingAccountServiceCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...billing_account_service.ClientOption
func (_e *MockClientService_Expecter) BillingAccountServiceCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BillingAccountServiceCreate_Call {
	return &MockClientService_BillingAccountServiceCreate_Call{Call: _e.mock.On("BillingAccountServiceCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BillingAccountServiceCreate_Call) Run(run func(params *billing_account_service.BillingAccountServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption)) *MockClientService_BillingAccountServiceCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]billing_account_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(billing_account_service.ClientOption)
			}
		}
		run(args[0].(*billing_account_service.BillingAccountServiceCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BillingAccountServiceCreate_Call) Return(_a0 *billing_account_service.BillingAccountServiceCreateOK, _a1 error) *MockClientService_BillingAccountServiceCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BillingAccountServiceCreate_Call) RunAndReturn(run func(*billing_account_service.BillingAccountServiceCreateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceCreateOK, error)) *MockClientService_BillingAccountServiceCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BillingAccountServiceCreateSetupIntent provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BillingAccountServiceCreateSetupIntent(params *billing_account_service.BillingAccountServiceCreateSetupIntentParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceCreateSetupIntentOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BillingAccountServiceCreateSetupIntent")
	}

	var r0 *billing_account_service.BillingAccountServiceCreateSetupIntentOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceCreateSetupIntentParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceCreateSetupIntentOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceCreateSetupIntentParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) *billing_account_service.BillingAccountServiceCreateSetupIntentOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing_account_service.BillingAccountServiceCreateSetupIntentOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*billing_account_service.BillingAccountServiceCreateSetupIntentParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BillingAccountServiceCreateSetupIntent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingAccountServiceCreateSetupIntent'
type MockClientService_BillingAccountServiceCreateSetupIntent_Call struct {
	*mock.Call
}

// BillingAccountServiceCreateSetupIntent is a helper method to define mock.On call
//   - params *billing_account_service.BillingAccountServiceCreateSetupIntentParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...billing_account_service.ClientOption
func (_e *MockClientService_Expecter) BillingAccountServiceCreateSetupIntent(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BillingAccountServiceCreateSetupIntent_Call {
	return &MockClientService_BillingAccountServiceCreateSetupIntent_Call{Call: _e.mock.On("BillingAccountServiceCreateSetupIntent",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BillingAccountServiceCreateSetupIntent_Call) Run(run func(params *billing_account_service.BillingAccountServiceCreateSetupIntentParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption)) *MockClientService_BillingAccountServiceCreateSetupIntent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]billing_account_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(billing_account_service.ClientOption)
			}
		}
		run(args[0].(*billing_account_service.BillingAccountServiceCreateSetupIntentParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BillingAccountServiceCreateSetupIntent_Call) Return(_a0 *billing_account_service.BillingAccountServiceCreateSetupIntentOK, _a1 error) *MockClientService_BillingAccountServiceCreateSetupIntent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BillingAccountServiceCreateSetupIntent_Call) RunAndReturn(run func(*billing_account_service.BillingAccountServiceCreateSetupIntentParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceCreateSetupIntentOK, error)) *MockClientService_BillingAccountServiceCreateSetupIntent_Call {
	_c.Call.Return(run)
	return _c
}

// BillingAccountServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BillingAccountServiceGet(params *billing_account_service.BillingAccountServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BillingAccountServiceGet")
	}

	var r0 *billing_account_service.BillingAccountServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceGetParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceGetParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) *billing_account_service.BillingAccountServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing_account_service.BillingAccountServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*billing_account_service.BillingAccountServiceGetParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BillingAccountServiceGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingAccountServiceGet'
type MockClientService_BillingAccountServiceGet_Call struct {
	*mock.Call
}

// BillingAccountServiceGet is a helper method to define mock.On call
//   - params *billing_account_service.BillingAccountServiceGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...billing_account_service.ClientOption
func (_e *MockClientService_Expecter) BillingAccountServiceGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BillingAccountServiceGet_Call {
	return &MockClientService_BillingAccountServiceGet_Call{Call: _e.mock.On("BillingAccountServiceGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BillingAccountServiceGet_Call) Run(run func(params *billing_account_service.BillingAccountServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption)) *MockClientService_BillingAccountServiceGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]billing_account_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(billing_account_service.ClientOption)
			}
		}
		run(args[0].(*billing_account_service.BillingAccountServiceGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BillingAccountServiceGet_Call) Return(_a0 *billing_account_service.BillingAccountServiceGetOK, _a1 error) *MockClientService_BillingAccountServiceGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BillingAccountServiceGet_Call) RunAndReturn(run func(*billing_account_service.BillingAccountServiceGetParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetOK, error)) *MockClientService_BillingAccountServiceGet_Call {
	_c.Call.Return(run)
	return _c
}

// BillingAccountServiceGetByProject provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BillingAccountServiceGetByProject(params *billing_account_service.BillingAccountServiceGetByProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetByProjectOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BillingAccountServiceGetByProject")
	}

	var r0 *billing_account_service.BillingAccountServiceGetByProjectOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceGetByProjectParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetByProjectOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceGetByProjectParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) *billing_account_service.BillingAccountServiceGetByProjectOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing_account_service.BillingAccountServiceGetByProjectOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*billing_account_service.BillingAccountServiceGetByProjectParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BillingAccountServiceGetByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingAccountServiceGetByProject'
type MockClientService_BillingAccountServiceGetByProject_Call struct {
	*mock.Call
}

// BillingAccountServiceGetByProject is a helper method to define mock.On call
//   - params *billing_account_service.BillingAccountServiceGetByProjectParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...billing_account_service.ClientOption
func (_e *MockClientService_Expecter) BillingAccountServiceGetByProject(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BillingAccountServiceGetByProject_Call {
	return &MockClientService_BillingAccountServiceGetByProject_Call{Call: _e.mock.On("BillingAccountServiceGetByProject",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BillingAccountServiceGetByProject_Call) Run(run func(params *billing_account_service.BillingAccountServiceGetByProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption)) *MockClientService_BillingAccountServiceGetByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]billing_account_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(billing_account_service.ClientOption)
			}
		}
		run(args[0].(*billing_account_service.BillingAccountServiceGetByProjectParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BillingAccountServiceGetByProject_Call) Return(_a0 *billing_account_service.BillingAccountServiceGetByProjectOK, _a1 error) *MockClientService_BillingAccountServiceGetByProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BillingAccountServiceGetByProject_Call) RunAndReturn(run func(*billing_account_service.BillingAccountServiceGetByProjectParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetByProjectOK, error)) *MockClientService_BillingAccountServiceGetByProject_Call {
	_c.Call.Return(run)
	return _c
}

// BillingAccountServiceGetPricingModelTransitions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BillingAccountServiceGetPricingModelTransitions(params *billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetPricingModelTransitionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BillingAccountServiceGetPricingModelTransitions")
	}

	var r0 *billing_account_service.BillingAccountServiceGetPricingModelTransitionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetPricingModelTransitionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) *billing_account_service.BillingAccountServiceGetPricingModelTransitionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing_account_service.BillingAccountServiceGetPricingModelTransitionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BillingAccountServiceGetPricingModelTransitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingAccountServiceGetPricingModelTransitions'
type MockClientService_BillingAccountServiceGetPricingModelTransitions_Call struct {
	*mock.Call
}

// BillingAccountServiceGetPricingModelTransitions is a helper method to define mock.On call
//   - params *billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...billing_account_service.ClientOption
func (_e *MockClientService_Expecter) BillingAccountServiceGetPricingModelTransitions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BillingAccountServiceGetPricingModelTransitions_Call {
	return &MockClientService_BillingAccountServiceGetPricingModelTransitions_Call{Call: _e.mock.On("BillingAccountServiceGetPricingModelTransitions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BillingAccountServiceGetPricingModelTransitions_Call) Run(run func(params *billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption)) *MockClientService_BillingAccountServiceGetPricingModelTransitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]billing_account_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(billing_account_service.ClientOption)
			}
		}
		run(args[0].(*billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BillingAccountServiceGetPricingModelTransitions_Call) Return(_a0 *billing_account_service.BillingAccountServiceGetPricingModelTransitionsOK, _a1 error) *MockClientService_BillingAccountServiceGetPricingModelTransitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BillingAccountServiceGetPricingModelTransitions_Call) RunAndReturn(run func(*billing_account_service.BillingAccountServiceGetPricingModelTransitionsParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceGetPricingModelTransitionsOK, error)) *MockClientService_BillingAccountServiceGetPricingModelTransitions_Call {
	_c.Call.Return(run)
	return _c
}

// BillingAccountServiceRemoveOnDemandPaymentMethod provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BillingAccountServiceRemoveOnDemandPaymentMethod(params *billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BillingAccountServiceRemoveOnDemandPaymentMethod")
	}

	var r0 *billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) *billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingAccountServiceRemoveOnDemandPaymentMethod'
type MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call struct {
	*mock.Call
}

// BillingAccountServiceRemoveOnDemandPaymentMethod is a helper method to define mock.On call
//   - params *billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...billing_account_service.ClientOption
func (_e *MockClientService_Expecter) BillingAccountServiceRemoveOnDemandPaymentMethod(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call {
	return &MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call{Call: _e.mock.On("BillingAccountServiceRemoveOnDemandPaymentMethod",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call) Run(run func(params *billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption)) *MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]billing_account_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(billing_account_service.ClientOption)
			}
		}
		run(args[0].(*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call) Return(_a0 *billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodOK, _a1 error) *MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call) RunAndReturn(run func(*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceRemoveOnDemandPaymentMethodOK, error)) *MockClientService_BillingAccountServiceRemoveOnDemandPaymentMethod_Call {
	_c.Call.Return(run)
	return _c
}

// BillingAccountServiceUpdate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) BillingAccountServiceUpdate(params *billing_account_service.BillingAccountServiceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceUpdateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BillingAccountServiceUpdate")
	}

	var r0 *billing_account_service.BillingAccountServiceUpdateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceUpdateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceUpdateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*billing_account_service.BillingAccountServiceUpdateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) *billing_account_service.BillingAccountServiceUpdateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing_account_service.BillingAccountServiceUpdateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*billing_account_service.BillingAccountServiceUpdateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_BillingAccountServiceUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BillingAccountServiceUpdate'
type MockClientService_BillingAccountServiceUpdate_Call struct {
	*mock.Call
}

// BillingAccountServiceUpdate is a helper method to define mock.On call
//   - params *billing_account_service.BillingAccountServiceUpdateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...billing_account_service.ClientOption
func (_e *MockClientService_Expecter) BillingAccountServiceUpdate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_BillingAccountServiceUpdate_Call {
	return &MockClientService_BillingAccountServiceUpdate_Call{Call: _e.mock.On("BillingAccountServiceUpdate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_BillingAccountServiceUpdate_Call) Run(run func(params *billing_account_service.BillingAccountServiceUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...billing_account_service.ClientOption)) *MockClientService_BillingAccountServiceUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]billing_account_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(billing_account_service.ClientOption)
			}
		}
		run(args[0].(*billing_account_service.BillingAccountServiceUpdateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_BillingAccountServiceUpdate_Call) Return(_a0 *billing_account_service.BillingAccountServiceUpdateOK, _a1 error) *MockClientService_BillingAccountServiceUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_BillingAccountServiceUpdate_Call) RunAndReturn(run func(*billing_account_service.BillingAccountServiceUpdateParams, runtime.ClientAuthInfoWriter, ...billing_account_service.ClientOption) (*billing_account_service.BillingAccountServiceUpdateOK, error)) *MockClientService_BillingAccountServiceUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
