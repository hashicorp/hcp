// Code generated by mockery. DO NOT EDIT.

package mock_secret_service

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	secret_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-vault-secrets/preview/2023-11-28/client/secret_service"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// CreateApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateApp(params *secret_service.CreateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *secret_service.CreateAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApp'
type MockClientService_CreateApp_Call struct {
	*mock.Call
}

// CreateApp is a helper method to define mock.On call
//   - params *secret_service.CreateAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateApp_Call {
	return &MockClientService_CreateApp_Call{Call: _e.mock.On("CreateApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateApp_Call) Run(run func(params *secret_service.CreateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateApp_Call) Return(_a0 *secret_service.CreateAppOK, _a1 error) *MockClientService_CreateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateApp_Call) RunAndReturn(run func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppOK, error)) *MockClientService_CreateApp_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAppKVSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateAppKVSecret(params *secret_service.CreateAppKVSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAppKVSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppKVSecret")
	}

	var r0 *secret_service.CreateAppKVSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppKVSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAppKVSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAppKVSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateAppKVSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppKVSecret'
type MockClientService_CreateAppKVSecret_Call struct {
	*mock.Call
}

// CreateAppKVSecret is a helper method to define mock.On call
//   - params *secret_service.CreateAppKVSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateAppKVSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateAppKVSecret_Call {
	return &MockClientService_CreateAppKVSecret_Call{Call: _e.mock.On("CreateAppKVSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateAppKVSecret_Call) Run(run func(params *secret_service.CreateAppKVSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateAppKVSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAppKVSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateAppKVSecret_Call) Return(_a0 *secret_service.CreateAppKVSecretOK, _a1 error) *MockClientService_CreateAppKVSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateAppKVSecret_Call) RunAndReturn(run func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppKVSecretOK, error)) *MockClientService_CreateAppKVSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAwsDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateAwsDynamicSecret(params *secret_service.CreateAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAwsDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAwsDynamicSecret")
	}

	var r0 *secret_service.CreateAwsDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAwsDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAwsDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateAwsDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAwsDynamicSecret'
type MockClientService_CreateAwsDynamicSecret_Call struct {
	*mock.Call
}

// CreateAwsDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.CreateAwsDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateAwsDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateAwsDynamicSecret_Call {
	return &MockClientService_CreateAwsDynamicSecret_Call{Call: _e.mock.On("CreateAwsDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateAwsDynamicSecret_Call) Run(run func(params *secret_service.CreateAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateAwsDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAwsDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateAwsDynamicSecret_Call) Return(_a0 *secret_service.CreateAwsDynamicSecretOK, _a1 error) *MockClientService_CreateAwsDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateAwsDynamicSecret_Call) RunAndReturn(run func(*secret_service.CreateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsDynamicSecretOK, error)) *MockClientService_CreateAwsDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAwsIAMUserAccessKeyRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateAwsIAMUserAccessKeyRotatingSecret(params *secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAwsIAMUserAccessKeyRotatingSecret")
	}

	var r0 *secret_service.CreateAwsIAMUserAccessKeyRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAwsIAMUserAccessKeyRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAwsIAMUserAccessKeyRotatingSecret'
type MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call struct {
	*mock.Call
}

// CreateAwsIAMUserAccessKeyRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateAwsIAMUserAccessKeyRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call {
	return &MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call{Call: _e.mock.On("CreateAwsIAMUserAccessKeyRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call) Run(run func(params *secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call) Return(_a0 *secret_service.CreateAwsIAMUserAccessKeyRotatingSecretOK, _a1 error) *MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call) RunAndReturn(run func(*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsIAMUserAccessKeyRotatingSecretOK, error)) *MockClientService_CreateAwsIAMUserAccessKeyRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAwsIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateAwsIntegration(params *secret_service.CreateAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAwsIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAwsIntegration")
	}

	var r0 *secret_service.CreateAwsIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAwsIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAwsIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateAwsIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAwsIntegration'
type MockClientService_CreateAwsIntegration_Call struct {
	*mock.Call
}

// CreateAwsIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateAwsIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateAwsIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateAwsIntegration_Call {
	return &MockClientService_CreateAwsIntegration_Call{Call: _e.mock.On("CreateAwsIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateAwsIntegration_Call) Run(run func(params *secret_service.CreateAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateAwsIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAwsIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateAwsIntegration_Call) Return(_a0 *secret_service.CreateAwsIntegrationOK, _a1 error) *MockClientService_CreateAwsIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateAwsIntegration_Call) RunAndReturn(run func(*secret_service.CreateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsIntegrationOK, error)) *MockClientService_CreateAwsIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGatewayPool provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateGatewayPool(params *secret_service.CreateGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateGatewayPoolOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGatewayPool")
	}

	var r0 *secret_service.CreateGatewayPoolOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGatewayPoolOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateGatewayPoolOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateGatewayPoolOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateGatewayPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGatewayPool'
type MockClientService_CreateGatewayPool_Call struct {
	*mock.Call
}

// CreateGatewayPool is a helper method to define mock.On call
//   - params *secret_service.CreateGatewayPoolParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateGatewayPool(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateGatewayPool_Call {
	return &MockClientService_CreateGatewayPool_Call{Call: _e.mock.On("CreateGatewayPool",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateGatewayPool_Call) Run(run func(params *secret_service.CreateGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateGatewayPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateGatewayPoolParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateGatewayPool_Call) Return(_a0 *secret_service.CreateGatewayPoolOK, _a1 error) *MockClientService_CreateGatewayPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateGatewayPool_Call) RunAndReturn(run func(*secret_service.CreateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGatewayPoolOK, error)) *MockClientService_CreateGatewayPool_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGcpDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateGcpDynamicSecret(params *secret_service.CreateGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateGcpDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGcpDynamicSecret")
	}

	var r0 *secret_service.CreateGcpDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateGcpDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateGcpDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateGcpDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGcpDynamicSecret'
type MockClientService_CreateGcpDynamicSecret_Call struct {
	*mock.Call
}

// CreateGcpDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.CreateGcpDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateGcpDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateGcpDynamicSecret_Call {
	return &MockClientService_CreateGcpDynamicSecret_Call{Call: _e.mock.On("CreateGcpDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateGcpDynamicSecret_Call) Run(run func(params *secret_service.CreateGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateGcpDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateGcpDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateGcpDynamicSecret_Call) Return(_a0 *secret_service.CreateGcpDynamicSecretOK, _a1 error) *MockClientService_CreateGcpDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateGcpDynamicSecret_Call) RunAndReturn(run func(*secret_service.CreateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpDynamicSecretOK, error)) *MockClientService_CreateGcpDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGcpIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateGcpIntegration(params *secret_service.CreateGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateGcpIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGcpIntegration")
	}

	var r0 *secret_service.CreateGcpIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateGcpIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateGcpIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateGcpIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGcpIntegration'
type MockClientService_CreateGcpIntegration_Call struct {
	*mock.Call
}

// CreateGcpIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateGcpIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateGcpIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateGcpIntegration_Call {
	return &MockClientService_CreateGcpIntegration_Call{Call: _e.mock.On("CreateGcpIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateGcpIntegration_Call) Run(run func(params *secret_service.CreateGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateGcpIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateGcpIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateGcpIntegration_Call) Return(_a0 *secret_service.CreateGcpIntegrationOK, _a1 error) *MockClientService_CreateGcpIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateGcpIntegration_Call) RunAndReturn(run func(*secret_service.CreateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpIntegrationOK, error)) *MockClientService_CreateGcpIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGcpServiceAccountKeyRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateGcpServiceAccountKeyRotatingSecret(params *secret_service.CreateGcpServiceAccountKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateGcpServiceAccountKeyRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGcpServiceAccountKeyRotatingSecret")
	}

	var r0 *secret_service.CreateGcpServiceAccountKeyRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpServiceAccountKeyRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateGcpServiceAccountKeyRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateGcpServiceAccountKeyRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGcpServiceAccountKeyRotatingSecret'
type MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call struct {
	*mock.Call
}

// CreateGcpServiceAccountKeyRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.CreateGcpServiceAccountKeyRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateGcpServiceAccountKeyRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call {
	return &MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call{Call: _e.mock.On("CreateGcpServiceAccountKeyRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call) Run(run func(params *secret_service.CreateGcpServiceAccountKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateGcpServiceAccountKeyRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call) Return(_a0 *secret_service.CreateGcpServiceAccountKeyRotatingSecretOK, _a1 error) *MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call) RunAndReturn(run func(*secret_service.CreateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpServiceAccountKeyRotatingSecretOK, error)) *MockClientService_CreateGcpServiceAccountKeyRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMongoDBAtlasIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateMongoDBAtlasIntegration(params *secret_service.CreateMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateMongoDBAtlasIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMongoDBAtlasIntegration")
	}

	var r0 *secret_service.CreateMongoDBAtlasIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateMongoDBAtlasIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateMongoDBAtlasIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateMongoDBAtlasIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateMongoDBAtlasIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMongoDBAtlasIntegration'
type MockClientService_CreateMongoDBAtlasIntegration_Call struct {
	*mock.Call
}

// CreateMongoDBAtlasIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateMongoDBAtlasIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateMongoDBAtlasIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateMongoDBAtlasIntegration_Call {
	return &MockClientService_CreateMongoDBAtlasIntegration_Call{Call: _e.mock.On("CreateMongoDBAtlasIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateMongoDBAtlasIntegration_Call) Run(run func(params *secret_service.CreateMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateMongoDBAtlasIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateMongoDBAtlasIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateMongoDBAtlasIntegration_Call) Return(_a0 *secret_service.CreateMongoDBAtlasIntegrationOK, _a1 error) *MockClientService_CreateMongoDBAtlasIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateMongoDBAtlasIntegration_Call) RunAndReturn(run func(*secret_service.CreateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateMongoDBAtlasIntegrationOK, error)) *MockClientService_CreateMongoDBAtlasIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMongoDBAtlasRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateMongoDBAtlasRotatingSecret(params *secret_service.CreateMongoDBAtlasRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateMongoDBAtlasRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMongoDBAtlasRotatingSecret")
	}

	var r0 *secret_service.CreateMongoDBAtlasRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateMongoDBAtlasRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateMongoDBAtlasRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateMongoDBAtlasRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateMongoDBAtlasRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMongoDBAtlasRotatingSecret'
type MockClientService_CreateMongoDBAtlasRotatingSecret_Call struct {
	*mock.Call
}

// CreateMongoDBAtlasRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.CreateMongoDBAtlasRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateMongoDBAtlasRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateMongoDBAtlasRotatingSecret_Call {
	return &MockClientService_CreateMongoDBAtlasRotatingSecret_Call{Call: _e.mock.On("CreateMongoDBAtlasRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateMongoDBAtlasRotatingSecret_Call) Run(run func(params *secret_service.CreateMongoDBAtlasRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateMongoDBAtlasRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateMongoDBAtlasRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateMongoDBAtlasRotatingSecret_Call) Return(_a0 *secret_service.CreateMongoDBAtlasRotatingSecretOK, _a1 error) *MockClientService_CreateMongoDBAtlasRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateMongoDBAtlasRotatingSecret_Call) RunAndReturn(run func(*secret_service.CreateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateMongoDBAtlasRotatingSecretOK, error)) *MockClientService_CreateMongoDBAtlasRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTwilioIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateTwilioIntegration(params *secret_service.CreateTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateTwilioIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTwilioIntegration")
	}

	var r0 *secret_service.CreateTwilioIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateTwilioIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateTwilioIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateTwilioIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateTwilioIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTwilioIntegration'
type MockClientService_CreateTwilioIntegration_Call struct {
	*mock.Call
}

// CreateTwilioIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateTwilioIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateTwilioIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateTwilioIntegration_Call {
	return &MockClientService_CreateTwilioIntegration_Call{Call: _e.mock.On("CreateTwilioIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateTwilioIntegration_Call) Run(run func(params *secret_service.CreateTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateTwilioIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateTwilioIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateTwilioIntegration_Call) Return(_a0 *secret_service.CreateTwilioIntegrationOK, _a1 error) *MockClientService_CreateTwilioIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateTwilioIntegration_Call) RunAndReturn(run func(*secret_service.CreateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateTwilioIntegrationOK, error)) *MockClientService_CreateTwilioIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTwilioRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateTwilioRotatingSecret(params *secret_service.CreateTwilioRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateTwilioRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTwilioRotatingSecret")
	}

	var r0 *secret_service.CreateTwilioRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateTwilioRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateTwilioRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateTwilioRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateTwilioRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTwilioRotatingSecret'
type MockClientService_CreateTwilioRotatingSecret_Call struct {
	*mock.Call
}

// CreateTwilioRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.CreateTwilioRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateTwilioRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateTwilioRotatingSecret_Call {
	return &MockClientService_CreateTwilioRotatingSecret_Call{Call: _e.mock.On("CreateTwilioRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateTwilioRotatingSecret_Call) Run(run func(params *secret_service.CreateTwilioRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateTwilioRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateTwilioRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateTwilioRotatingSecret_Call) Return(_a0 *secret_service.CreateTwilioRotatingSecretOK, _a1 error) *MockClientService_CreateTwilioRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateTwilioRotatingSecret_Call) RunAndReturn(run func(*secret_service.CreateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateTwilioRotatingSecretOK, error)) *MockClientService_CreateTwilioRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteApp(params *secret_service.DeleteAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *secret_service.DeleteAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApp'
type MockClientService_DeleteApp_Call struct {
	*mock.Call
}

// DeleteApp is a helper method to define mock.On call
//   - params *secret_service.DeleteAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteApp_Call {
	return &MockClientService_DeleteApp_Call{Call: _e.mock.On("DeleteApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteApp_Call) Run(run func(params *secret_service.DeleteAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteApp_Call) Return(_a0 *secret_service.DeleteAppOK, _a1 error) *MockClientService_DeleteApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteApp_Call) RunAndReturn(run func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppOK, error)) *MockClientService_DeleteApp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteAppSecret(params *secret_service.DeleteAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAppSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppSecret")
	}

	var r0 *secret_service.DeleteAppSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAppSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAppSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAppSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppSecret'
type MockClientService_DeleteAppSecret_Call struct {
	*mock.Call
}

// DeleteAppSecret is a helper method to define mock.On call
//   - params *secret_service.DeleteAppSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteAppSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteAppSecret_Call {
	return &MockClientService_DeleteAppSecret_Call{Call: _e.mock.On("DeleteAppSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteAppSecret_Call) Run(run func(params *secret_service.DeleteAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteAppSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAppSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAppSecret_Call) Return(_a0 *secret_service.DeleteAppSecretOK, _a1 error) *MockClientService_DeleteAppSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAppSecret_Call) RunAndReturn(run func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretOK, error)) *MockClientService_DeleteAppSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppSecretVersion provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteAppSecretVersion(params *secret_service.DeleteAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAppSecretVersionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppSecretVersion")
	}

	var r0 *secret_service.DeleteAppSecretVersionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretVersionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAppSecretVersionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAppSecretVersionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAppSecretVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppSecretVersion'
type MockClientService_DeleteAppSecretVersion_Call struct {
	*mock.Call
}

// DeleteAppSecretVersion is a helper method to define mock.On call
//   - params *secret_service.DeleteAppSecretVersionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteAppSecretVersion(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteAppSecretVersion_Call {
	return &MockClientService_DeleteAppSecretVersion_Call{Call: _e.mock.On("DeleteAppSecretVersion",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteAppSecretVersion_Call) Run(run func(params *secret_service.DeleteAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteAppSecretVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAppSecretVersionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAppSecretVersion_Call) Return(_a0 *secret_service.DeleteAppSecretVersionOK, _a1 error) *MockClientService_DeleteAppSecretVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAppSecretVersion_Call) RunAndReturn(run func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretVersionOK, error)) *MockClientService_DeleteAppSecretVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAwsDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteAwsDynamicSecret(params *secret_service.DeleteAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAwsDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAwsDynamicSecret")
	}

	var r0 *secret_service.DeleteAwsDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAwsDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAwsDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAwsDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAwsDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAwsDynamicSecret'
type MockClientService_DeleteAwsDynamicSecret_Call struct {
	*mock.Call
}

// DeleteAwsDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.DeleteAwsDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteAwsDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteAwsDynamicSecret_Call {
	return &MockClientService_DeleteAwsDynamicSecret_Call{Call: _e.mock.On("DeleteAwsDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteAwsDynamicSecret_Call) Run(run func(params *secret_service.DeleteAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteAwsDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAwsDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAwsDynamicSecret_Call) Return(_a0 *secret_service.DeleteAwsDynamicSecretOK, _a1 error) *MockClientService_DeleteAwsDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAwsDynamicSecret_Call) RunAndReturn(run func(*secret_service.DeleteAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAwsDynamicSecretOK, error)) *MockClientService_DeleteAwsDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAwsIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteAwsIntegration(params *secret_service.DeleteAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAwsIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAwsIntegration")
	}

	var r0 *secret_service.DeleteAwsIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAwsIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAwsIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAwsIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAwsIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAwsIntegration'
type MockClientService_DeleteAwsIntegration_Call struct {
	*mock.Call
}

// DeleteAwsIntegration is a helper method to define mock.On call
//   - params *secret_service.DeleteAwsIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteAwsIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteAwsIntegration_Call {
	return &MockClientService_DeleteAwsIntegration_Call{Call: _e.mock.On("DeleteAwsIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteAwsIntegration_Call) Run(run func(params *secret_service.DeleteAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteAwsIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAwsIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAwsIntegration_Call) Return(_a0 *secret_service.DeleteAwsIntegrationOK, _a1 error) *MockClientService_DeleteAwsIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAwsIntegration_Call) RunAndReturn(run func(*secret_service.DeleteAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAwsIntegrationOK, error)) *MockClientService_DeleteAwsIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGatewayPool provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteGatewayPool(params *secret_service.DeleteGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteGatewayPoolOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGatewayPool")
	}

	var r0 *secret_service.DeleteGatewayPoolOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteGatewayPoolOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteGatewayPoolOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteGatewayPoolOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteGatewayPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGatewayPool'
type MockClientService_DeleteGatewayPool_Call struct {
	*mock.Call
}

// DeleteGatewayPool is a helper method to define mock.On call
//   - params *secret_service.DeleteGatewayPoolParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteGatewayPool(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteGatewayPool_Call {
	return &MockClientService_DeleteGatewayPool_Call{Call: _e.mock.On("DeleteGatewayPool",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteGatewayPool_Call) Run(run func(params *secret_service.DeleteGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteGatewayPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteGatewayPoolParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteGatewayPool_Call) Return(_a0 *secret_service.DeleteGatewayPoolOK, _a1 error) *MockClientService_DeleteGatewayPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteGatewayPool_Call) RunAndReturn(run func(*secret_service.DeleteGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteGatewayPoolOK, error)) *MockClientService_DeleteGatewayPool_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGcpDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteGcpDynamicSecret(params *secret_service.DeleteGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteGcpDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGcpDynamicSecret")
	}

	var r0 *secret_service.DeleteGcpDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteGcpDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteGcpDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteGcpDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteGcpDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGcpDynamicSecret'
type MockClientService_DeleteGcpDynamicSecret_Call struct {
	*mock.Call
}

// DeleteGcpDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.DeleteGcpDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteGcpDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteGcpDynamicSecret_Call {
	return &MockClientService_DeleteGcpDynamicSecret_Call{Call: _e.mock.On("DeleteGcpDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteGcpDynamicSecret_Call) Run(run func(params *secret_service.DeleteGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteGcpDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteGcpDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteGcpDynamicSecret_Call) Return(_a0 *secret_service.DeleteGcpDynamicSecretOK, _a1 error) *MockClientService_DeleteGcpDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteGcpDynamicSecret_Call) RunAndReturn(run func(*secret_service.DeleteGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteGcpDynamicSecretOK, error)) *MockClientService_DeleteGcpDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGcpIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteGcpIntegration(params *secret_service.DeleteGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteGcpIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGcpIntegration")
	}

	var r0 *secret_service.DeleteGcpIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteGcpIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteGcpIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteGcpIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteGcpIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGcpIntegration'
type MockClientService_DeleteGcpIntegration_Call struct {
	*mock.Call
}

// DeleteGcpIntegration is a helper method to define mock.On call
//   - params *secret_service.DeleteGcpIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteGcpIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteGcpIntegration_Call {
	return &MockClientService_DeleteGcpIntegration_Call{Call: _e.mock.On("DeleteGcpIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteGcpIntegration_Call) Run(run func(params *secret_service.DeleteGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteGcpIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteGcpIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteGcpIntegration_Call) Return(_a0 *secret_service.DeleteGcpIntegrationOK, _a1 error) *MockClientService_DeleteGcpIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteGcpIntegration_Call) RunAndReturn(run func(*secret_service.DeleteGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteGcpIntegrationOK, error)) *MockClientService_DeleteGcpIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMongoDBAtlasIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteMongoDBAtlasIntegration(params *secret_service.DeleteMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteMongoDBAtlasIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMongoDBAtlasIntegration")
	}

	var r0 *secret_service.DeleteMongoDBAtlasIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteMongoDBAtlasIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteMongoDBAtlasIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteMongoDBAtlasIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteMongoDBAtlasIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMongoDBAtlasIntegration'
type MockClientService_DeleteMongoDBAtlasIntegration_Call struct {
	*mock.Call
}

// DeleteMongoDBAtlasIntegration is a helper method to define mock.On call
//   - params *secret_service.DeleteMongoDBAtlasIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteMongoDBAtlasIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteMongoDBAtlasIntegration_Call {
	return &MockClientService_DeleteMongoDBAtlasIntegration_Call{Call: _e.mock.On("DeleteMongoDBAtlasIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteMongoDBAtlasIntegration_Call) Run(run func(params *secret_service.DeleteMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteMongoDBAtlasIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteMongoDBAtlasIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteMongoDBAtlasIntegration_Call) Return(_a0 *secret_service.DeleteMongoDBAtlasIntegrationOK, _a1 error) *MockClientService_DeleteMongoDBAtlasIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteMongoDBAtlasIntegration_Call) RunAndReturn(run func(*secret_service.DeleteMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteMongoDBAtlasIntegrationOK, error)) *MockClientService_DeleteMongoDBAtlasIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTwilioIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteTwilioIntegration(params *secret_service.DeleteTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteTwilioIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTwilioIntegration")
	}

	var r0 *secret_service.DeleteTwilioIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteTwilioIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteTwilioIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteTwilioIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteTwilioIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTwilioIntegration'
type MockClientService_DeleteTwilioIntegration_Call struct {
	*mock.Call
}

// DeleteTwilioIntegration is a helper method to define mock.On call
//   - params *secret_service.DeleteTwilioIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteTwilioIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteTwilioIntegration_Call {
	return &MockClientService_DeleteTwilioIntegration_Call{Call: _e.mock.On("DeleteTwilioIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteTwilioIntegration_Call) Run(run func(params *secret_service.DeleteTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteTwilioIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteTwilioIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteTwilioIntegration_Call) Return(_a0 *secret_service.DeleteTwilioIntegrationOK, _a1 error) *MockClientService_DeleteTwilioIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteTwilioIntegration_Call) RunAndReturn(run func(*secret_service.DeleteTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteTwilioIntegrationOK, error)) *MockClientService_DeleteTwilioIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetApp(params *secret_service.GetAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *secret_service.GetAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApp'
type MockClientService_GetApp_Call struct {
	*mock.Call
}

// GetApp is a helper method to define mock.On call
//   - params *secret_service.GetAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetApp_Call {
	return &MockClientService_GetApp_Call{Call: _e.mock.On("GetApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetApp_Call) Run(run func(params *secret_service.GetAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetApp_Call) Return(_a0 *secret_service.GetAppOK, _a1 error) *MockClientService_GetApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetApp_Call) RunAndReturn(run func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppOK, error)) *MockClientService_GetApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetAppSecret(params *secret_service.GetAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAppSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppSecret")
	}

	var r0 *secret_service.GetAppSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAppSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAppSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAppSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppSecret'
type MockClientService_GetAppSecret_Call struct {
	*mock.Call
}

// GetAppSecret is a helper method to define mock.On call
//   - params *secret_service.GetAppSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetAppSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetAppSecret_Call {
	return &MockClientService_GetAppSecret_Call{Call: _e.mock.On("GetAppSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetAppSecret_Call) Run(run func(params *secret_service.GetAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetAppSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAppSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAppSecret_Call) Return(_a0 *secret_service.GetAppSecretOK, _a1 error) *MockClientService_GetAppSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAppSecret_Call) RunAndReturn(run func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretOK, error)) *MockClientService_GetAppSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppSecretVersion provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetAppSecretVersion(params *secret_service.GetAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAppSecretVersionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppSecretVersion")
	}

	var r0 *secret_service.GetAppSecretVersionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretVersionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAppSecretVersionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAppSecretVersionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAppSecretVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppSecretVersion'
type MockClientService_GetAppSecretVersion_Call struct {
	*mock.Call
}

// GetAppSecretVersion is a helper method to define mock.On call
//   - params *secret_service.GetAppSecretVersionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetAppSecretVersion(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetAppSecretVersion_Call {
	return &MockClientService_GetAppSecretVersion_Call{Call: _e.mock.On("GetAppSecretVersion",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetAppSecretVersion_Call) Run(run func(params *secret_service.GetAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetAppSecretVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAppSecretVersionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAppSecretVersion_Call) Return(_a0 *secret_service.GetAppSecretVersionOK, _a1 error) *MockClientService_GetAppSecretVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAppSecretVersion_Call) RunAndReturn(run func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretVersionOK, error)) *MockClientService_GetAppSecretVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetAwsDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetAwsDynamicSecret(params *secret_service.GetAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAwsDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAwsDynamicSecret")
	}

	var r0 *secret_service.GetAwsDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAwsDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAwsDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAwsDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAwsDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAwsDynamicSecret'
type MockClientService_GetAwsDynamicSecret_Call struct {
	*mock.Call
}

// GetAwsDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.GetAwsDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetAwsDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetAwsDynamicSecret_Call {
	return &MockClientService_GetAwsDynamicSecret_Call{Call: _e.mock.On("GetAwsDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetAwsDynamicSecret_Call) Run(run func(params *secret_service.GetAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetAwsDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAwsDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAwsDynamicSecret_Call) Return(_a0 *secret_service.GetAwsDynamicSecretOK, _a1 error) *MockClientService_GetAwsDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAwsDynamicSecret_Call) RunAndReturn(run func(*secret_service.GetAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAwsDynamicSecretOK, error)) *MockClientService_GetAwsDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetAwsIAMUserAccessKeyRotatingSecretConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetAwsIAMUserAccessKeyRotatingSecretConfig(params *secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAwsIAMUserAccessKeyRotatingSecretConfig")
	}

	var r0 *secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAwsIAMUserAccessKeyRotatingSecretConfig'
type MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call struct {
	*mock.Call
}

// GetAwsIAMUserAccessKeyRotatingSecretConfig is a helper method to define mock.On call
//   - params *secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetAwsIAMUserAccessKeyRotatingSecretConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call {
	return &MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call{Call: _e.mock.On("GetAwsIAMUserAccessKeyRotatingSecretConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call) Run(run func(params *secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call) Return(_a0 *secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigOK, _a1 error) *MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call) RunAndReturn(run func(*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAwsIAMUserAccessKeyRotatingSecretConfigOK, error)) *MockClientService_GetAwsIAMUserAccessKeyRotatingSecretConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetAwsIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetAwsIntegration(params *secret_service.GetAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAwsIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAwsIntegration")
	}

	var r0 *secret_service.GetAwsIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAwsIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAwsIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAwsIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAwsIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAwsIntegration'
type MockClientService_GetAwsIntegration_Call struct {
	*mock.Call
}

// GetAwsIntegration is a helper method to define mock.On call
//   - params *secret_service.GetAwsIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetAwsIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetAwsIntegration_Call {
	return &MockClientService_GetAwsIntegration_Call{Call: _e.mock.On("GetAwsIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetAwsIntegration_Call) Run(run func(params *secret_service.GetAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetAwsIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAwsIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAwsIntegration_Call) Return(_a0 *secret_service.GetAwsIntegrationOK, _a1 error) *MockClientService_GetAwsIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAwsIntegration_Call) RunAndReturn(run func(*secret_service.GetAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAwsIntegrationOK, error)) *MockClientService_GetAwsIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewayPool provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGatewayPool(params *secret_service.GetGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGatewayPoolOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayPool")
	}

	var r0 *secret_service.GetGatewayPoolOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGatewayPoolOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGatewayPoolOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGatewayPoolOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGatewayPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewayPool'
type MockClientService_GetGatewayPool_Call struct {
	*mock.Call
}

// GetGatewayPool is a helper method to define mock.On call
//   - params *secret_service.GetGatewayPoolParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGatewayPool(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGatewayPool_Call {
	return &MockClientService_GetGatewayPool_Call{Call: _e.mock.On("GetGatewayPool",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGatewayPool_Call) Run(run func(params *secret_service.GetGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGatewayPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGatewayPoolParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGatewayPool_Call) Return(_a0 *secret_service.GetGatewayPoolOK, _a1 error) *MockClientService_GetGatewayPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGatewayPool_Call) RunAndReturn(run func(*secret_service.GetGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGatewayPoolOK, error)) *MockClientService_GetGatewayPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetGatewayPoolCertificate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGatewayPoolCertificate(params *secret_service.GetGatewayPoolCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGatewayPoolCertificateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayPoolCertificate")
	}

	var r0 *secret_service.GetGatewayPoolCertificateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGatewayPoolCertificateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGatewayPoolCertificateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGatewayPoolCertificateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGatewayPoolCertificateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGatewayPoolCertificateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGatewayPoolCertificateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGatewayPoolCertificate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGatewayPoolCertificate'
type MockClientService_GetGatewayPoolCertificate_Call struct {
	*mock.Call
}

// GetGatewayPoolCertificate is a helper method to define mock.On call
//   - params *secret_service.GetGatewayPoolCertificateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGatewayPoolCertificate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGatewayPoolCertificate_Call {
	return &MockClientService_GetGatewayPoolCertificate_Call{Call: _e.mock.On("GetGatewayPoolCertificate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGatewayPoolCertificate_Call) Run(run func(params *secret_service.GetGatewayPoolCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGatewayPoolCertificate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGatewayPoolCertificateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGatewayPoolCertificate_Call) Return(_a0 *secret_service.GetGatewayPoolCertificateOK, _a1 error) *MockClientService_GetGatewayPoolCertificate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGatewayPoolCertificate_Call) RunAndReturn(run func(*secret_service.GetGatewayPoolCertificateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGatewayPoolCertificateOK, error)) *MockClientService_GetGatewayPoolCertificate_Call {
	_c.Call.Return(run)
	return _c
}

// GetGcpDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGcpDynamicSecret(params *secret_service.GetGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGcpDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGcpDynamicSecret")
	}

	var r0 *secret_service.GetGcpDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGcpDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGcpDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGcpDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGcpDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGcpDynamicSecret'
type MockClientService_GetGcpDynamicSecret_Call struct {
	*mock.Call
}

// GetGcpDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.GetGcpDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGcpDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGcpDynamicSecret_Call {
	return &MockClientService_GetGcpDynamicSecret_Call{Call: _e.mock.On("GetGcpDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGcpDynamicSecret_Call) Run(run func(params *secret_service.GetGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGcpDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGcpDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGcpDynamicSecret_Call) Return(_a0 *secret_service.GetGcpDynamicSecretOK, _a1 error) *MockClientService_GetGcpDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGcpDynamicSecret_Call) RunAndReturn(run func(*secret_service.GetGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGcpDynamicSecretOK, error)) *MockClientService_GetGcpDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetGcpIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGcpIntegration(params *secret_service.GetGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGcpIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGcpIntegration")
	}

	var r0 *secret_service.GetGcpIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGcpIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGcpIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGcpIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGcpIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGcpIntegration'
type MockClientService_GetGcpIntegration_Call struct {
	*mock.Call
}

// GetGcpIntegration is a helper method to define mock.On call
//   - params *secret_service.GetGcpIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGcpIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGcpIntegration_Call {
	return &MockClientService_GetGcpIntegration_Call{Call: _e.mock.On("GetGcpIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGcpIntegration_Call) Run(run func(params *secret_service.GetGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGcpIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGcpIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGcpIntegration_Call) Return(_a0 *secret_service.GetGcpIntegrationOK, _a1 error) *MockClientService_GetGcpIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGcpIntegration_Call) RunAndReturn(run func(*secret_service.GetGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGcpIntegrationOK, error)) *MockClientService_GetGcpIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetGcpServiceAccountKeyRotatingSecretConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGcpServiceAccountKeyRotatingSecretConfig(params *secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGcpServiceAccountKeyRotatingSecretConfig")
	}

	var r0 *secret_service.GetGcpServiceAccountKeyRotatingSecretConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGcpServiceAccountKeyRotatingSecretConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGcpServiceAccountKeyRotatingSecretConfig'
type MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call struct {
	*mock.Call
}

// GetGcpServiceAccountKeyRotatingSecretConfig is a helper method to define mock.On call
//   - params *secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGcpServiceAccountKeyRotatingSecretConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call {
	return &MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call{Call: _e.mock.On("GetGcpServiceAccountKeyRotatingSecretConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call) Run(run func(params *secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call) Return(_a0 *secret_service.GetGcpServiceAccountKeyRotatingSecretConfigOK, _a1 error) *MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call) RunAndReturn(run func(*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGcpServiceAccountKeyRotatingSecretConfigOK, error)) *MockClientService_GetGcpServiceAccountKeyRotatingSecretConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetIntegration(params *secret_service.GetIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegration")
	}

	var r0 *secret_service.GetIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIntegration'
type MockClientService_GetIntegration_Call struct {
	*mock.Call
}

// GetIntegration is a helper method to define mock.On call
//   - params *secret_service.GetIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetIntegration_Call {
	return &MockClientService_GetIntegration_Call{Call: _e.mock.On("GetIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetIntegration_Call) Run(run func(params *secret_service.GetIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetIntegration_Call) Return(_a0 *secret_service.GetIntegrationOK, _a1 error) *MockClientService_GetIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetIntegration_Call) RunAndReturn(run func(*secret_service.GetIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetIntegrationOK, error)) *MockClientService_GetIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetMongoDBAtlasIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetMongoDBAtlasIntegration(params *secret_service.GetMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetMongoDBAtlasIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMongoDBAtlasIntegration")
	}

	var r0 *secret_service.GetMongoDBAtlasIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetMongoDBAtlasIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetMongoDBAtlasIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetMongoDBAtlasIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetMongoDBAtlasIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMongoDBAtlasIntegration'
type MockClientService_GetMongoDBAtlasIntegration_Call struct {
	*mock.Call
}

// GetMongoDBAtlasIntegration is a helper method to define mock.On call
//   - params *secret_service.GetMongoDBAtlasIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetMongoDBAtlasIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetMongoDBAtlasIntegration_Call {
	return &MockClientService_GetMongoDBAtlasIntegration_Call{Call: _e.mock.On("GetMongoDBAtlasIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetMongoDBAtlasIntegration_Call) Run(run func(params *secret_service.GetMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetMongoDBAtlasIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetMongoDBAtlasIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetMongoDBAtlasIntegration_Call) Return(_a0 *secret_service.GetMongoDBAtlasIntegrationOK, _a1 error) *MockClientService_GetMongoDBAtlasIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetMongoDBAtlasIntegration_Call) RunAndReturn(run func(*secret_service.GetMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetMongoDBAtlasIntegrationOK, error)) *MockClientService_GetMongoDBAtlasIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetMongoDBAtlasRotatingSecretConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetMongoDBAtlasRotatingSecretConfig(params *secret_service.GetMongoDBAtlasRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetMongoDBAtlasRotatingSecretConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMongoDBAtlasRotatingSecretConfig")
	}

	var r0 *secret_service.GetMongoDBAtlasRotatingSecretConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetMongoDBAtlasRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetMongoDBAtlasRotatingSecretConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetMongoDBAtlasRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetMongoDBAtlasRotatingSecretConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetMongoDBAtlasRotatingSecretConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetMongoDBAtlasRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMongoDBAtlasRotatingSecretConfig'
type MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call struct {
	*mock.Call
}

// GetMongoDBAtlasRotatingSecretConfig is a helper method to define mock.On call
//   - params *secret_service.GetMongoDBAtlasRotatingSecretConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetMongoDBAtlasRotatingSecretConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call {
	return &MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call{Call: _e.mock.On("GetMongoDBAtlasRotatingSecretConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call) Run(run func(params *secret_service.GetMongoDBAtlasRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetMongoDBAtlasRotatingSecretConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call) Return(_a0 *secret_service.GetMongoDBAtlasRotatingSecretConfigOK, _a1 error) *MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call) RunAndReturn(run func(*secret_service.GetMongoDBAtlasRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetMongoDBAtlasRotatingSecretConfigOK, error)) *MockClientService_GetMongoDBAtlasRotatingSecretConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetRotatingSecretState provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetRotatingSecretState(params *secret_service.GetRotatingSecretStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetRotatingSecretStateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRotatingSecretState")
	}

	var r0 *secret_service.GetRotatingSecretStateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetRotatingSecretStateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetRotatingSecretStateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetRotatingSecretStateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetRotatingSecretStateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetRotatingSecretStateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetRotatingSecretStateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetRotatingSecretState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRotatingSecretState'
type MockClientService_GetRotatingSecretState_Call struct {
	*mock.Call
}

// GetRotatingSecretState is a helper method to define mock.On call
//   - params *secret_service.GetRotatingSecretStateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetRotatingSecretState(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetRotatingSecretState_Call {
	return &MockClientService_GetRotatingSecretState_Call{Call: _e.mock.On("GetRotatingSecretState",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetRotatingSecretState_Call) Run(run func(params *secret_service.GetRotatingSecretStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetRotatingSecretState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetRotatingSecretStateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetRotatingSecretState_Call) Return(_a0 *secret_service.GetRotatingSecretStateOK, _a1 error) *MockClientService_GetRotatingSecretState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetRotatingSecretState_Call) RunAndReturn(run func(*secret_service.GetRotatingSecretStateParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetRotatingSecretStateOK, error)) *MockClientService_GetRotatingSecretState_Call {
	_c.Call.Return(run)
	return _c
}

// GetTwilioIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetTwilioIntegration(params *secret_service.GetTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetTwilioIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTwilioIntegration")
	}

	var r0 *secret_service.GetTwilioIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetTwilioIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetTwilioIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetTwilioIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTwilioIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTwilioIntegration'
type MockClientService_GetTwilioIntegration_Call struct {
	*mock.Call
}

// GetTwilioIntegration is a helper method to define mock.On call
//   - params *secret_service.GetTwilioIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetTwilioIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetTwilioIntegration_Call {
	return &MockClientService_GetTwilioIntegration_Call{Call: _e.mock.On("GetTwilioIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetTwilioIntegration_Call) Run(run func(params *secret_service.GetTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetTwilioIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetTwilioIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTwilioIntegration_Call) Return(_a0 *secret_service.GetTwilioIntegrationOK, _a1 error) *MockClientService_GetTwilioIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTwilioIntegration_Call) RunAndReturn(run func(*secret_service.GetTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetTwilioIntegrationOK, error)) *MockClientService_GetTwilioIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetTwilioRotatingSecretConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetTwilioRotatingSecretConfig(params *secret_service.GetTwilioRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetTwilioRotatingSecretConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTwilioRotatingSecretConfig")
	}

	var r0 *secret_service.GetTwilioRotatingSecretConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetTwilioRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetTwilioRotatingSecretConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetTwilioRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetTwilioRotatingSecretConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetTwilioRotatingSecretConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetTwilioRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetTwilioRotatingSecretConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTwilioRotatingSecretConfig'
type MockClientService_GetTwilioRotatingSecretConfig_Call struct {
	*mock.Call
}

// GetTwilioRotatingSecretConfig is a helper method to define mock.On call
//   - params *secret_service.GetTwilioRotatingSecretConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetTwilioRotatingSecretConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetTwilioRotatingSecretConfig_Call {
	return &MockClientService_GetTwilioRotatingSecretConfig_Call{Call: _e.mock.On("GetTwilioRotatingSecretConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetTwilioRotatingSecretConfig_Call) Run(run func(params *secret_service.GetTwilioRotatingSecretConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetTwilioRotatingSecretConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetTwilioRotatingSecretConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetTwilioRotatingSecretConfig_Call) Return(_a0 *secret_service.GetTwilioRotatingSecretConfigOK, _a1 error) *MockClientService_GetTwilioRotatingSecretConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetTwilioRotatingSecretConfig_Call) RunAndReturn(run func(*secret_service.GetTwilioRotatingSecretConfigParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetTwilioRotatingSecretConfigOK, error)) *MockClientService_GetTwilioRotatingSecretConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsage provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetUsage(params *secret_service.GetUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage")
	}

	var r0 *secret_service.GetUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsage'
type MockClientService_GetUsage_Call struct {
	*mock.Call
}

// GetUsage is a helper method to define mock.On call
//   - params *secret_service.GetUsageParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetUsage(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetUsage_Call {
	return &MockClientService_GetUsage_Call{Call: _e.mock.On("GetUsage",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetUsage_Call) Run(run func(params *secret_service.GetUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetUsageParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUsage_Call) Return(_a0 *secret_service.GetUsageOK, _a1 error) *MockClientService_GetUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUsage_Call) RunAndReturn(run func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsageOK, error)) *MockClientService_GetUsage_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsage2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetUsage2(params *secret_service.GetUsage2Params, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetUsage2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage2")
	}

	var r0 *secret_service.GetUsage2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsage2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetUsage2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetUsage2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUsage2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsage2'
type MockClientService_GetUsage2_Call struct {
	*mock.Call
}

// GetUsage2 is a helper method to define mock.On call
//   - params *secret_service.GetUsage2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetUsage2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetUsage2_Call {
	return &MockClientService_GetUsage2_Call{Call: _e.mock.On("GetUsage2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetUsage2_Call) Run(run func(params *secret_service.GetUsage2Params, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetUsage2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetUsage2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUsage2_Call) Return(_a0 *secret_service.GetUsage2OK, _a1 error) *MockClientService_GetUsage2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUsage2_Call) RunAndReturn(run func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsage2OK, error)) *MockClientService_GetUsage2_Call {
	_c.Call.Return(run)
	return _c
}

// ListAppSecretVersions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListAppSecretVersions(params *secret_service.ListAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAppSecretVersionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppSecretVersions")
	}

	var r0 *secret_service.ListAppSecretVersionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretVersionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAppSecretVersionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAppSecretVersionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListAppSecretVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAppSecretVersions'
type MockClientService_ListAppSecretVersions_Call struct {
	*mock.Call
}

// ListAppSecretVersions is a helper method to define mock.On call
//   - params *secret_service.ListAppSecretVersionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListAppSecretVersions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListAppSecretVersions_Call {
	return &MockClientService_ListAppSecretVersions_Call{Call: _e.mock.On("ListAppSecretVersions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListAppSecretVersions_Call) Run(run func(params *secret_service.ListAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListAppSecretVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAppSecretVersionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListAppSecretVersions_Call) Return(_a0 *secret_service.ListAppSecretVersionsOK, _a1 error) *MockClientService_ListAppSecretVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListAppSecretVersions_Call) RunAndReturn(run func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretVersionsOK, error)) *MockClientService_ListAppSecretVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListAppSecrets provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListAppSecrets(params *secret_service.ListAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAppSecretsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppSecrets")
	}

	var r0 *secret_service.ListAppSecretsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAppSecretsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAppSecretsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListAppSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAppSecrets'
type MockClientService_ListAppSecrets_Call struct {
	*mock.Call
}

// ListAppSecrets is a helper method to define mock.On call
//   - params *secret_service.ListAppSecretsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListAppSecrets(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListAppSecrets_Call {
	return &MockClientService_ListAppSecrets_Call{Call: _e.mock.On("ListAppSecrets",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListAppSecrets_Call) Run(run func(params *secret_service.ListAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListAppSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAppSecretsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListAppSecrets_Call) Return(_a0 *secret_service.ListAppSecretsOK, _a1 error) *MockClientService_ListAppSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListAppSecrets_Call) RunAndReturn(run func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretsOK, error)) *MockClientService_ListAppSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// ListApps provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListApps(params *secret_service.ListAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAppsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApps")
	}

	var r0 *secret_service.ListAppsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAppsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAppsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListApps'
type MockClientService_ListApps_Call struct {
	*mock.Call
}

// ListApps is a helper method to define mock.On call
//   - params *secret_service.ListAppsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListApps(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListApps_Call {
	return &MockClientService_ListApps_Call{Call: _e.mock.On("ListApps",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListApps_Call) Run(run func(params *secret_service.ListAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAppsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListApps_Call) Return(_a0 *secret_service.ListAppsOK, _a1 error) *MockClientService_ListApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListApps_Call) RunAndReturn(run func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppsOK, error)) *MockClientService_ListApps_Call {
	_c.Call.Return(run)
	return _c
}

// ListAwsDynamicSecrets provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListAwsDynamicSecrets(params *secret_service.ListAwsDynamicSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAwsDynamicSecretsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAwsDynamicSecrets")
	}

	var r0 *secret_service.ListAwsDynamicSecretsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAwsDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAwsDynamicSecretsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAwsDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAwsDynamicSecretsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAwsDynamicSecretsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAwsDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListAwsDynamicSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAwsDynamicSecrets'
type MockClientService_ListAwsDynamicSecrets_Call struct {
	*mock.Call
}

// ListAwsDynamicSecrets is a helper method to define mock.On call
//   - params *secret_service.ListAwsDynamicSecretsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListAwsDynamicSecrets(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListAwsDynamicSecrets_Call {
	return &MockClientService_ListAwsDynamicSecrets_Call{Call: _e.mock.On("ListAwsDynamicSecrets",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListAwsDynamicSecrets_Call) Run(run func(params *secret_service.ListAwsDynamicSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListAwsDynamicSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAwsDynamicSecretsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListAwsDynamicSecrets_Call) Return(_a0 *secret_service.ListAwsDynamicSecretsOK, _a1 error) *MockClientService_ListAwsDynamicSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListAwsDynamicSecrets_Call) RunAndReturn(run func(*secret_service.ListAwsDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAwsDynamicSecretsOK, error)) *MockClientService_ListAwsDynamicSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// ListAwsIntegrations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListAwsIntegrations(params *secret_service.ListAwsIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAwsIntegrationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAwsIntegrations")
	}

	var r0 *secret_service.ListAwsIntegrationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAwsIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAwsIntegrationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAwsIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAwsIntegrationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAwsIntegrationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAwsIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListAwsIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAwsIntegrations'
type MockClientService_ListAwsIntegrations_Call struct {
	*mock.Call
}

// ListAwsIntegrations is a helper method to define mock.On call
//   - params *secret_service.ListAwsIntegrationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListAwsIntegrations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListAwsIntegrations_Call {
	return &MockClientService_ListAwsIntegrations_Call{Call: _e.mock.On("ListAwsIntegrations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListAwsIntegrations_Call) Run(run func(params *secret_service.ListAwsIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListAwsIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAwsIntegrationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListAwsIntegrations_Call) Return(_a0 *secret_service.ListAwsIntegrationsOK, _a1 error) *MockClientService_ListAwsIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListAwsIntegrations_Call) RunAndReturn(run func(*secret_service.ListAwsIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAwsIntegrationsOK, error)) *MockClientService_ListAwsIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// ListGatewayPoolGateways provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListGatewayPoolGateways(params *secret_service.ListGatewayPoolGatewaysParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListGatewayPoolGatewaysOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGatewayPoolGateways")
	}

	var r0 *secret_service.ListGatewayPoolGatewaysOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListGatewayPoolGatewaysParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGatewayPoolGatewaysOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListGatewayPoolGatewaysParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListGatewayPoolGatewaysOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListGatewayPoolGatewaysOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListGatewayPoolGatewaysParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListGatewayPoolGateways_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGatewayPoolGateways'
type MockClientService_ListGatewayPoolGateways_Call struct {
	*mock.Call
}

// ListGatewayPoolGateways is a helper method to define mock.On call
//   - params *secret_service.ListGatewayPoolGatewaysParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListGatewayPoolGateways(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListGatewayPoolGateways_Call {
	return &MockClientService_ListGatewayPoolGateways_Call{Call: _e.mock.On("ListGatewayPoolGateways",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListGatewayPoolGateways_Call) Run(run func(params *secret_service.ListGatewayPoolGatewaysParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListGatewayPoolGateways_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListGatewayPoolGatewaysParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListGatewayPoolGateways_Call) Return(_a0 *secret_service.ListGatewayPoolGatewaysOK, _a1 error) *MockClientService_ListGatewayPoolGateways_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListGatewayPoolGateways_Call) RunAndReturn(run func(*secret_service.ListGatewayPoolGatewaysParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGatewayPoolGatewaysOK, error)) *MockClientService_ListGatewayPoolGateways_Call {
	_c.Call.Return(run)
	return _c
}

// ListGatewayPoolIntegrations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListGatewayPoolIntegrations(params *secret_service.ListGatewayPoolIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListGatewayPoolIntegrationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGatewayPoolIntegrations")
	}

	var r0 *secret_service.ListGatewayPoolIntegrationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListGatewayPoolIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGatewayPoolIntegrationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListGatewayPoolIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListGatewayPoolIntegrationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListGatewayPoolIntegrationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListGatewayPoolIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListGatewayPoolIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGatewayPoolIntegrations'
type MockClientService_ListGatewayPoolIntegrations_Call struct {
	*mock.Call
}

// ListGatewayPoolIntegrations is a helper method to define mock.On call
//   - params *secret_service.ListGatewayPoolIntegrationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListGatewayPoolIntegrations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListGatewayPoolIntegrations_Call {
	return &MockClientService_ListGatewayPoolIntegrations_Call{Call: _e.mock.On("ListGatewayPoolIntegrations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListGatewayPoolIntegrations_Call) Run(run func(params *secret_service.ListGatewayPoolIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListGatewayPoolIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListGatewayPoolIntegrationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListGatewayPoolIntegrations_Call) Return(_a0 *secret_service.ListGatewayPoolIntegrationsOK, _a1 error) *MockClientService_ListGatewayPoolIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListGatewayPoolIntegrations_Call) RunAndReturn(run func(*secret_service.ListGatewayPoolIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGatewayPoolIntegrationsOK, error)) *MockClientService_ListGatewayPoolIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// ListGatewayPools provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListGatewayPools(params *secret_service.ListGatewayPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListGatewayPoolsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGatewayPools")
	}

	var r0 *secret_service.ListGatewayPoolsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListGatewayPoolsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGatewayPoolsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListGatewayPoolsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListGatewayPoolsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListGatewayPoolsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListGatewayPoolsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListGatewayPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGatewayPools'
type MockClientService_ListGatewayPools_Call struct {
	*mock.Call
}

// ListGatewayPools is a helper method to define mock.On call
//   - params *secret_service.ListGatewayPoolsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListGatewayPools(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListGatewayPools_Call {
	return &MockClientService_ListGatewayPools_Call{Call: _e.mock.On("ListGatewayPools",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListGatewayPools_Call) Run(run func(params *secret_service.ListGatewayPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListGatewayPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListGatewayPoolsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListGatewayPools_Call) Return(_a0 *secret_service.ListGatewayPoolsOK, _a1 error) *MockClientService_ListGatewayPools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListGatewayPools_Call) RunAndReturn(run func(*secret_service.ListGatewayPoolsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGatewayPoolsOK, error)) *MockClientService_ListGatewayPools_Call {
	_c.Call.Return(run)
	return _c
}

// ListGcpDynamicSecrets provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListGcpDynamicSecrets(params *secret_service.ListGcpDynamicSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListGcpDynamicSecretsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGcpDynamicSecrets")
	}

	var r0 *secret_service.ListGcpDynamicSecretsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListGcpDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGcpDynamicSecretsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListGcpDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListGcpDynamicSecretsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListGcpDynamicSecretsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListGcpDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListGcpDynamicSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGcpDynamicSecrets'
type MockClientService_ListGcpDynamicSecrets_Call struct {
	*mock.Call
}

// ListGcpDynamicSecrets is a helper method to define mock.On call
//   - params *secret_service.ListGcpDynamicSecretsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListGcpDynamicSecrets(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListGcpDynamicSecrets_Call {
	return &MockClientService_ListGcpDynamicSecrets_Call{Call: _e.mock.On("ListGcpDynamicSecrets",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListGcpDynamicSecrets_Call) Run(run func(params *secret_service.ListGcpDynamicSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListGcpDynamicSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListGcpDynamicSecretsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListGcpDynamicSecrets_Call) Return(_a0 *secret_service.ListGcpDynamicSecretsOK, _a1 error) *MockClientService_ListGcpDynamicSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListGcpDynamicSecrets_Call) RunAndReturn(run func(*secret_service.ListGcpDynamicSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGcpDynamicSecretsOK, error)) *MockClientService_ListGcpDynamicSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// ListGcpIntegrations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListGcpIntegrations(params *secret_service.ListGcpIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListGcpIntegrationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGcpIntegrations")
	}

	var r0 *secret_service.ListGcpIntegrationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListGcpIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGcpIntegrationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListGcpIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListGcpIntegrationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListGcpIntegrationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListGcpIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListGcpIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGcpIntegrations'
type MockClientService_ListGcpIntegrations_Call struct {
	*mock.Call
}

// ListGcpIntegrations is a helper method to define mock.On call
//   - params *secret_service.ListGcpIntegrationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListGcpIntegrations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListGcpIntegrations_Call {
	return &MockClientService_ListGcpIntegrations_Call{Call: _e.mock.On("ListGcpIntegrations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListGcpIntegrations_Call) Run(run func(params *secret_service.ListGcpIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListGcpIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListGcpIntegrationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListGcpIntegrations_Call) Return(_a0 *secret_service.ListGcpIntegrationsOK, _a1 error) *MockClientService_ListGcpIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListGcpIntegrations_Call) RunAndReturn(run func(*secret_service.ListGcpIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGcpIntegrationsOK, error)) *MockClientService_ListGcpIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// ListIntegrations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListIntegrations(params *secret_service.ListIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListIntegrationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIntegrations")
	}

	var r0 *secret_service.ListIntegrationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListIntegrationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListIntegrationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListIntegrationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListIntegrations'
type MockClientService_ListIntegrations_Call struct {
	*mock.Call
}

// ListIntegrations is a helper method to define mock.On call
//   - params *secret_service.ListIntegrationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListIntegrations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListIntegrations_Call {
	return &MockClientService_ListIntegrations_Call{Call: _e.mock.On("ListIntegrations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListIntegrations_Call) Run(run func(params *secret_service.ListIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListIntegrationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListIntegrations_Call) Return(_a0 *secret_service.ListIntegrationsOK, _a1 error) *MockClientService_ListIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListIntegrations_Call) RunAndReturn(run func(*secret_service.ListIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListIntegrationsOK, error)) *MockClientService_ListIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// ListMongoDBAtlasIntegrations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListMongoDBAtlasIntegrations(params *secret_service.ListMongoDBAtlasIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListMongoDBAtlasIntegrationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMongoDBAtlasIntegrations")
	}

	var r0 *secret_service.ListMongoDBAtlasIntegrationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListMongoDBAtlasIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListMongoDBAtlasIntegrationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListMongoDBAtlasIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListMongoDBAtlasIntegrationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListMongoDBAtlasIntegrationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListMongoDBAtlasIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListMongoDBAtlasIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMongoDBAtlasIntegrations'
type MockClientService_ListMongoDBAtlasIntegrations_Call struct {
	*mock.Call
}

// ListMongoDBAtlasIntegrations is a helper method to define mock.On call
//   - params *secret_service.ListMongoDBAtlasIntegrationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListMongoDBAtlasIntegrations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListMongoDBAtlasIntegrations_Call {
	return &MockClientService_ListMongoDBAtlasIntegrations_Call{Call: _e.mock.On("ListMongoDBAtlasIntegrations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListMongoDBAtlasIntegrations_Call) Run(run func(params *secret_service.ListMongoDBAtlasIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListMongoDBAtlasIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListMongoDBAtlasIntegrationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListMongoDBAtlasIntegrations_Call) Return(_a0 *secret_service.ListMongoDBAtlasIntegrationsOK, _a1 error) *MockClientService_ListMongoDBAtlasIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListMongoDBAtlasIntegrations_Call) RunAndReturn(run func(*secret_service.ListMongoDBAtlasIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListMongoDBAtlasIntegrationsOK, error)) *MockClientService_ListMongoDBAtlasIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenAppSecretVersions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListOpenAppSecretVersions(params *secret_service.ListOpenAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListOpenAppSecretVersionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenAppSecretVersions")
	}

	var r0 *secret_service.ListOpenAppSecretVersionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListOpenAppSecretVersionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListOpenAppSecretVersionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListOpenAppSecretVersionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListOpenAppSecretVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenAppSecretVersions'
type MockClientService_ListOpenAppSecretVersions_Call struct {
	*mock.Call
}

// ListOpenAppSecretVersions is a helper method to define mock.On call
//   - params *secret_service.ListOpenAppSecretVersionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListOpenAppSecretVersions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListOpenAppSecretVersions_Call {
	return &MockClientService_ListOpenAppSecretVersions_Call{Call: _e.mock.On("ListOpenAppSecretVersions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListOpenAppSecretVersions_Call) Run(run func(params *secret_service.ListOpenAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListOpenAppSecretVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListOpenAppSecretVersionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListOpenAppSecretVersions_Call) Return(_a0 *secret_service.ListOpenAppSecretVersionsOK, _a1 error) *MockClientService_ListOpenAppSecretVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListOpenAppSecretVersions_Call) RunAndReturn(run func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListOpenAppSecretVersionsOK, error)) *MockClientService_ListOpenAppSecretVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListTwilioIntegrations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListTwilioIntegrations(params *secret_service.ListTwilioIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListTwilioIntegrationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTwilioIntegrations")
	}

	var r0 *secret_service.ListTwilioIntegrationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListTwilioIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListTwilioIntegrationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListTwilioIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListTwilioIntegrationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListTwilioIntegrationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListTwilioIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListTwilioIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTwilioIntegrations'
type MockClientService_ListTwilioIntegrations_Call struct {
	*mock.Call
}

// ListTwilioIntegrations is a helper method to define mock.On call
//   - params *secret_service.ListTwilioIntegrationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListTwilioIntegrations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListTwilioIntegrations_Call {
	return &MockClientService_ListTwilioIntegrations_Call{Call: _e.mock.On("ListTwilioIntegrations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListTwilioIntegrations_Call) Run(run func(params *secret_service.ListTwilioIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListTwilioIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListTwilioIntegrationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListTwilioIntegrations_Call) Return(_a0 *secret_service.ListTwilioIntegrationsOK, _a1 error) *MockClientService_ListTwilioIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListTwilioIntegrations_Call) RunAndReturn(run func(*secret_service.ListTwilioIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListTwilioIntegrationsOK, error)) *MockClientService_ListTwilioIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAppSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OpenAppSecret(params *secret_service.OpenAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.OpenAppSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenAppSecret")
	}

	var r0 *secret_service.OpenAppSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.OpenAppSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.OpenAppSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OpenAppSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAppSecret'
type MockClientService_OpenAppSecret_Call struct {
	*mock.Call
}

// OpenAppSecret is a helper method to define mock.On call
//   - params *secret_service.OpenAppSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) OpenAppSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OpenAppSecret_Call {
	return &MockClientService_OpenAppSecret_Call{Call: _e.mock.On("OpenAppSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OpenAppSecret_Call) Run(run func(params *secret_service.OpenAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_OpenAppSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.OpenAppSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OpenAppSecret_Call) Return(_a0 *secret_service.OpenAppSecretOK, _a1 error) *MockClientService_OpenAppSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OpenAppSecret_Call) RunAndReturn(run func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretOK, error)) *MockClientService_OpenAppSecret_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAppSecretByResourceName provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OpenAppSecretByResourceName(params *secret_service.OpenAppSecretByResourceNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.OpenAppSecretByResourceNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenAppSecretByResourceName")
	}

	var r0 *secret_service.OpenAppSecretByResourceNameOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretByResourceNameParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretByResourceNameOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretByResourceNameParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.OpenAppSecretByResourceNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.OpenAppSecretByResourceNameOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.OpenAppSecretByResourceNameParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OpenAppSecretByResourceName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAppSecretByResourceName'
type MockClientService_OpenAppSecretByResourceName_Call struct {
	*mock.Call
}

// OpenAppSecretByResourceName is a helper method to define mock.On call
//   - params *secret_service.OpenAppSecretByResourceNameParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) OpenAppSecretByResourceName(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OpenAppSecretByResourceName_Call {
	return &MockClientService_OpenAppSecretByResourceName_Call{Call: _e.mock.On("OpenAppSecretByResourceName",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OpenAppSecretByResourceName_Call) Run(run func(params *secret_service.OpenAppSecretByResourceNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_OpenAppSecretByResourceName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.OpenAppSecretByResourceNameParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OpenAppSecretByResourceName_Call) Return(_a0 *secret_service.OpenAppSecretByResourceNameOK, _a1 error) *MockClientService_OpenAppSecretByResourceName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OpenAppSecretByResourceName_Call) RunAndReturn(run func(*secret_service.OpenAppSecretByResourceNameParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretByResourceNameOK, error)) *MockClientService_OpenAppSecretByResourceName_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAppSecretVersion provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OpenAppSecretVersion(params *secret_service.OpenAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.OpenAppSecretVersionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenAppSecretVersion")
	}

	var r0 *secret_service.OpenAppSecretVersionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretVersionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.OpenAppSecretVersionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.OpenAppSecretVersionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OpenAppSecretVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAppSecretVersion'
type MockClientService_OpenAppSecretVersion_Call struct {
	*mock.Call
}

// OpenAppSecretVersion is a helper method to define mock.On call
//   - params *secret_service.OpenAppSecretVersionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) OpenAppSecretVersion(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OpenAppSecretVersion_Call {
	return &MockClientService_OpenAppSecretVersion_Call{Call: _e.mock.On("OpenAppSecretVersion",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OpenAppSecretVersion_Call) Run(run func(params *secret_service.OpenAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_OpenAppSecretVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.OpenAppSecretVersionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OpenAppSecretVersion_Call) Return(_a0 *secret_service.OpenAppSecretVersionOK, _a1 error) *MockClientService_OpenAppSecretVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OpenAppSecretVersion_Call) RunAndReturn(run func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretVersionOK, error)) *MockClientService_OpenAppSecretVersion_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAppSecrets provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OpenAppSecrets(params *secret_service.OpenAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.OpenAppSecretsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenAppSecrets")
	}

	var r0 *secret_service.OpenAppSecretsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.OpenAppSecretsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.OpenAppSecretsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OpenAppSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAppSecrets'
type MockClientService_OpenAppSecrets_Call struct {
	*mock.Call
}

// OpenAppSecrets is a helper method to define mock.On call
//   - params *secret_service.OpenAppSecretsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) OpenAppSecrets(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OpenAppSecrets_Call {
	return &MockClientService_OpenAppSecrets_Call{Call: _e.mock.On("OpenAppSecrets",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OpenAppSecrets_Call) Run(run func(params *secret_service.OpenAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_OpenAppSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.OpenAppSecretsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OpenAppSecrets_Call) Return(_a0 *secret_service.OpenAppSecretsOK, _a1 error) *MockClientService_OpenAppSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OpenAppSecrets_Call) RunAndReturn(run func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretsOK, error)) *MockClientService_OpenAppSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// RotateSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) RotateSecret(params *secret_service.RotateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.RotateSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RotateSecret")
	}

	var r0 *secret_service.RotateSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.RotateSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.RotateSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.RotateSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.RotateSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.RotateSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.RotateSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_RotateSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotateSecret'
type MockClientService_RotateSecret_Call struct {
	*mock.Call
}

// RotateSecret is a helper method to define mock.On call
//   - params *secret_service.RotateSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) RotateSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_RotateSecret_Call {
	return &MockClientService_RotateSecret_Call{Call: _e.mock.On("RotateSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_RotateSecret_Call) Run(run func(params *secret_service.RotateSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_RotateSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.RotateSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_RotateSecret_Call) Return(_a0 *secret_service.RotateSecretOK, _a1 error) *MockClientService_RotateSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_RotateSecret_Call) RunAndReturn(run func(*secret_service.RotateSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.RotateSecretOK, error)) *MockClientService_RotateSecret_Call {
	_c.Call.Return(run)
	return _c
}

// SetTier provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SetTier(params *secret_service.SetTierParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.SetTierOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTier")
	}

	var r0 *secret_service.SetTierOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.SetTierOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.SetTierOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.SetTierOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetTier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTier'
type MockClientService_SetTier_Call struct {
	*mock.Call
}

// SetTier is a helper method to define mock.On call
//   - params *secret_service.SetTierParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) SetTier(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SetTier_Call {
	return &MockClientService_SetTier_Call{Call: _e.mock.On("SetTier",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SetTier_Call) Run(run func(params *secret_service.SetTierParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_SetTier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.SetTierParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetTier_Call) Return(_a0 *secret_service.SetTierOK, _a1 error) *MockClientService_SetTier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetTier_Call) RunAndReturn(run func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.SetTierOK, error)) *MockClientService_SetTier_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateApp(params *secret_service.UpdateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 *secret_service.UpdateAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApp'
type MockClientService_UpdateApp_Call struct {
	*mock.Call
}

// UpdateApp is a helper method to define mock.On call
//   - params *secret_service.UpdateAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateApp_Call {
	return &MockClientService_UpdateApp_Call{Call: _e.mock.On("UpdateApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateApp_Call) Run(run func(params *secret_service.UpdateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateApp_Call) Return(_a0 *secret_service.UpdateAppOK, _a1 error) *MockClientService_UpdateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateApp_Call) RunAndReturn(run func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAppOK, error)) *MockClientService_UpdateApp_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAwsDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateAwsDynamicSecret(params *secret_service.UpdateAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateAwsDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAwsDynamicSecret")
	}

	var r0 *secret_service.UpdateAwsDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAwsDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateAwsDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateAwsDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateAwsDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAwsDynamicSecret'
type MockClientService_UpdateAwsDynamicSecret_Call struct {
	*mock.Call
}

// UpdateAwsDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.UpdateAwsDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateAwsDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateAwsDynamicSecret_Call {
	return &MockClientService_UpdateAwsDynamicSecret_Call{Call: _e.mock.On("UpdateAwsDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateAwsDynamicSecret_Call) Run(run func(params *secret_service.UpdateAwsDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateAwsDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateAwsDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateAwsDynamicSecret_Call) Return(_a0 *secret_service.UpdateAwsDynamicSecretOK, _a1 error) *MockClientService_UpdateAwsDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateAwsDynamicSecret_Call) RunAndReturn(run func(*secret_service.UpdateAwsDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAwsDynamicSecretOK, error)) *MockClientService_UpdateAwsDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAwsIAMUserAccessKeyRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateAwsIAMUserAccessKeyRotatingSecret(params *secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAwsIAMUserAccessKeyRotatingSecret")
	}

	var r0 *secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAwsIAMUserAccessKeyRotatingSecret'
type MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call struct {
	*mock.Call
}

// UpdateAwsIAMUserAccessKeyRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateAwsIAMUserAccessKeyRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call {
	return &MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call{Call: _e.mock.On("UpdateAwsIAMUserAccessKeyRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call) Run(run func(params *secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call) Return(_a0 *secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretOK, _a1 error) *MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call) RunAndReturn(run func(*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAwsIAMUserAccessKeyRotatingSecretOK, error)) *MockClientService_UpdateAwsIAMUserAccessKeyRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAwsIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateAwsIntegration(params *secret_service.UpdateAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateAwsIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAwsIntegration")
	}

	var r0 *secret_service.UpdateAwsIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAwsIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateAwsIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateAwsIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateAwsIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAwsIntegration'
type MockClientService_UpdateAwsIntegration_Call struct {
	*mock.Call
}

// UpdateAwsIntegration is a helper method to define mock.On call
//   - params *secret_service.UpdateAwsIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateAwsIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateAwsIntegration_Call {
	return &MockClientService_UpdateAwsIntegration_Call{Call: _e.mock.On("UpdateAwsIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateAwsIntegration_Call) Run(run func(params *secret_service.UpdateAwsIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateAwsIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateAwsIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateAwsIntegration_Call) Return(_a0 *secret_service.UpdateAwsIntegrationOK, _a1 error) *MockClientService_UpdateAwsIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateAwsIntegration_Call) RunAndReturn(run func(*secret_service.UpdateAwsIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAwsIntegrationOK, error)) *MockClientService_UpdateAwsIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGatewayPool provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateGatewayPool(params *secret_service.UpdateGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateGatewayPoolOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayPool")
	}

	var r0 *secret_service.UpdateGatewayPoolOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGatewayPoolOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateGatewayPoolOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateGatewayPoolOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateGatewayPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGatewayPool'
type MockClientService_UpdateGatewayPool_Call struct {
	*mock.Call
}

// UpdateGatewayPool is a helper method to define mock.On call
//   - params *secret_service.UpdateGatewayPoolParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateGatewayPool(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateGatewayPool_Call {
	return &MockClientService_UpdateGatewayPool_Call{Call: _e.mock.On("UpdateGatewayPool",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateGatewayPool_Call) Run(run func(params *secret_service.UpdateGatewayPoolParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateGatewayPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateGatewayPoolParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateGatewayPool_Call) Return(_a0 *secret_service.UpdateGatewayPoolOK, _a1 error) *MockClientService_UpdateGatewayPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateGatewayPool_Call) RunAndReturn(run func(*secret_service.UpdateGatewayPoolParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGatewayPoolOK, error)) *MockClientService_UpdateGatewayPool_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGcpDynamicSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateGcpDynamicSecret(params *secret_service.UpdateGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateGcpDynamicSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGcpDynamicSecret")
	}

	var r0 *secret_service.UpdateGcpDynamicSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGcpDynamicSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateGcpDynamicSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateGcpDynamicSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateGcpDynamicSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGcpDynamicSecret'
type MockClientService_UpdateGcpDynamicSecret_Call struct {
	*mock.Call
}

// UpdateGcpDynamicSecret is a helper method to define mock.On call
//   - params *secret_service.UpdateGcpDynamicSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateGcpDynamicSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateGcpDynamicSecret_Call {
	return &MockClientService_UpdateGcpDynamicSecret_Call{Call: _e.mock.On("UpdateGcpDynamicSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateGcpDynamicSecret_Call) Run(run func(params *secret_service.UpdateGcpDynamicSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateGcpDynamicSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateGcpDynamicSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateGcpDynamicSecret_Call) Return(_a0 *secret_service.UpdateGcpDynamicSecretOK, _a1 error) *MockClientService_UpdateGcpDynamicSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateGcpDynamicSecret_Call) RunAndReturn(run func(*secret_service.UpdateGcpDynamicSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGcpDynamicSecretOK, error)) *MockClientService_UpdateGcpDynamicSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGcpIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateGcpIntegration(params *secret_service.UpdateGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateGcpIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGcpIntegration")
	}

	var r0 *secret_service.UpdateGcpIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGcpIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateGcpIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateGcpIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateGcpIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGcpIntegration'
type MockClientService_UpdateGcpIntegration_Call struct {
	*mock.Call
}

// UpdateGcpIntegration is a helper method to define mock.On call
//   - params *secret_service.UpdateGcpIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateGcpIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateGcpIntegration_Call {
	return &MockClientService_UpdateGcpIntegration_Call{Call: _e.mock.On("UpdateGcpIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateGcpIntegration_Call) Run(run func(params *secret_service.UpdateGcpIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateGcpIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateGcpIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateGcpIntegration_Call) Return(_a0 *secret_service.UpdateGcpIntegrationOK, _a1 error) *MockClientService_UpdateGcpIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateGcpIntegration_Call) RunAndReturn(run func(*secret_service.UpdateGcpIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGcpIntegrationOK, error)) *MockClientService_UpdateGcpIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGcpServiceAccountKeyRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateGcpServiceAccountKeyRotatingSecret(params *secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateGcpServiceAccountKeyRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGcpServiceAccountKeyRotatingSecret")
	}

	var r0 *secret_service.UpdateGcpServiceAccountKeyRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGcpServiceAccountKeyRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateGcpServiceAccountKeyRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateGcpServiceAccountKeyRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGcpServiceAccountKeyRotatingSecret'
type MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call struct {
	*mock.Call
}

// UpdateGcpServiceAccountKeyRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateGcpServiceAccountKeyRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call {
	return &MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call{Call: _e.mock.On("UpdateGcpServiceAccountKeyRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call) Run(run func(params *secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call) Return(_a0 *secret_service.UpdateGcpServiceAccountKeyRotatingSecretOK, _a1 error) *MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call) RunAndReturn(run func(*secret_service.UpdateGcpServiceAccountKeyRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateGcpServiceAccountKeyRotatingSecretOK, error)) *MockClientService_UpdateGcpServiceAccountKeyRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMongoDBAtlasIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateMongoDBAtlasIntegration(params *secret_service.UpdateMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateMongoDBAtlasIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMongoDBAtlasIntegration")
	}

	var r0 *secret_service.UpdateMongoDBAtlasIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateMongoDBAtlasIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateMongoDBAtlasIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateMongoDBAtlasIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateMongoDBAtlasIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMongoDBAtlasIntegration'
type MockClientService_UpdateMongoDBAtlasIntegration_Call struct {
	*mock.Call
}

// UpdateMongoDBAtlasIntegration is a helper method to define mock.On call
//   - params *secret_service.UpdateMongoDBAtlasIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateMongoDBAtlasIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateMongoDBAtlasIntegration_Call {
	return &MockClientService_UpdateMongoDBAtlasIntegration_Call{Call: _e.mock.On("UpdateMongoDBAtlasIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateMongoDBAtlasIntegration_Call) Run(run func(params *secret_service.UpdateMongoDBAtlasIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateMongoDBAtlasIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateMongoDBAtlasIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateMongoDBAtlasIntegration_Call) Return(_a0 *secret_service.UpdateMongoDBAtlasIntegrationOK, _a1 error) *MockClientService_UpdateMongoDBAtlasIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateMongoDBAtlasIntegration_Call) RunAndReturn(run func(*secret_service.UpdateMongoDBAtlasIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateMongoDBAtlasIntegrationOK, error)) *MockClientService_UpdateMongoDBAtlasIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMongoDBAtlasRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateMongoDBAtlasRotatingSecret(params *secret_service.UpdateMongoDBAtlasRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateMongoDBAtlasRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMongoDBAtlasRotatingSecret")
	}

	var r0 *secret_service.UpdateMongoDBAtlasRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateMongoDBAtlasRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateMongoDBAtlasRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateMongoDBAtlasRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateMongoDBAtlasRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMongoDBAtlasRotatingSecret'
type MockClientService_UpdateMongoDBAtlasRotatingSecret_Call struct {
	*mock.Call
}

// UpdateMongoDBAtlasRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.UpdateMongoDBAtlasRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateMongoDBAtlasRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateMongoDBAtlasRotatingSecret_Call {
	return &MockClientService_UpdateMongoDBAtlasRotatingSecret_Call{Call: _e.mock.On("UpdateMongoDBAtlasRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateMongoDBAtlasRotatingSecret_Call) Run(run func(params *secret_service.UpdateMongoDBAtlasRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateMongoDBAtlasRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateMongoDBAtlasRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateMongoDBAtlasRotatingSecret_Call) Return(_a0 *secret_service.UpdateMongoDBAtlasRotatingSecretOK, _a1 error) *MockClientService_UpdateMongoDBAtlasRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateMongoDBAtlasRotatingSecret_Call) RunAndReturn(run func(*secret_service.UpdateMongoDBAtlasRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateMongoDBAtlasRotatingSecretOK, error)) *MockClientService_UpdateMongoDBAtlasRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwilioIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateTwilioIntegration(params *secret_service.UpdateTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateTwilioIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwilioIntegration")
	}

	var r0 *secret_service.UpdateTwilioIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateTwilioIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateTwilioIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateTwilioIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateTwilioIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwilioIntegration'
type MockClientService_UpdateTwilioIntegration_Call struct {
	*mock.Call
}

// UpdateTwilioIntegration is a helper method to define mock.On call
//   - params *secret_service.UpdateTwilioIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateTwilioIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateTwilioIntegration_Call {
	return &MockClientService_UpdateTwilioIntegration_Call{Call: _e.mock.On("UpdateTwilioIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateTwilioIntegration_Call) Run(run func(params *secret_service.UpdateTwilioIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateTwilioIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateTwilioIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateTwilioIntegration_Call) Return(_a0 *secret_service.UpdateTwilioIntegrationOK, _a1 error) *MockClientService_UpdateTwilioIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateTwilioIntegration_Call) RunAndReturn(run func(*secret_service.UpdateTwilioIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateTwilioIntegrationOK, error)) *MockClientService_UpdateTwilioIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTwilioRotatingSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateTwilioRotatingSecret(params *secret_service.UpdateTwilioRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateTwilioRotatingSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTwilioRotatingSecret")
	}

	var r0 *secret_service.UpdateTwilioRotatingSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateTwilioRotatingSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateTwilioRotatingSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateTwilioRotatingSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateTwilioRotatingSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTwilioRotatingSecret'
type MockClientService_UpdateTwilioRotatingSecret_Call struct {
	*mock.Call
}

// UpdateTwilioRotatingSecret is a helper method to define mock.On call
//   - params *secret_service.UpdateTwilioRotatingSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateTwilioRotatingSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateTwilioRotatingSecret_Call {
	return &MockClientService_UpdateTwilioRotatingSecret_Call{Call: _e.mock.On("UpdateTwilioRotatingSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateTwilioRotatingSecret_Call) Run(run func(params *secret_service.UpdateTwilioRotatingSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateTwilioRotatingSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateTwilioRotatingSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateTwilioRotatingSecret_Call) Return(_a0 *secret_service.UpdateTwilioRotatingSecretOK, _a1 error) *MockClientService_UpdateTwilioRotatingSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateTwilioRotatingSecret_Call) RunAndReturn(run func(*secret_service.UpdateTwilioRotatingSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateTwilioRotatingSecretOK, error)) *MockClientService_UpdateTwilioRotatingSecret_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
