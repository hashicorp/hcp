// Code generated by mockery. DO NOT EDIT.

package mock_statement_service

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	statement_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-billing/preview/2020-11-05/client/statement_service"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// StatementServiceGetRunningStatement provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) StatementServiceGetRunningStatement(params *statement_service.StatementServiceGetRunningStatementParams, authInfo runtime.ClientAuthInfoWriter, opts ...statement_service.ClientOption) (*statement_service.StatementServiceGetRunningStatementOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StatementServiceGetRunningStatement")
	}

	var r0 *statement_service.StatementServiceGetRunningStatementOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*statement_service.StatementServiceGetRunningStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) (*statement_service.StatementServiceGetRunningStatementOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*statement_service.StatementServiceGetRunningStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) *statement_service.StatementServiceGetRunningStatementOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statement_service.StatementServiceGetRunningStatementOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*statement_service.StatementServiceGetRunningStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_StatementServiceGetRunningStatement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatementServiceGetRunningStatement'
type MockClientService_StatementServiceGetRunningStatement_Call struct {
	*mock.Call
}

// StatementServiceGetRunningStatement is a helper method to define mock.On call
//   - params *statement_service.StatementServiceGetRunningStatementParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...statement_service.ClientOption
func (_e *MockClientService_Expecter) StatementServiceGetRunningStatement(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_StatementServiceGetRunningStatement_Call {
	return &MockClientService_StatementServiceGetRunningStatement_Call{Call: _e.mock.On("StatementServiceGetRunningStatement",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_StatementServiceGetRunningStatement_Call) Run(run func(params *statement_service.StatementServiceGetRunningStatementParams, authInfo runtime.ClientAuthInfoWriter, opts ...statement_service.ClientOption)) *MockClientService_StatementServiceGetRunningStatement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]statement_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(statement_service.ClientOption)
			}
		}
		run(args[0].(*statement_service.StatementServiceGetRunningStatementParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_StatementServiceGetRunningStatement_Call) Return(_a0 *statement_service.StatementServiceGetRunningStatementOK, _a1 error) *MockClientService_StatementServiceGetRunningStatement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_StatementServiceGetRunningStatement_Call) RunAndReturn(run func(*statement_service.StatementServiceGetRunningStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) (*statement_service.StatementServiceGetRunningStatementOK, error)) *MockClientService_StatementServiceGetRunningStatement_Call {
	_c.Call.Return(run)
	return _c
}

// StatementServiceGetStatement provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) StatementServiceGetStatement(params *statement_service.StatementServiceGetStatementParams, authInfo runtime.ClientAuthInfoWriter, opts ...statement_service.ClientOption) (*statement_service.StatementServiceGetStatementOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StatementServiceGetStatement")
	}

	var r0 *statement_service.StatementServiceGetStatementOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*statement_service.StatementServiceGetStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) (*statement_service.StatementServiceGetStatementOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*statement_service.StatementServiceGetStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) *statement_service.StatementServiceGetStatementOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statement_service.StatementServiceGetStatementOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*statement_service.StatementServiceGetStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_StatementServiceGetStatement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatementServiceGetStatement'
type MockClientService_StatementServiceGetStatement_Call struct {
	*mock.Call
}

// StatementServiceGetStatement is a helper method to define mock.On call
//   - params *statement_service.StatementServiceGetStatementParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...statement_service.ClientOption
func (_e *MockClientService_Expecter) StatementServiceGetStatement(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_StatementServiceGetStatement_Call {
	return &MockClientService_StatementServiceGetStatement_Call{Call: _e.mock.On("StatementServiceGetStatement",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_StatementServiceGetStatement_Call) Run(run func(params *statement_service.StatementServiceGetStatementParams, authInfo runtime.ClientAuthInfoWriter, opts ...statement_service.ClientOption)) *MockClientService_StatementServiceGetStatement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]statement_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(statement_service.ClientOption)
			}
		}
		run(args[0].(*statement_service.StatementServiceGetStatementParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_StatementServiceGetStatement_Call) Return(_a0 *statement_service.StatementServiceGetStatementOK, _a1 error) *MockClientService_StatementServiceGetStatement_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_StatementServiceGetStatement_Call) RunAndReturn(run func(*statement_service.StatementServiceGetStatementParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) (*statement_service.StatementServiceGetStatementOK, error)) *MockClientService_StatementServiceGetStatement_Call {
	_c.Call.Return(run)
	return _c
}

// StatementServiceListStatements provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) StatementServiceListStatements(params *statement_service.StatementServiceListStatementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...statement_service.ClientOption) (*statement_service.StatementServiceListStatementsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StatementServiceListStatements")
	}

	var r0 *statement_service.StatementServiceListStatementsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*statement_service.StatementServiceListStatementsParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) (*statement_service.StatementServiceListStatementsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*statement_service.StatementServiceListStatementsParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) *statement_service.StatementServiceListStatementsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*statement_service.StatementServiceListStatementsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*statement_service.StatementServiceListStatementsParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_StatementServiceListStatements_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatementServiceListStatements'
type MockClientService_StatementServiceListStatements_Call struct {
	*mock.Call
}

// StatementServiceListStatements is a helper method to define mock.On call
//   - params *statement_service.StatementServiceListStatementsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...statement_service.ClientOption
func (_e *MockClientService_Expecter) StatementServiceListStatements(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_StatementServiceListStatements_Call {
	return &MockClientService_StatementServiceListStatements_Call{Call: _e.mock.On("StatementServiceListStatements",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_StatementServiceListStatements_Call) Run(run func(params *statement_service.StatementServiceListStatementsParams, authInfo runtime.ClientAuthInfoWriter, opts ...statement_service.ClientOption)) *MockClientService_StatementServiceListStatements_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]statement_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(statement_service.ClientOption)
			}
		}
		run(args[0].(*statement_service.StatementServiceListStatementsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_StatementServiceListStatements_Call) Return(_a0 *statement_service.StatementServiceListStatementsOK, _a1 error) *MockClientService_StatementServiceListStatements_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_StatementServiceListStatements_Call) RunAndReturn(run func(*statement_service.StatementServiceListStatementsParams, runtime.ClientAuthInfoWriter, ...statement_service.ClientOption) (*statement_service.StatementServiceListStatementsOK, error)) *MockClientService_StatementServiceListStatements_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
