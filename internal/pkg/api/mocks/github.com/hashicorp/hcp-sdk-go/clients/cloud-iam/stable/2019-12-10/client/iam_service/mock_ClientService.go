// Code generated by mockery. DO NOT EDIT.

package mock_iam_service

import (
	iam_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-iam/stable/2019-12-10/client/iam_service"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// IamServiceBatchGetPrincipals provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceBatchGetPrincipals(params *iam_service.IamServiceBatchGetPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceBatchGetPrincipalsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceBatchGetPrincipals")
	}

	var r0 *iam_service.IamServiceBatchGetPrincipalsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceBatchGetPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceBatchGetPrincipalsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceBatchGetPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceBatchGetPrincipalsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceBatchGetPrincipalsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceBatchGetPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceBatchGetPrincipals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceBatchGetPrincipals'
type MockClientService_IamServiceBatchGetPrincipals_Call struct {
	*mock.Call
}

// IamServiceBatchGetPrincipals is a helper method to define mock.On call
//   - params *iam_service.IamServiceBatchGetPrincipalsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceBatchGetPrincipals(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceBatchGetPrincipals_Call {
	return &MockClientService_IamServiceBatchGetPrincipals_Call{Call: _e.mock.On("IamServiceBatchGetPrincipals",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceBatchGetPrincipals_Call) Run(run func(params *iam_service.IamServiceBatchGetPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceBatchGetPrincipals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceBatchGetPrincipalsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceBatchGetPrincipals_Call) Return(_a0 *iam_service.IamServiceBatchGetPrincipalsOK, _a1 error) *MockClientService_IamServiceBatchGetPrincipals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceBatchGetPrincipals_Call) RunAndReturn(run func(*iam_service.IamServiceBatchGetPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceBatchGetPrincipalsOK, error)) *MockClientService_IamServiceBatchGetPrincipals_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceCreateUserPrincipal provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceCreateUserPrincipal(params *iam_service.IamServiceCreateUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceCreateUserPrincipalOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceCreateUserPrincipal")
	}

	var r0 *iam_service.IamServiceCreateUserPrincipalOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceCreateUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceCreateUserPrincipalOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceCreateUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceCreateUserPrincipalOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceCreateUserPrincipalOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceCreateUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceCreateUserPrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceCreateUserPrincipal'
type MockClientService_IamServiceCreateUserPrincipal_Call struct {
	*mock.Call
}

// IamServiceCreateUserPrincipal is a helper method to define mock.On call
//   - params *iam_service.IamServiceCreateUserPrincipalParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceCreateUserPrincipal(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceCreateUserPrincipal_Call {
	return &MockClientService_IamServiceCreateUserPrincipal_Call{Call: _e.mock.On("IamServiceCreateUserPrincipal",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceCreateUserPrincipal_Call) Run(run func(params *iam_service.IamServiceCreateUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceCreateUserPrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceCreateUserPrincipalParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceCreateUserPrincipal_Call) Return(_a0 *iam_service.IamServiceCreateUserPrincipalOK, _a1 error) *MockClientService_IamServiceCreateUserPrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceCreateUserPrincipal_Call) RunAndReturn(run func(*iam_service.IamServiceCreateUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceCreateUserPrincipalOK, error)) *MockClientService_IamServiceCreateUserPrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceDeleteOrganizationMembership provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceDeleteOrganizationMembership(params *iam_service.IamServiceDeleteOrganizationMembershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceDeleteOrganizationMembershipOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceDeleteOrganizationMembership")
	}

	var r0 *iam_service.IamServiceDeleteOrganizationMembershipOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceDeleteOrganizationMembershipParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceDeleteOrganizationMembershipOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceDeleteOrganizationMembershipParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceDeleteOrganizationMembershipOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceDeleteOrganizationMembershipOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceDeleteOrganizationMembershipParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceDeleteOrganizationMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceDeleteOrganizationMembership'
type MockClientService_IamServiceDeleteOrganizationMembership_Call struct {
	*mock.Call
}

// IamServiceDeleteOrganizationMembership is a helper method to define mock.On call
//   - params *iam_service.IamServiceDeleteOrganizationMembershipParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceDeleteOrganizationMembership(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceDeleteOrganizationMembership_Call {
	return &MockClientService_IamServiceDeleteOrganizationMembership_Call{Call: _e.mock.On("IamServiceDeleteOrganizationMembership",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceDeleteOrganizationMembership_Call) Run(run func(params *iam_service.IamServiceDeleteOrganizationMembershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceDeleteOrganizationMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceDeleteOrganizationMembershipParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceDeleteOrganizationMembership_Call) Return(_a0 *iam_service.IamServiceDeleteOrganizationMembershipOK, _a1 error) *MockClientService_IamServiceDeleteOrganizationMembership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceDeleteOrganizationMembership_Call) RunAndReturn(run func(*iam_service.IamServiceDeleteOrganizationMembershipParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceDeleteOrganizationMembershipOK, error)) *MockClientService_IamServiceDeleteOrganizationMembership_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceGetCallerIdentity provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceGetCallerIdentity(params *iam_service.IamServiceGetCallerIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceGetCallerIdentityOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceGetCallerIdentity")
	}

	var r0 *iam_service.IamServiceGetCallerIdentityOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetCallerIdentityParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetCallerIdentityOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetCallerIdentityParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceGetCallerIdentityOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceGetCallerIdentityOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceGetCallerIdentityParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceGetCallerIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceGetCallerIdentity'
type MockClientService_IamServiceGetCallerIdentity_Call struct {
	*mock.Call
}

// IamServiceGetCallerIdentity is a helper method to define mock.On call
//   - params *iam_service.IamServiceGetCallerIdentityParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceGetCallerIdentity(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceGetCallerIdentity_Call {
	return &MockClientService_IamServiceGetCallerIdentity_Call{Call: _e.mock.On("IamServiceGetCallerIdentity",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceGetCallerIdentity_Call) Run(run func(params *iam_service.IamServiceGetCallerIdentityParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceGetCallerIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceGetCallerIdentityParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceGetCallerIdentity_Call) Return(_a0 *iam_service.IamServiceGetCallerIdentityOK, _a1 error) *MockClientService_IamServiceGetCallerIdentity_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceGetCallerIdentity_Call) RunAndReturn(run func(*iam_service.IamServiceGetCallerIdentityParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetCallerIdentityOK, error)) *MockClientService_IamServiceGetCallerIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceGetCurrentUserPrincipal provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceGetCurrentUserPrincipal(params *iam_service.IamServiceGetCurrentUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceGetCurrentUserPrincipalOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceGetCurrentUserPrincipal")
	}

	var r0 *iam_service.IamServiceGetCurrentUserPrincipalOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetCurrentUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetCurrentUserPrincipalOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetCurrentUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceGetCurrentUserPrincipalOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceGetCurrentUserPrincipalOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceGetCurrentUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceGetCurrentUserPrincipal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceGetCurrentUserPrincipal'
type MockClientService_IamServiceGetCurrentUserPrincipal_Call struct {
	*mock.Call
}

// IamServiceGetCurrentUserPrincipal is a helper method to define mock.On call
//   - params *iam_service.IamServiceGetCurrentUserPrincipalParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceGetCurrentUserPrincipal(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceGetCurrentUserPrincipal_Call {
	return &MockClientService_IamServiceGetCurrentUserPrincipal_Call{Call: _e.mock.On("IamServiceGetCurrentUserPrincipal",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceGetCurrentUserPrincipal_Call) Run(run func(params *iam_service.IamServiceGetCurrentUserPrincipalParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceGetCurrentUserPrincipal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceGetCurrentUserPrincipalParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceGetCurrentUserPrincipal_Call) Return(_a0 *iam_service.IamServiceGetCurrentUserPrincipalOK, _a1 error) *MockClientService_IamServiceGetCurrentUserPrincipal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceGetCurrentUserPrincipal_Call) RunAndReturn(run func(*iam_service.IamServiceGetCurrentUserPrincipalParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetCurrentUserPrincipalOK, error)) *MockClientService_IamServiceGetCurrentUserPrincipal_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceGetOrganizationAuthMetadata provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceGetOrganizationAuthMetadata(params *iam_service.IamServiceGetOrganizationAuthMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceGetOrganizationAuthMetadataOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceGetOrganizationAuthMetadata")
	}

	var r0 *iam_service.IamServiceGetOrganizationAuthMetadataOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetOrganizationAuthMetadataParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetOrganizationAuthMetadataOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetOrganizationAuthMetadataParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceGetOrganizationAuthMetadataOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceGetOrganizationAuthMetadataOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceGetOrganizationAuthMetadataParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceGetOrganizationAuthMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceGetOrganizationAuthMetadata'
type MockClientService_IamServiceGetOrganizationAuthMetadata_Call struct {
	*mock.Call
}

// IamServiceGetOrganizationAuthMetadata is a helper method to define mock.On call
//   - params *iam_service.IamServiceGetOrganizationAuthMetadataParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceGetOrganizationAuthMetadata(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceGetOrganizationAuthMetadata_Call {
	return &MockClientService_IamServiceGetOrganizationAuthMetadata_Call{Call: _e.mock.On("IamServiceGetOrganizationAuthMetadata",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceGetOrganizationAuthMetadata_Call) Run(run func(params *iam_service.IamServiceGetOrganizationAuthMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceGetOrganizationAuthMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceGetOrganizationAuthMetadataParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceGetOrganizationAuthMetadata_Call) Return(_a0 *iam_service.IamServiceGetOrganizationAuthMetadataOK, _a1 error) *MockClientService_IamServiceGetOrganizationAuthMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceGetOrganizationAuthMetadata_Call) RunAndReturn(run func(*iam_service.IamServiceGetOrganizationAuthMetadataParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetOrganizationAuthMetadataOK, error)) *MockClientService_IamServiceGetOrganizationAuthMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceGetUserPrincipalByIDInOrganization provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceGetUserPrincipalByIDInOrganization(params *iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceGetUserPrincipalByIDInOrganizationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceGetUserPrincipalByIDInOrganization")
	}

	var r0 *iam_service.IamServiceGetUserPrincipalByIDInOrganizationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetUserPrincipalByIDInOrganizationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceGetUserPrincipalByIDInOrganizationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceGetUserPrincipalByIDInOrganizationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceGetUserPrincipalByIDInOrganization'
type MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call struct {
	*mock.Call
}

// IamServiceGetUserPrincipalByIDInOrganization is a helper method to define mock.On call
//   - params *iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceGetUserPrincipalByIDInOrganization(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call {
	return &MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call{Call: _e.mock.On("IamServiceGetUserPrincipalByIDInOrganization",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call) Run(run func(params *iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call) Return(_a0 *iam_service.IamServiceGetUserPrincipalByIDInOrganizationOK, _a1 error) *MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call) RunAndReturn(run func(*iam_service.IamServiceGetUserPrincipalByIDInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetUserPrincipalByIDInOrganizationOK, error)) *MockClientService_IamServiceGetUserPrincipalByIDInOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceGetUserPrincipalsByIDsInOrganization provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceGetUserPrincipalsByIDsInOrganization(params *iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceGetUserPrincipalsByIDsInOrganization")
	}

	var r0 *iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceGetUserPrincipalsByIDsInOrganization'
type MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call struct {
	*mock.Call
}

// IamServiceGetUserPrincipalsByIDsInOrganization is a helper method to define mock.On call
//   - params *iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceGetUserPrincipalsByIDsInOrganization(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call {
	return &MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call{Call: _e.mock.On("IamServiceGetUserPrincipalsByIDsInOrganization",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call) Run(run func(params *iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call) Return(_a0 *iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationOK, _a1 error) *MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call) RunAndReturn(run func(*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceGetUserPrincipalsByIDsInOrganizationOK, error)) *MockClientService_IamServiceGetUserPrincipalsByIDsInOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceListUserPrincipalsByOrganization provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceListUserPrincipalsByOrganization(params *iam_service.IamServiceListUserPrincipalsByOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceListUserPrincipalsByOrganizationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceListUserPrincipalsByOrganization")
	}

	var r0 *iam_service.IamServiceListUserPrincipalsByOrganizationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceListUserPrincipalsByOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceListUserPrincipalsByOrganizationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceListUserPrincipalsByOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceListUserPrincipalsByOrganizationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceListUserPrincipalsByOrganizationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceListUserPrincipalsByOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceListUserPrincipalsByOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceListUserPrincipalsByOrganization'
type MockClientService_IamServiceListUserPrincipalsByOrganization_Call struct {
	*mock.Call
}

// IamServiceListUserPrincipalsByOrganization is a helper method to define mock.On call
//   - params *iam_service.IamServiceListUserPrincipalsByOrganizationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceListUserPrincipalsByOrganization(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceListUserPrincipalsByOrganization_Call {
	return &MockClientService_IamServiceListUserPrincipalsByOrganization_Call{Call: _e.mock.On("IamServiceListUserPrincipalsByOrganization",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceListUserPrincipalsByOrganization_Call) Run(run func(params *iam_service.IamServiceListUserPrincipalsByOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceListUserPrincipalsByOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceListUserPrincipalsByOrganizationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceListUserPrincipalsByOrganization_Call) Return(_a0 *iam_service.IamServiceListUserPrincipalsByOrganizationOK, _a1 error) *MockClientService_IamServiceListUserPrincipalsByOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceListUserPrincipalsByOrganization_Call) RunAndReturn(run func(*iam_service.IamServiceListUserPrincipalsByOrganizationParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceListUserPrincipalsByOrganizationOK, error)) *MockClientService_IamServiceListUserPrincipalsByOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// IamServicePing provides a mock function with given fields: params, opts
func (_m *MockClientService) IamServicePing(params *iam_service.IamServicePingParams, opts ...iam_service.ClientOption) (*iam_service.IamServicePingOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServicePing")
	}

	var r0 *iam_service.IamServicePingOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServicePingParams, ...iam_service.ClientOption) (*iam_service.IamServicePingOK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServicePingParams, ...iam_service.ClientOption) *iam_service.IamServicePingOK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServicePingOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServicePingParams, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServicePing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServicePing'
type MockClientService_IamServicePing_Call struct {
	*mock.Call
}

// IamServicePing is a helper method to define mock.On call
//   - params *iam_service.IamServicePingParams
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServicePing(params interface{}, opts ...interface{}) *MockClientService_IamServicePing_Call {
	return &MockClientService_IamServicePing_Call{Call: _e.mock.On("IamServicePing",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_IamServicePing_Call) Run(run func(params *iam_service.IamServicePingParams, opts ...iam_service.ClientOption)) *MockClientService_IamServicePing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServicePingParams), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServicePing_Call) Return(_a0 *iam_service.IamServicePingOK, _a1 error) *MockClientService_IamServicePing_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServicePing_Call) RunAndReturn(run func(*iam_service.IamServicePingParams, ...iam_service.ClientOption) (*iam_service.IamServicePingOK, error)) *MockClientService_IamServicePing_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceSearchPrincipals provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceSearchPrincipals(params *iam_service.IamServiceSearchPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceSearchPrincipalsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceSearchPrincipals")
	}

	var r0 *iam_service.IamServiceSearchPrincipalsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceSearchPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceSearchPrincipalsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceSearchPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceSearchPrincipalsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceSearchPrincipalsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceSearchPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceSearchPrincipals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceSearchPrincipals'
type MockClientService_IamServiceSearchPrincipals_Call struct {
	*mock.Call
}

// IamServiceSearchPrincipals is a helper method to define mock.On call
//   - params *iam_service.IamServiceSearchPrincipalsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceSearchPrincipals(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceSearchPrincipals_Call {
	return &MockClientService_IamServiceSearchPrincipals_Call{Call: _e.mock.On("IamServiceSearchPrincipals",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceSearchPrincipals_Call) Run(run func(params *iam_service.IamServiceSearchPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceSearchPrincipals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceSearchPrincipalsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceSearchPrincipals_Call) Return(_a0 *iam_service.IamServiceSearchPrincipalsOK, _a1 error) *MockClientService_IamServiceSearchPrincipals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceSearchPrincipals_Call) RunAndReturn(run func(*iam_service.IamServiceSearchPrincipalsParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceSearchPrincipalsOK, error)) *MockClientService_IamServiceSearchPrincipals_Call {
	_c.Call.Return(run)
	return _c
}

// IamServiceUpdateWebConsolePreferences provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) IamServiceUpdateWebConsolePreferences(params *iam_service.IamServiceUpdateWebConsolePreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption) (*iam_service.IamServiceUpdateWebConsolePreferencesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IamServiceUpdateWebConsolePreferences")
	}

	var r0 *iam_service.IamServiceUpdateWebConsolePreferencesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceUpdateWebConsolePreferencesParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceUpdateWebConsolePreferencesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*iam_service.IamServiceUpdateWebConsolePreferencesParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) *iam_service.IamServiceUpdateWebConsolePreferencesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iam_service.IamServiceUpdateWebConsolePreferencesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*iam_service.IamServiceUpdateWebConsolePreferencesParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_IamServiceUpdateWebConsolePreferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IamServiceUpdateWebConsolePreferences'
type MockClientService_IamServiceUpdateWebConsolePreferences_Call struct {
	*mock.Call
}

// IamServiceUpdateWebConsolePreferences is a helper method to define mock.On call
//   - params *iam_service.IamServiceUpdateWebConsolePreferencesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...iam_service.ClientOption
func (_e *MockClientService_Expecter) IamServiceUpdateWebConsolePreferences(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_IamServiceUpdateWebConsolePreferences_Call {
	return &MockClientService_IamServiceUpdateWebConsolePreferences_Call{Call: _e.mock.On("IamServiceUpdateWebConsolePreferences",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_IamServiceUpdateWebConsolePreferences_Call) Run(run func(params *iam_service.IamServiceUpdateWebConsolePreferencesParams, authInfo runtime.ClientAuthInfoWriter, opts ...iam_service.ClientOption)) *MockClientService_IamServiceUpdateWebConsolePreferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]iam_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(iam_service.ClientOption)
			}
		}
		run(args[0].(*iam_service.IamServiceUpdateWebConsolePreferencesParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_IamServiceUpdateWebConsolePreferences_Call) Return(_a0 *iam_service.IamServiceUpdateWebConsolePreferencesOK, _a1 error) *MockClientService_IamServiceUpdateWebConsolePreferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_IamServiceUpdateWebConsolePreferences_Call) RunAndReturn(run func(*iam_service.IamServiceUpdateWebConsolePreferencesParams, runtime.ClientAuthInfoWriter, ...iam_service.ClientOption) (*iam_service.IamServiceUpdateWebConsolePreferencesOK, error)) *MockClientService_IamServiceUpdateWebConsolePreferences_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
