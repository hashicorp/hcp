// Code generated by mockery. DO NOT EDIT.

package mock_waypoint_service

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	waypoint_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-waypoint-service/preview/2024-11-22/client/waypoint_service"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// WaypointServiceCheckNamespaceActivation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCheckNamespaceActivation(params *waypoint_service.WaypointServiceCheckNamespaceActivationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCheckNamespaceActivationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCheckNamespaceActivation")
	}

	var r0 *waypoint_service.WaypointServiceCheckNamespaceActivationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCheckNamespaceActivationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCheckNamespaceActivationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCheckNamespaceActivationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCheckNamespaceActivationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCheckNamespaceActivationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCheckNamespaceActivationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCheckNamespaceActivation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCheckNamespaceActivation'
type MockClientService_WaypointServiceCheckNamespaceActivation_Call struct {
	*mock.Call
}

// WaypointServiceCheckNamespaceActivation is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCheckNamespaceActivationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCheckNamespaceActivation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCheckNamespaceActivation_Call {
	return &MockClientService_WaypointServiceCheckNamespaceActivation_Call{Call: _e.mock.On("WaypointServiceCheckNamespaceActivation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCheckNamespaceActivation_Call) Run(run func(params *waypoint_service.WaypointServiceCheckNamespaceActivationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCheckNamespaceActivation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCheckNamespaceActivationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCheckNamespaceActivation_Call) Return(_a0 *waypoint_service.WaypointServiceCheckNamespaceActivationOK, _a1 error) *MockClientService_WaypointServiceCheckNamespaceActivation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCheckNamespaceActivation_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCheckNamespaceActivationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCheckNamespaceActivationOK, error)) *MockClientService_WaypointServiceCheckNamespaceActivation_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCheckTFCOrganization provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCheckTFCOrganization(params *waypoint_service.WaypointServiceCheckTFCOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCheckTFCOrganizationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCheckTFCOrganization")
	}

	var r0 *waypoint_service.WaypointServiceCheckTFCOrganizationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCheckTFCOrganizationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCheckTFCOrganizationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCheckTFCOrganizationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCheckTFCOrganizationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCheckTFCOrganizationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCheckTFCOrganizationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCheckTFCOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCheckTFCOrganization'
type MockClientService_WaypointServiceCheckTFCOrganization_Call struct {
	*mock.Call
}

// WaypointServiceCheckTFCOrganization is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCheckTFCOrganizationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCheckTFCOrganization(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCheckTFCOrganization_Call {
	return &MockClientService_WaypointServiceCheckTFCOrganization_Call{Call: _e.mock.On("WaypointServiceCheckTFCOrganization",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCheckTFCOrganization_Call) Run(run func(params *waypoint_service.WaypointServiceCheckTFCOrganizationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCheckTFCOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCheckTFCOrganizationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCheckTFCOrganization_Call) Return(_a0 *waypoint_service.WaypointServiceCheckTFCOrganizationOK, _a1 error) *MockClientService_WaypointServiceCheckTFCOrganization_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCheckTFCOrganization_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCheckTFCOrganizationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCheckTFCOrganizationOK, error)) *MockClientService_WaypointServiceCheckTFCOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateActionConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateActionConfig(params *waypoint_service.WaypointServiceCreateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateActionConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateActionConfig")
	}

	var r0 *waypoint_service.WaypointServiceCreateActionConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateActionConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateActionConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateActionConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateActionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateActionConfig'
type MockClientService_WaypointServiceCreateActionConfig_Call struct {
	*mock.Call
}

// WaypointServiceCreateActionConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateActionConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateActionConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateActionConfig_Call {
	return &MockClientService_WaypointServiceCreateActionConfig_Call{Call: _e.mock.On("WaypointServiceCreateActionConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateActionConfig_Call) Run(run func(params *waypoint_service.WaypointServiceCreateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateActionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateActionConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateActionConfig_Call) Return(_a0 *waypoint_service.WaypointServiceCreateActionConfigOK, _a1 error) *MockClientService_WaypointServiceCreateActionConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateActionConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateActionConfigOK, error)) *MockClientService_WaypointServiceCreateActionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateAddOn provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateAddOn(params *waypoint_service.WaypointServiceCreateAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAddOnOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateAddOn")
	}

	var r0 *waypoint_service.WaypointServiceCreateAddOnOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAddOnOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateAddOnOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateAddOnOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateAddOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateAddOn'
type MockClientService_WaypointServiceCreateAddOn_Call struct {
	*mock.Call
}

// WaypointServiceCreateAddOn is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateAddOnParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateAddOn(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateAddOn_Call {
	return &MockClientService_WaypointServiceCreateAddOn_Call{Call: _e.mock.On("WaypointServiceCreateAddOn",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateAddOn_Call) Run(run func(params *waypoint_service.WaypointServiceCreateAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateAddOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateAddOnParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateAddOn_Call) Return(_a0 *waypoint_service.WaypointServiceCreateAddOnOK, _a1 error) *MockClientService_WaypointServiceCreateAddOn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateAddOn_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAddOnOK, error)) *MockClientService_WaypointServiceCreateAddOn_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateAddOnDefinition provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateAddOnDefinition(params *waypoint_service.WaypointServiceCreateAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAddOnDefinitionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateAddOnDefinition")
	}

	var r0 *waypoint_service.WaypointServiceCreateAddOnDefinitionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAddOnDefinitionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateAddOnDefinitionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateAddOnDefinitionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateAddOnDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateAddOnDefinition'
type MockClientService_WaypointServiceCreateAddOnDefinition_Call struct {
	*mock.Call
}

// WaypointServiceCreateAddOnDefinition is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateAddOnDefinitionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateAddOnDefinition(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateAddOnDefinition_Call {
	return &MockClientService_WaypointServiceCreateAddOnDefinition_Call{Call: _e.mock.On("WaypointServiceCreateAddOnDefinition",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateAddOnDefinition_Call) Run(run func(params *waypoint_service.WaypointServiceCreateAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateAddOnDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateAddOnDefinitionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateAddOnDefinition_Call) Return(_a0 *waypoint_service.WaypointServiceCreateAddOnDefinitionOK, _a1 error) *MockClientService_WaypointServiceCreateAddOnDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateAddOnDefinition_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAddOnDefinitionOK, error)) *MockClientService_WaypointServiceCreateAddOnDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateAgentGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateAgentGroup(params *waypoint_service.WaypointServiceCreateAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAgentGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateAgentGroup")
	}

	var r0 *waypoint_service.WaypointServiceCreateAgentGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAgentGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateAgentGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateAgentGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateAgentGroup'
type MockClientService_WaypointServiceCreateAgentGroup_Call struct {
	*mock.Call
}

// WaypointServiceCreateAgentGroup is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateAgentGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateAgentGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateAgentGroup_Call {
	return &MockClientService_WaypointServiceCreateAgentGroup_Call{Call: _e.mock.On("WaypointServiceCreateAgentGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateAgentGroup_Call) Run(run func(params *waypoint_service.WaypointServiceCreateAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateAgentGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateAgentGroup_Call) Return(_a0 *waypoint_service.WaypointServiceCreateAgentGroupOK, _a1 error) *MockClientService_WaypointServiceCreateAgentGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateAgentGroup_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateAgentGroupOK, error)) *MockClientService_WaypointServiceCreateAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateApplicationFromTemplate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateApplicationFromTemplate(params *waypoint_service.WaypointServiceCreateApplicationFromTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationFromTemplateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateApplicationFromTemplate")
	}

	var r0 *waypoint_service.WaypointServiceCreateApplicationFromTemplateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateApplicationFromTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationFromTemplateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateApplicationFromTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateApplicationFromTemplateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateApplicationFromTemplateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateApplicationFromTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateApplicationFromTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateApplicationFromTemplate'
type MockClientService_WaypointServiceCreateApplicationFromTemplate_Call struct {
	*mock.Call
}

// WaypointServiceCreateApplicationFromTemplate is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateApplicationFromTemplateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateApplicationFromTemplate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateApplicationFromTemplate_Call {
	return &MockClientService_WaypointServiceCreateApplicationFromTemplate_Call{Call: _e.mock.On("WaypointServiceCreateApplicationFromTemplate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateApplicationFromTemplate_Call) Run(run func(params *waypoint_service.WaypointServiceCreateApplicationFromTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateApplicationFromTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateApplicationFromTemplateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateApplicationFromTemplate_Call) Return(_a0 *waypoint_service.WaypointServiceCreateApplicationFromTemplateOK, _a1 error) *MockClientService_WaypointServiceCreateApplicationFromTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateApplicationFromTemplate_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateApplicationFromTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationFromTemplateOK, error)) *MockClientService_WaypointServiceCreateApplicationFromTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateApplicationTemplate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateApplicationTemplate(params *waypoint_service.WaypointServiceCreateApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationTemplateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateApplicationTemplate")
	}

	var r0 *waypoint_service.WaypointServiceCreateApplicationTemplateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationTemplateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateApplicationTemplateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateApplicationTemplateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateApplicationTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateApplicationTemplate'
type MockClientService_WaypointServiceCreateApplicationTemplate_Call struct {
	*mock.Call
}

// WaypointServiceCreateApplicationTemplate is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateApplicationTemplateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateApplicationTemplate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateApplicationTemplate_Call {
	return &MockClientService_WaypointServiceCreateApplicationTemplate_Call{Call: _e.mock.On("WaypointServiceCreateApplicationTemplate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateApplicationTemplate_Call) Run(run func(params *waypoint_service.WaypointServiceCreateApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateApplicationTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateApplicationTemplateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateApplicationTemplate_Call) Return(_a0 *waypoint_service.WaypointServiceCreateApplicationTemplateOK, _a1 error) *MockClientService_WaypointServiceCreateApplicationTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateApplicationTemplate_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationTemplateOK, error)) *MockClientService_WaypointServiceCreateApplicationTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateApplicationTemplate2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateApplicationTemplate2(params *waypoint_service.WaypointServiceCreateApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationTemplate2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateApplicationTemplate2")
	}

	var r0 *waypoint_service.WaypointServiceCreateApplicationTemplate2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationTemplate2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateApplicationTemplate2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateApplicationTemplate2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateApplicationTemplate2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateApplicationTemplate2'
type MockClientService_WaypointServiceCreateApplicationTemplate2_Call struct {
	*mock.Call
}

// WaypointServiceCreateApplicationTemplate2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateApplicationTemplate2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateApplicationTemplate2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateApplicationTemplate2_Call {
	return &MockClientService_WaypointServiceCreateApplicationTemplate2_Call{Call: _e.mock.On("WaypointServiceCreateApplicationTemplate2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateApplicationTemplate2_Call) Run(run func(params *waypoint_service.WaypointServiceCreateApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateApplicationTemplate2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateApplicationTemplate2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateApplicationTemplate2_Call) Return(_a0 *waypoint_service.WaypointServiceCreateApplicationTemplate2OK, _a1 error) *MockClientService_WaypointServiceCreateApplicationTemplate2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateApplicationTemplate2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateApplicationTemplate2OK, error)) *MockClientService_WaypointServiceCreateApplicationTemplate2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateNamespace provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateNamespace(params *waypoint_service.WaypointServiceCreateNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateNamespaceOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateNamespace")
	}

	var r0 *waypoint_service.WaypointServiceCreateNamespaceOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateNamespaceOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateNamespaceOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateNamespaceOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateNamespace'
type MockClientService_WaypointServiceCreateNamespace_Call struct {
	*mock.Call
}

// WaypointServiceCreateNamespace is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateNamespaceParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateNamespace(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateNamespace_Call {
	return &MockClientService_WaypointServiceCreateNamespace_Call{Call: _e.mock.On("WaypointServiceCreateNamespace",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateNamespace_Call) Run(run func(params *waypoint_service.WaypointServiceCreateNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateNamespaceParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateNamespace_Call) Return(_a0 *waypoint_service.WaypointServiceCreateNamespaceOK, _a1 error) *MockClientService_WaypointServiceCreateNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateNamespace_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateNamespaceOK, error)) *MockClientService_WaypointServiceCreateNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateTFCConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateTFCConfig(params *waypoint_service.WaypointServiceCreateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateTFCConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateTFCConfig")
	}

	var r0 *waypoint_service.WaypointServiceCreateTFCConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateTFCConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateTFCConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateTFCConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateTFCConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateTFCConfig'
type MockClientService_WaypointServiceCreateTFCConfig_Call struct {
	*mock.Call
}

// WaypointServiceCreateTFCConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateTFCConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateTFCConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateTFCConfig_Call {
	return &MockClientService_WaypointServiceCreateTFCConfig_Call{Call: _e.mock.On("WaypointServiceCreateTFCConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateTFCConfig_Call) Run(run func(params *waypoint_service.WaypointServiceCreateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateTFCConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateTFCConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateTFCConfig_Call) Return(_a0 *waypoint_service.WaypointServiceCreateTFCConfigOK, _a1 error) *MockClientService_WaypointServiceCreateTFCConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateTFCConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateTFCConfigOK, error)) *MockClientService_WaypointServiceCreateTFCConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceCreateVariable provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceCreateVariable(params *waypoint_service.WaypointServiceCreateVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateVariableOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceCreateVariable")
	}

	var r0 *waypoint_service.WaypointServiceCreateVariableOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateVariableOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceCreateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceCreateVariableOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceCreateVariableOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceCreateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceCreateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceCreateVariable'
type MockClientService_WaypointServiceCreateVariable_Call struct {
	*mock.Call
}

// WaypointServiceCreateVariable is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceCreateVariableParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceCreateVariable(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceCreateVariable_Call {
	return &MockClientService_WaypointServiceCreateVariable_Call{Call: _e.mock.On("WaypointServiceCreateVariable",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceCreateVariable_Call) Run(run func(params *waypoint_service.WaypointServiceCreateVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceCreateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceCreateVariableParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceCreateVariable_Call) Return(_a0 *waypoint_service.WaypointServiceCreateVariableOK, _a1 error) *MockClientService_WaypointServiceCreateVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceCreateVariable_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceCreateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceCreateVariableOK, error)) *MockClientService_WaypointServiceCreateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteActionConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteActionConfig(params *waypoint_service.WaypointServiceDeleteActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteActionConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteActionConfig")
	}

	var r0 *waypoint_service.WaypointServiceDeleteActionConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteActionConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteActionConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteActionConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteActionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteActionConfig'
type MockClientService_WaypointServiceDeleteActionConfig_Call struct {
	*mock.Call
}

// WaypointServiceDeleteActionConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteActionConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteActionConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteActionConfig_Call {
	return &MockClientService_WaypointServiceDeleteActionConfig_Call{Call: _e.mock.On("WaypointServiceDeleteActionConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteActionConfig_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteActionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteActionConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteActionConfig_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteActionConfigOK, _a1 error) *MockClientService_WaypointServiceDeleteActionConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteActionConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteActionConfigOK, error)) *MockClientService_WaypointServiceDeleteActionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteAddOnDefinition provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteAddOnDefinition(params *waypoint_service.WaypointServiceDeleteAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAddOnDefinitionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteAddOnDefinition")
	}

	var r0 *waypoint_service.WaypointServiceDeleteAddOnDefinitionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAddOnDefinitionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteAddOnDefinitionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteAddOnDefinitionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteAddOnDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteAddOnDefinition'
type MockClientService_WaypointServiceDeleteAddOnDefinition_Call struct {
	*mock.Call
}

// WaypointServiceDeleteAddOnDefinition is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteAddOnDefinitionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteAddOnDefinition(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteAddOnDefinition_Call {
	return &MockClientService_WaypointServiceDeleteAddOnDefinition_Call{Call: _e.mock.On("WaypointServiceDeleteAddOnDefinition",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteAddOnDefinition_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteAddOnDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteAddOnDefinitionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteAddOnDefinition_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteAddOnDefinitionOK, _a1 error) *MockClientService_WaypointServiceDeleteAddOnDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteAddOnDefinition_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAddOnDefinitionOK, error)) *MockClientService_WaypointServiceDeleteAddOnDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteAddOnDefinition2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteAddOnDefinition2(params *waypoint_service.WaypointServiceDeleteAddOnDefinition2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAddOnDefinition2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteAddOnDefinition2")
	}

	var r0 *waypoint_service.WaypointServiceDeleteAddOnDefinition2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAddOnDefinition2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteAddOnDefinition2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteAddOnDefinition2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteAddOnDefinition2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteAddOnDefinition2'
type MockClientService_WaypointServiceDeleteAddOnDefinition2_Call struct {
	*mock.Call
}

// WaypointServiceDeleteAddOnDefinition2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteAddOnDefinition2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteAddOnDefinition2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteAddOnDefinition2_Call {
	return &MockClientService_WaypointServiceDeleteAddOnDefinition2_Call{Call: _e.mock.On("WaypointServiceDeleteAddOnDefinition2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteAddOnDefinition2_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteAddOnDefinition2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteAddOnDefinition2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteAddOnDefinition2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteAddOnDefinition2_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteAddOnDefinition2OK, _a1 error) *MockClientService_WaypointServiceDeleteAddOnDefinition2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteAddOnDefinition2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAddOnDefinition2OK, error)) *MockClientService_WaypointServiceDeleteAddOnDefinition2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteAgentGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteAgentGroup(params *waypoint_service.WaypointServiceDeleteAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAgentGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteAgentGroup")
	}

	var r0 *waypoint_service.WaypointServiceDeleteAgentGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAgentGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteAgentGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteAgentGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteAgentGroup'
type MockClientService_WaypointServiceDeleteAgentGroup_Call struct {
	*mock.Call
}

// WaypointServiceDeleteAgentGroup is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteAgentGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteAgentGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteAgentGroup_Call {
	return &MockClientService_WaypointServiceDeleteAgentGroup_Call{Call: _e.mock.On("WaypointServiceDeleteAgentGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteAgentGroup_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteAgentGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteAgentGroup_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteAgentGroupOK, _a1 error) *MockClientService_WaypointServiceDeleteAgentGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteAgentGroup_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteAgentGroupOK, error)) *MockClientService_WaypointServiceDeleteAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteApplicationTemplate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteApplicationTemplate(params *waypoint_service.WaypointServiceDeleteApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteApplicationTemplate")
	}

	var r0 *waypoint_service.WaypointServiceDeleteApplicationTemplateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteApplicationTemplateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteApplicationTemplateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteApplicationTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteApplicationTemplate'
type MockClientService_WaypointServiceDeleteApplicationTemplate_Call struct {
	*mock.Call
}

// WaypointServiceDeleteApplicationTemplate is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteApplicationTemplateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteApplicationTemplate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteApplicationTemplate_Call {
	return &MockClientService_WaypointServiceDeleteApplicationTemplate_Call{Call: _e.mock.On("WaypointServiceDeleteApplicationTemplate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteApplicationTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteApplicationTemplateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteApplicationTemplateOK, _a1 error) *MockClientService_WaypointServiceDeleteApplicationTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplateOK, error)) *MockClientService_WaypointServiceDeleteApplicationTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteApplicationTemplate2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteApplicationTemplate2(params *waypoint_service.WaypointServiceDeleteApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteApplicationTemplate2")
	}

	var r0 *waypoint_service.WaypointServiceDeleteApplicationTemplate2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteApplicationTemplate2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteApplicationTemplate2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteApplicationTemplate2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteApplicationTemplate2'
type MockClientService_WaypointServiceDeleteApplicationTemplate2_Call struct {
	*mock.Call
}

// WaypointServiceDeleteApplicationTemplate2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteApplicationTemplate2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteApplicationTemplate2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteApplicationTemplate2_Call {
	return &MockClientService_WaypointServiceDeleteApplicationTemplate2_Call{Call: _e.mock.On("WaypointServiceDeleteApplicationTemplate2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate2_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteApplicationTemplate2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteApplicationTemplate2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate2_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteApplicationTemplate2OK, _a1 error) *MockClientService_WaypointServiceDeleteApplicationTemplate2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate2OK, error)) *MockClientService_WaypointServiceDeleteApplicationTemplate2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteApplicationTemplate3 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteApplicationTemplate3(params *waypoint_service.WaypointServiceDeleteApplicationTemplate3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate3OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteApplicationTemplate3")
	}

	var r0 *waypoint_service.WaypointServiceDeleteApplicationTemplate3OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate3OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteApplicationTemplate3OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteApplicationTemplate3OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteApplicationTemplate3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteApplicationTemplate3'
type MockClientService_WaypointServiceDeleteApplicationTemplate3_Call struct {
	*mock.Call
}

// WaypointServiceDeleteApplicationTemplate3 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteApplicationTemplate3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteApplicationTemplate3(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteApplicationTemplate3_Call {
	return &MockClientService_WaypointServiceDeleteApplicationTemplate3_Call{Call: _e.mock.On("WaypointServiceDeleteApplicationTemplate3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate3_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteApplicationTemplate3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteApplicationTemplate3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteApplicationTemplate3Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate3_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteApplicationTemplate3OK, _a1 error) *MockClientService_WaypointServiceDeleteApplicationTemplate3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate3_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate3OK, error)) *MockClientService_WaypointServiceDeleteApplicationTemplate3_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteApplicationTemplate4 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteApplicationTemplate4(params *waypoint_service.WaypointServiceDeleteApplicationTemplate4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate4OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteApplicationTemplate4")
	}

	var r0 *waypoint_service.WaypointServiceDeleteApplicationTemplate4OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate4OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteApplicationTemplate4OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteApplicationTemplate4OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteApplicationTemplate4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteApplicationTemplate4'
type MockClientService_WaypointServiceDeleteApplicationTemplate4_Call struct {
	*mock.Call
}

// WaypointServiceDeleteApplicationTemplate4 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteApplicationTemplate4Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteApplicationTemplate4(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteApplicationTemplate4_Call {
	return &MockClientService_WaypointServiceDeleteApplicationTemplate4_Call{Call: _e.mock.On("WaypointServiceDeleteApplicationTemplate4",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate4_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteApplicationTemplate4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteApplicationTemplate4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteApplicationTemplate4Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate4_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteApplicationTemplate4OK, _a1 error) *MockClientService_WaypointServiceDeleteApplicationTemplate4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteApplicationTemplate4_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteApplicationTemplate4OK, error)) *MockClientService_WaypointServiceDeleteApplicationTemplate4_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteNamespace provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteNamespace(params *waypoint_service.WaypointServiceDeleteNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteNamespaceOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteNamespace")
	}

	var r0 *waypoint_service.WaypointServiceDeleteNamespaceOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteNamespaceOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteNamespaceOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteNamespaceOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteNamespace'
type MockClientService_WaypointServiceDeleteNamespace_Call struct {
	*mock.Call
}

// WaypointServiceDeleteNamespace is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteNamespaceParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteNamespace(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteNamespace_Call {
	return &MockClientService_WaypointServiceDeleteNamespace_Call{Call: _e.mock.On("WaypointServiceDeleteNamespace",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteNamespace_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteNamespaceParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteNamespace_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteNamespaceOK, _a1 error) *MockClientService_WaypointServiceDeleteNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteNamespace_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteNamespaceOK, error)) *MockClientService_WaypointServiceDeleteNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteTFCConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteTFCConfig(params *waypoint_service.WaypointServiceDeleteTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteTFCConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteTFCConfig")
	}

	var r0 *waypoint_service.WaypointServiceDeleteTFCConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteTFCConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteTFCConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteTFCConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteTFCConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteTFCConfig'
type MockClientService_WaypointServiceDeleteTFCConfig_Call struct {
	*mock.Call
}

// WaypointServiceDeleteTFCConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteTFCConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteTFCConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteTFCConfig_Call {
	return &MockClientService_WaypointServiceDeleteTFCConfig_Call{Call: _e.mock.On("WaypointServiceDeleteTFCConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteTFCConfig_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteTFCConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteTFCConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteTFCConfig_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteTFCConfigOK, _a1 error) *MockClientService_WaypointServiceDeleteTFCConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteTFCConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteTFCConfigOK, error)) *MockClientService_WaypointServiceDeleteTFCConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDeleteVariable provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDeleteVariable(params *waypoint_service.WaypointServiceDeleteVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteVariableOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDeleteVariable")
	}

	var r0 *waypoint_service.WaypointServiceDeleteVariableOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteVariableOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDeleteVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDeleteVariableOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDeleteVariableOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDeleteVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDeleteVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDeleteVariable'
type MockClientService_WaypointServiceDeleteVariable_Call struct {
	*mock.Call
}

// WaypointServiceDeleteVariable is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDeleteVariableParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDeleteVariable(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDeleteVariable_Call {
	return &MockClientService_WaypointServiceDeleteVariable_Call{Call: _e.mock.On("WaypointServiceDeleteVariable",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDeleteVariable_Call) Run(run func(params *waypoint_service.WaypointServiceDeleteVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDeleteVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDeleteVariableParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteVariable_Call) Return(_a0 *waypoint_service.WaypointServiceDeleteVariableOK, _a1 error) *MockClientService_WaypointServiceDeleteVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDeleteVariable_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDeleteVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDeleteVariableOK, error)) *MockClientService_WaypointServiceDeleteVariable_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDestroyAddOn provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDestroyAddOn(params *waypoint_service.WaypointServiceDestroyAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyAddOnOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDestroyAddOn")
	}

	var r0 *waypoint_service.WaypointServiceDestroyAddOnOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyAddOnOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDestroyAddOnOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDestroyAddOnOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDestroyAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDestroyAddOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDestroyAddOn'
type MockClientService_WaypointServiceDestroyAddOn_Call struct {
	*mock.Call
}

// WaypointServiceDestroyAddOn is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDestroyAddOnParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDestroyAddOn(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDestroyAddOn_Call {
	return &MockClientService_WaypointServiceDestroyAddOn_Call{Call: _e.mock.On("WaypointServiceDestroyAddOn",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDestroyAddOn_Call) Run(run func(params *waypoint_service.WaypointServiceDestroyAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDestroyAddOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDestroyAddOnParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyAddOn_Call) Return(_a0 *waypoint_service.WaypointServiceDestroyAddOnOK, _a1 error) *MockClientService_WaypointServiceDestroyAddOn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyAddOn_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDestroyAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyAddOnOK, error)) *MockClientService_WaypointServiceDestroyAddOn_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDestroyAddOn2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDestroyAddOn2(params *waypoint_service.WaypointServiceDestroyAddOn2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyAddOn2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDestroyAddOn2")
	}

	var r0 *waypoint_service.WaypointServiceDestroyAddOn2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyAddOn2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDestroyAddOn2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDestroyAddOn2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDestroyAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDestroyAddOn2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDestroyAddOn2'
type MockClientService_WaypointServiceDestroyAddOn2_Call struct {
	*mock.Call
}

// WaypointServiceDestroyAddOn2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDestroyAddOn2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDestroyAddOn2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDestroyAddOn2_Call {
	return &MockClientService_WaypointServiceDestroyAddOn2_Call{Call: _e.mock.On("WaypointServiceDestroyAddOn2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDestroyAddOn2_Call) Run(run func(params *waypoint_service.WaypointServiceDestroyAddOn2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDestroyAddOn2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDestroyAddOn2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyAddOn2_Call) Return(_a0 *waypoint_service.WaypointServiceDestroyAddOn2OK, _a1 error) *MockClientService_WaypointServiceDestroyAddOn2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyAddOn2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDestroyAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyAddOn2OK, error)) *MockClientService_WaypointServiceDestroyAddOn2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDestroyApplication provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDestroyApplication(params *waypoint_service.WaypointServiceDestroyApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyApplicationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDestroyApplication")
	}

	var r0 *waypoint_service.WaypointServiceDestroyApplicationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyApplicationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDestroyApplicationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDestroyApplicationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDestroyApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDestroyApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDestroyApplication'
type MockClientService_WaypointServiceDestroyApplication_Call struct {
	*mock.Call
}

// WaypointServiceDestroyApplication is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDestroyApplicationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDestroyApplication(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDestroyApplication_Call {
	return &MockClientService_WaypointServiceDestroyApplication_Call{Call: _e.mock.On("WaypointServiceDestroyApplication",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDestroyApplication_Call) Run(run func(params *waypoint_service.WaypointServiceDestroyApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDestroyApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDestroyApplicationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyApplication_Call) Return(_a0 *waypoint_service.WaypointServiceDestroyApplicationOK, _a1 error) *MockClientService_WaypointServiceDestroyApplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyApplication_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDestroyApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyApplicationOK, error)) *MockClientService_WaypointServiceDestroyApplication_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceDestroyApplication2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceDestroyApplication2(params *waypoint_service.WaypointServiceDestroyApplication2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyApplication2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceDestroyApplication2")
	}

	var r0 *waypoint_service.WaypointServiceDestroyApplication2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyApplication2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceDestroyApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceDestroyApplication2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceDestroyApplication2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceDestroyApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceDestroyApplication2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceDestroyApplication2'
type MockClientService_WaypointServiceDestroyApplication2_Call struct {
	*mock.Call
}

// WaypointServiceDestroyApplication2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceDestroyApplication2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceDestroyApplication2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceDestroyApplication2_Call {
	return &MockClientService_WaypointServiceDestroyApplication2_Call{Call: _e.mock.On("WaypointServiceDestroyApplication2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceDestroyApplication2_Call) Run(run func(params *waypoint_service.WaypointServiceDestroyApplication2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceDestroyApplication2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceDestroyApplication2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyApplication2_Call) Return(_a0 *waypoint_service.WaypointServiceDestroyApplication2OK, _a1 error) *MockClientService_WaypointServiceDestroyApplication2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceDestroyApplication2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceDestroyApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceDestroyApplication2OK, error)) *MockClientService_WaypointServiceDestroyApplication2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceEndingAction provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceEndingAction(params *waypoint_service.WaypointServiceEndingActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceEndingActionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceEndingAction")
	}

	var r0 *waypoint_service.WaypointServiceEndingActionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceEndingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceEndingActionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceEndingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceEndingActionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceEndingActionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceEndingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceEndingAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceEndingAction'
type MockClientService_WaypointServiceEndingAction_Call struct {
	*mock.Call
}

// WaypointServiceEndingAction is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceEndingActionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceEndingAction(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceEndingAction_Call {
	return &MockClientService_WaypointServiceEndingAction_Call{Call: _e.mock.On("WaypointServiceEndingAction",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceEndingAction_Call) Run(run func(params *waypoint_service.WaypointServiceEndingActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceEndingAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceEndingActionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceEndingAction_Call) Return(_a0 *waypoint_service.WaypointServiceEndingActionOK, _a1 error) *MockClientService_WaypointServiceEndingAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceEndingAction_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceEndingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceEndingActionOK, error)) *MockClientService_WaypointServiceEndingAction_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetActionConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetActionConfig(params *waypoint_service.WaypointServiceGetActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetActionConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetActionConfig")
	}

	var r0 *waypoint_service.WaypointServiceGetActionConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetActionConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetActionConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetActionConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetActionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetActionConfig'
type MockClientService_WaypointServiceGetActionConfig_Call struct {
	*mock.Call
}

// WaypointServiceGetActionConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetActionConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetActionConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetActionConfig_Call {
	return &MockClientService_WaypointServiceGetActionConfig_Call{Call: _e.mock.On("WaypointServiceGetActionConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetActionConfig_Call) Run(run func(params *waypoint_service.WaypointServiceGetActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetActionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetActionConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetActionConfig_Call) Return(_a0 *waypoint_service.WaypointServiceGetActionConfigOK, _a1 error) *MockClientService_WaypointServiceGetActionConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetActionConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetActionConfigOK, error)) *MockClientService_WaypointServiceGetActionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetActionRun provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetActionRun(params *waypoint_service.WaypointServiceGetActionRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetActionRunOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetActionRun")
	}

	var r0 *waypoint_service.WaypointServiceGetActionRunOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetActionRunParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetActionRunOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetActionRunParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetActionRunOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetActionRunOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetActionRunParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetActionRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetActionRun'
type MockClientService_WaypointServiceGetActionRun_Call struct {
	*mock.Call
}

// WaypointServiceGetActionRun is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetActionRunParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetActionRun(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetActionRun_Call {
	return &MockClientService_WaypointServiceGetActionRun_Call{Call: _e.mock.On("WaypointServiceGetActionRun",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetActionRun_Call) Run(run func(params *waypoint_service.WaypointServiceGetActionRunParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetActionRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetActionRunParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetActionRun_Call) Return(_a0 *waypoint_service.WaypointServiceGetActionRunOK, _a1 error) *MockClientService_WaypointServiceGetActionRun_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetActionRun_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetActionRunParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetActionRunOK, error)) *MockClientService_WaypointServiceGetActionRun_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetAddOn provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetAddOn(params *waypoint_service.WaypointServiceGetAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetAddOn")
	}

	var r0 *waypoint_service.WaypointServiceGetAddOnOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetAddOnOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetAddOnOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetAddOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetAddOn'
type MockClientService_WaypointServiceGetAddOn_Call struct {
	*mock.Call
}

// WaypointServiceGetAddOn is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetAddOnParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetAddOn(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetAddOn_Call {
	return &MockClientService_WaypointServiceGetAddOn_Call{Call: _e.mock.On("WaypointServiceGetAddOn",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetAddOn_Call) Run(run func(params *waypoint_service.WaypointServiceGetAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetAddOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetAddOnParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOn_Call) Return(_a0 *waypoint_service.WaypointServiceGetAddOnOK, _a1 error) *MockClientService_WaypointServiceGetAddOn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOn_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnOK, error)) *MockClientService_WaypointServiceGetAddOn_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetAddOn2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetAddOn2(params *waypoint_service.WaypointServiceGetAddOn2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOn2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetAddOn2")
	}

	var r0 *waypoint_service.WaypointServiceGetAddOn2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOn2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetAddOn2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetAddOn2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetAddOn2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetAddOn2'
type MockClientService_WaypointServiceGetAddOn2_Call struct {
	*mock.Call
}

// WaypointServiceGetAddOn2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetAddOn2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetAddOn2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetAddOn2_Call {
	return &MockClientService_WaypointServiceGetAddOn2_Call{Call: _e.mock.On("WaypointServiceGetAddOn2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetAddOn2_Call) Run(run func(params *waypoint_service.WaypointServiceGetAddOn2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetAddOn2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetAddOn2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOn2_Call) Return(_a0 *waypoint_service.WaypointServiceGetAddOn2OK, _a1 error) *MockClientService_WaypointServiceGetAddOn2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOn2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetAddOn2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOn2OK, error)) *MockClientService_WaypointServiceGetAddOn2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetAddOnDefinition provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetAddOnDefinition(params *waypoint_service.WaypointServiceGetAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnDefinitionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetAddOnDefinition")
	}

	var r0 *waypoint_service.WaypointServiceGetAddOnDefinitionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnDefinitionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetAddOnDefinitionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetAddOnDefinitionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetAddOnDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetAddOnDefinition'
type MockClientService_WaypointServiceGetAddOnDefinition_Call struct {
	*mock.Call
}

// WaypointServiceGetAddOnDefinition is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetAddOnDefinitionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetAddOnDefinition(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetAddOnDefinition_Call {
	return &MockClientService_WaypointServiceGetAddOnDefinition_Call{Call: _e.mock.On("WaypointServiceGetAddOnDefinition",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetAddOnDefinition_Call) Run(run func(params *waypoint_service.WaypointServiceGetAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetAddOnDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetAddOnDefinitionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOnDefinition_Call) Return(_a0 *waypoint_service.WaypointServiceGetAddOnDefinitionOK, _a1 error) *MockClientService_WaypointServiceGetAddOnDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOnDefinition_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnDefinitionOK, error)) *MockClientService_WaypointServiceGetAddOnDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetAddOnDefinition2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetAddOnDefinition2(params *waypoint_service.WaypointServiceGetAddOnDefinition2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnDefinition2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetAddOnDefinition2")
	}

	var r0 *waypoint_service.WaypointServiceGetAddOnDefinition2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnDefinition2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetAddOnDefinition2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetAddOnDefinition2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetAddOnDefinition2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetAddOnDefinition2'
type MockClientService_WaypointServiceGetAddOnDefinition2_Call struct {
	*mock.Call
}

// WaypointServiceGetAddOnDefinition2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetAddOnDefinition2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetAddOnDefinition2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetAddOnDefinition2_Call {
	return &MockClientService_WaypointServiceGetAddOnDefinition2_Call{Call: _e.mock.On("WaypointServiceGetAddOnDefinition2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetAddOnDefinition2_Call) Run(run func(params *waypoint_service.WaypointServiceGetAddOnDefinition2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetAddOnDefinition2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetAddOnDefinition2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOnDefinition2_Call) Return(_a0 *waypoint_service.WaypointServiceGetAddOnDefinition2OK, _a1 error) *MockClientService_WaypointServiceGetAddOnDefinition2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetAddOnDefinition2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAddOnDefinition2OK, error)) *MockClientService_WaypointServiceGetAddOnDefinition2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetAgentGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetAgentGroup(params *waypoint_service.WaypointServiceGetAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAgentGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetAgentGroup")
	}

	var r0 *waypoint_service.WaypointServiceGetAgentGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAgentGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetAgentGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetAgentGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetAgentGroup'
type MockClientService_WaypointServiceGetAgentGroup_Call struct {
	*mock.Call
}

// WaypointServiceGetAgentGroup is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetAgentGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetAgentGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetAgentGroup_Call {
	return &MockClientService_WaypointServiceGetAgentGroup_Call{Call: _e.mock.On("WaypointServiceGetAgentGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetAgentGroup_Call) Run(run func(params *waypoint_service.WaypointServiceGetAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetAgentGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetAgentGroup_Call) Return(_a0 *waypoint_service.WaypointServiceGetAgentGroupOK, _a1 error) *MockClientService_WaypointServiceGetAgentGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetAgentGroup_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetAgentGroupOK, error)) *MockClientService_WaypointServiceGetAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetApplication provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetApplication(params *waypoint_service.WaypointServiceGetApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetApplication")
	}

	var r0 *waypoint_service.WaypointServiceGetApplicationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetApplicationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetApplicationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetApplication'
type MockClientService_WaypointServiceGetApplication_Call struct {
	*mock.Call
}

// WaypointServiceGetApplication is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetApplicationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetApplication(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetApplication_Call {
	return &MockClientService_WaypointServiceGetApplication_Call{Call: _e.mock.On("WaypointServiceGetApplication",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetApplication_Call) Run(run func(params *waypoint_service.WaypointServiceGetApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetApplicationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplication_Call) Return(_a0 *waypoint_service.WaypointServiceGetApplicationOK, _a1 error) *MockClientService_WaypointServiceGetApplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplication_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationOK, error)) *MockClientService_WaypointServiceGetApplication_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetApplication2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetApplication2(params *waypoint_service.WaypointServiceGetApplication2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplication2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetApplication2")
	}

	var r0 *waypoint_service.WaypointServiceGetApplication2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplication2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetApplication2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetApplication2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetApplication2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetApplication2'
type MockClientService_WaypointServiceGetApplication2_Call struct {
	*mock.Call
}

// WaypointServiceGetApplication2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetApplication2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetApplication2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetApplication2_Call {
	return &MockClientService_WaypointServiceGetApplication2_Call{Call: _e.mock.On("WaypointServiceGetApplication2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetApplication2_Call) Run(run func(params *waypoint_service.WaypointServiceGetApplication2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetApplication2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetApplication2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplication2_Call) Return(_a0 *waypoint_service.WaypointServiceGetApplication2OK, _a1 error) *MockClientService_WaypointServiceGetApplication2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplication2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplication2OK, error)) *MockClientService_WaypointServiceGetApplication2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetApplicationTemplate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetApplicationTemplate(params *waypoint_service.WaypointServiceGetApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetApplicationTemplate")
	}

	var r0 *waypoint_service.WaypointServiceGetApplicationTemplateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetApplicationTemplateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetApplicationTemplateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetApplicationTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetApplicationTemplate'
type MockClientService_WaypointServiceGetApplicationTemplate_Call struct {
	*mock.Call
}

// WaypointServiceGetApplicationTemplate is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetApplicationTemplateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetApplicationTemplate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetApplicationTemplate_Call {
	return &MockClientService_WaypointServiceGetApplicationTemplate_Call{Call: _e.mock.On("WaypointServiceGetApplicationTemplate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate_Call) Run(run func(params *waypoint_service.WaypointServiceGetApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetApplicationTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetApplicationTemplateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate_Call) Return(_a0 *waypoint_service.WaypointServiceGetApplicationTemplateOK, _a1 error) *MockClientService_WaypointServiceGetApplicationTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplateOK, error)) *MockClientService_WaypointServiceGetApplicationTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetApplicationTemplate2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetApplicationTemplate2(params *waypoint_service.WaypointServiceGetApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetApplicationTemplate2")
	}

	var r0 *waypoint_service.WaypointServiceGetApplicationTemplate2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetApplicationTemplate2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetApplicationTemplate2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetApplicationTemplate2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetApplicationTemplate2'
type MockClientService_WaypointServiceGetApplicationTemplate2_Call struct {
	*mock.Call
}

// WaypointServiceGetApplicationTemplate2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetApplicationTemplate2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetApplicationTemplate2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetApplicationTemplate2_Call {
	return &MockClientService_WaypointServiceGetApplicationTemplate2_Call{Call: _e.mock.On("WaypointServiceGetApplicationTemplate2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate2_Call) Run(run func(params *waypoint_service.WaypointServiceGetApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetApplicationTemplate2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetApplicationTemplate2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate2_Call) Return(_a0 *waypoint_service.WaypointServiceGetApplicationTemplate2OK, _a1 error) *MockClientService_WaypointServiceGetApplicationTemplate2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate2OK, error)) *MockClientService_WaypointServiceGetApplicationTemplate2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetApplicationTemplate3 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetApplicationTemplate3(params *waypoint_service.WaypointServiceGetApplicationTemplate3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate3OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetApplicationTemplate3")
	}

	var r0 *waypoint_service.WaypointServiceGetApplicationTemplate3OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate3OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetApplicationTemplate3OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetApplicationTemplate3OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetApplicationTemplate3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetApplicationTemplate3'
type MockClientService_WaypointServiceGetApplicationTemplate3_Call struct {
	*mock.Call
}

// WaypointServiceGetApplicationTemplate3 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetApplicationTemplate3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetApplicationTemplate3(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetApplicationTemplate3_Call {
	return &MockClientService_WaypointServiceGetApplicationTemplate3_Call{Call: _e.mock.On("WaypointServiceGetApplicationTemplate3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate3_Call) Run(run func(params *waypoint_service.WaypointServiceGetApplicationTemplate3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetApplicationTemplate3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetApplicationTemplate3Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate3_Call) Return(_a0 *waypoint_service.WaypointServiceGetApplicationTemplate3OK, _a1 error) *MockClientService_WaypointServiceGetApplicationTemplate3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate3_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate3OK, error)) *MockClientService_WaypointServiceGetApplicationTemplate3_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetApplicationTemplate4 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetApplicationTemplate4(params *waypoint_service.WaypointServiceGetApplicationTemplate4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate4OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetApplicationTemplate4")
	}

	var r0 *waypoint_service.WaypointServiceGetApplicationTemplate4OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate4OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetApplicationTemplate4OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetApplicationTemplate4OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetApplicationTemplate4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetApplicationTemplate4'
type MockClientService_WaypointServiceGetApplicationTemplate4_Call struct {
	*mock.Call
}

// WaypointServiceGetApplicationTemplate4 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetApplicationTemplate4Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetApplicationTemplate4(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetApplicationTemplate4_Call {
	return &MockClientService_WaypointServiceGetApplicationTemplate4_Call{Call: _e.mock.On("WaypointServiceGetApplicationTemplate4",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate4_Call) Run(run func(params *waypoint_service.WaypointServiceGetApplicationTemplate4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetApplicationTemplate4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetApplicationTemplate4Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate4_Call) Return(_a0 *waypoint_service.WaypointServiceGetApplicationTemplate4OK, _a1 error) *MockClientService_WaypointServiceGetApplicationTemplate4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetApplicationTemplate4_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetApplicationTemplate4OK, error)) *MockClientService_WaypointServiceGetApplicationTemplate4_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetNamespace provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetNamespace(params *waypoint_service.WaypointServiceGetNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetNamespaceOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetNamespace")
	}

	var r0 *waypoint_service.WaypointServiceGetNamespaceOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetNamespaceOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetNamespaceOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetNamespaceOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetNamespace'
type MockClientService_WaypointServiceGetNamespace_Call struct {
	*mock.Call
}

// WaypointServiceGetNamespace is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetNamespaceParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetNamespace(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetNamespace_Call {
	return &MockClientService_WaypointServiceGetNamespace_Call{Call: _e.mock.On("WaypointServiceGetNamespace",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetNamespace_Call) Run(run func(params *waypoint_service.WaypointServiceGetNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetNamespaceParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetNamespace_Call) Return(_a0 *waypoint_service.WaypointServiceGetNamespaceOK, _a1 error) *MockClientService_WaypointServiceGetNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetNamespace_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetNamespaceOK, error)) *MockClientService_WaypointServiceGetNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFCConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFCConfig(params *waypoint_service.WaypointServiceGetTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFCConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFCConfig")
	}

	var r0 *waypoint_service.WaypointServiceGetTFCConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFCConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFCConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFCConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFCConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFCConfig'
type MockClientService_WaypointServiceGetTFCConfig_Call struct {
	*mock.Call
}

// WaypointServiceGetTFCConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFCConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFCConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFCConfig_Call {
	return &MockClientService_WaypointServiceGetTFCConfig_Call{Call: _e.mock.On("WaypointServiceGetTFCConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFCConfig_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFCConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFCConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFCConfig_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFCConfigOK, _a1 error) *MockClientService_WaypointServiceGetTFCConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFCConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFCConfigOK, error)) *MockClientService_WaypointServiceGetTFCConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFModuleDetails provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFModuleDetails(params *waypoint_service.WaypointServiceGetTFModuleDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetailsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFModuleDetails")
	}

	var r0 *waypoint_service.WaypointServiceGetTFModuleDetailsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFModuleDetailsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetailsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFModuleDetailsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFModuleDetailsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFModuleDetailsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFModuleDetailsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFModuleDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFModuleDetails'
type MockClientService_WaypointServiceGetTFModuleDetails_Call struct {
	*mock.Call
}

// WaypointServiceGetTFModuleDetails is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFModuleDetailsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFModuleDetails(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFModuleDetails_Call {
	return &MockClientService_WaypointServiceGetTFModuleDetails_Call{Call: _e.mock.On("WaypointServiceGetTFModuleDetails",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFModuleDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFModuleDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFModuleDetailsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFModuleDetailsOK, _a1 error) *MockClientService_WaypointServiceGetTFModuleDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFModuleDetailsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetailsOK, error)) *MockClientService_WaypointServiceGetTFModuleDetails_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFModuleDetails2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFModuleDetails2(params *waypoint_service.WaypointServiceGetTFModuleDetails2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetails2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFModuleDetails2")
	}

	var r0 *waypoint_service.WaypointServiceGetTFModuleDetails2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFModuleDetails2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetails2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFModuleDetails2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFModuleDetails2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFModuleDetails2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFModuleDetails2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFModuleDetails2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFModuleDetails2'
type MockClientService_WaypointServiceGetTFModuleDetails2_Call struct {
	*mock.Call
}

// WaypointServiceGetTFModuleDetails2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFModuleDetails2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFModuleDetails2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFModuleDetails2_Call {
	return &MockClientService_WaypointServiceGetTFModuleDetails2_Call{Call: _e.mock.On("WaypointServiceGetTFModuleDetails2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails2_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFModuleDetails2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFModuleDetails2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFModuleDetails2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails2_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFModuleDetails2OK, _a1 error) *MockClientService_WaypointServiceGetTFModuleDetails2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFModuleDetails2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetails2OK, error)) *MockClientService_WaypointServiceGetTFModuleDetails2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFModuleDetails3 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFModuleDetails3(params *waypoint_service.WaypointServiceGetTFModuleDetails3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetails3OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFModuleDetails3")
	}

	var r0 *waypoint_service.WaypointServiceGetTFModuleDetails3OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFModuleDetails3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetails3OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFModuleDetails3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFModuleDetails3OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFModuleDetails3OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFModuleDetails3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFModuleDetails3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFModuleDetails3'
type MockClientService_WaypointServiceGetTFModuleDetails3_Call struct {
	*mock.Call
}

// WaypointServiceGetTFModuleDetails3 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFModuleDetails3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFModuleDetails3(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFModuleDetails3_Call {
	return &MockClientService_WaypointServiceGetTFModuleDetails3_Call{Call: _e.mock.On("WaypointServiceGetTFModuleDetails3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails3_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFModuleDetails3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFModuleDetails3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFModuleDetails3Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails3_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFModuleDetails3OK, _a1 error) *MockClientService_WaypointServiceGetTFModuleDetails3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFModuleDetails3_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFModuleDetails3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFModuleDetails3OK, error)) *MockClientService_WaypointServiceGetTFModuleDetails3_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFRunStatus provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFRunStatus(params *waypoint_service.WaypointServiceGetTFRunStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFRunStatusOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFRunStatus")
	}

	var r0 *waypoint_service.WaypointServiceGetTFRunStatusOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFRunStatusParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFRunStatusOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFRunStatusParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFRunStatusOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFRunStatusOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFRunStatusParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFRunStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFRunStatus'
type MockClientService_WaypointServiceGetTFRunStatus_Call struct {
	*mock.Call
}

// WaypointServiceGetTFRunStatus is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFRunStatusParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFRunStatus(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFRunStatus_Call {
	return &MockClientService_WaypointServiceGetTFRunStatus_Call{Call: _e.mock.On("WaypointServiceGetTFRunStatus",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFRunStatus_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFRunStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFRunStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFRunStatusParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFRunStatus_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFRunStatusOK, _a1 error) *MockClientService_WaypointServiceGetTFRunStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFRunStatus_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFRunStatusParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFRunStatusOK, error)) *MockClientService_WaypointServiceGetTFRunStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFWorkspaceInfo provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFWorkspaceInfo(params *waypoint_service.WaypointServiceGetTFWorkspaceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfoOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFWorkspaceInfo")
	}

	var r0 *waypoint_service.WaypointServiceGetTFWorkspaceInfoOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfoParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfoOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfoParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFWorkspaceInfoOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFWorkspaceInfoOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfoParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFWorkspaceInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFWorkspaceInfo'
type MockClientService_WaypointServiceGetTFWorkspaceInfo_Call struct {
	*mock.Call
}

// WaypointServiceGetTFWorkspaceInfo is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFWorkspaceInfoParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFWorkspaceInfo(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFWorkspaceInfo_Call {
	return &MockClientService_WaypointServiceGetTFWorkspaceInfo_Call{Call: _e.mock.On("WaypointServiceGetTFWorkspaceInfo",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFWorkspaceInfoParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFWorkspaceInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFWorkspaceInfoParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFWorkspaceInfoOK, _a1 error) *MockClientService_WaypointServiceGetTFWorkspaceInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFWorkspaceInfoParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfoOK, error)) *MockClientService_WaypointServiceGetTFWorkspaceInfo_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFWorkspaceInfo2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFWorkspaceInfo2(params *waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFWorkspaceInfo2")
	}

	var r0 *waypoint_service.WaypointServiceGetTFWorkspaceInfo2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFWorkspaceInfo2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFWorkspaceInfo2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFWorkspaceInfo2'
type MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call struct {
	*mock.Call
}

// WaypointServiceGetTFWorkspaceInfo2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFWorkspaceInfo2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call {
	return &MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call{Call: _e.mock.On("WaypointServiceGetTFWorkspaceInfo2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFWorkspaceInfo2OK, _a1 error) *MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo2OK, error)) *MockClientService_WaypointServiceGetTFWorkspaceInfo2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFWorkspaceInfo3 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFWorkspaceInfo3(params *waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo3OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFWorkspaceInfo3")
	}

	var r0 *waypoint_service.WaypointServiceGetTFWorkspaceInfo3OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo3OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFWorkspaceInfo3OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFWorkspaceInfo3OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFWorkspaceInfo3'
type MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call struct {
	*mock.Call
}

// WaypointServiceGetTFWorkspaceInfo3 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFWorkspaceInfo3(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call {
	return &MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call{Call: _e.mock.On("WaypointServiceGetTFWorkspaceInfo3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFWorkspaceInfo3OK, _a1 error) *MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo3OK, error)) *MockClientService_WaypointServiceGetTFWorkspaceInfo3_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetTFWorkspaceInfo4 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetTFWorkspaceInfo4(params *waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo4OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetTFWorkspaceInfo4")
	}

	var r0 *waypoint_service.WaypointServiceGetTFWorkspaceInfo4OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo4OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetTFWorkspaceInfo4OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetTFWorkspaceInfo4OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetTFWorkspaceInfo4'
type MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call struct {
	*mock.Call
}

// WaypointServiceGetTFWorkspaceInfo4 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetTFWorkspaceInfo4(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call {
	return &MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call{Call: _e.mock.On("WaypointServiceGetTFWorkspaceInfo4",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call) Run(run func(params *waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call) Return(_a0 *waypoint_service.WaypointServiceGetTFWorkspaceInfo4OK, _a1 error) *MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetTFWorkspaceInfo4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetTFWorkspaceInfo4OK, error)) *MockClientService_WaypointServiceGetTFWorkspaceInfo4_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceGetVariable provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceGetVariable(params *waypoint_service.WaypointServiceGetVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetVariableOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceGetVariable")
	}

	var r0 *waypoint_service.WaypointServiceGetVariableOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetVariableOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceGetVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceGetVariableOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceGetVariableOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceGetVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceGetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceGetVariable'
type MockClientService_WaypointServiceGetVariable_Call struct {
	*mock.Call
}

// WaypointServiceGetVariable is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceGetVariableParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceGetVariable(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceGetVariable_Call {
	return &MockClientService_WaypointServiceGetVariable_Call{Call: _e.mock.On("WaypointServiceGetVariable",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceGetVariable_Call) Run(run func(params *waypoint_service.WaypointServiceGetVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceGetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceGetVariableParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceGetVariable_Call) Return(_a0 *waypoint_service.WaypointServiceGetVariableOK, _a1 error) *MockClientService_WaypointServiceGetVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceGetVariable_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceGetVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceGetVariableOK, error)) *MockClientService_WaypointServiceGetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListActionConfigs provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListActionConfigs(params *waypoint_service.WaypointServiceListActionConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionConfigsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListActionConfigs")
	}

	var r0 *waypoint_service.WaypointServiceListActionConfigsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionConfigsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionConfigsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionConfigsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListActionConfigsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListActionConfigsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListActionConfigsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListActionConfigs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListActionConfigs'
type MockClientService_WaypointServiceListActionConfigs_Call struct {
	*mock.Call
}

// WaypointServiceListActionConfigs is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListActionConfigsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListActionConfigs(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListActionConfigs_Call {
	return &MockClientService_WaypointServiceListActionConfigs_Call{Call: _e.mock.On("WaypointServiceListActionConfigs",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListActionConfigs_Call) Run(run func(params *waypoint_service.WaypointServiceListActionConfigsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListActionConfigs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListActionConfigsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListActionConfigs_Call) Return(_a0 *waypoint_service.WaypointServiceListActionConfigsOK, _a1 error) *MockClientService_WaypointServiceListActionConfigs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListActionConfigs_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListActionConfigsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionConfigsOK, error)) *MockClientService_WaypointServiceListActionConfigs_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListActionRuns provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListActionRuns(params *waypoint_service.WaypointServiceListActionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRunsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListActionRuns")
	}

	var r0 *waypoint_service.WaypointServiceListActionRunsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionRunsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRunsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionRunsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListActionRunsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListActionRunsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListActionRunsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListActionRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListActionRuns'
type MockClientService_WaypointServiceListActionRuns_Call struct {
	*mock.Call
}

// WaypointServiceListActionRuns is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListActionRunsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListActionRuns(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListActionRuns_Call {
	return &MockClientService_WaypointServiceListActionRuns_Call{Call: _e.mock.On("WaypointServiceListActionRuns",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListActionRuns_Call) Run(run func(params *waypoint_service.WaypointServiceListActionRunsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListActionRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListActionRunsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListActionRuns_Call) Return(_a0 *waypoint_service.WaypointServiceListActionRunsOK, _a1 error) *MockClientService_WaypointServiceListActionRuns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListActionRuns_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListActionRunsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRunsOK, error)) *MockClientService_WaypointServiceListActionRuns_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListActionRuns2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListActionRuns2(params *waypoint_service.WaypointServiceListActionRuns2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRuns2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListActionRuns2")
	}

	var r0 *waypoint_service.WaypointServiceListActionRuns2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionRuns2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRuns2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionRuns2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListActionRuns2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListActionRuns2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListActionRuns2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListActionRuns2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListActionRuns2'
type MockClientService_WaypointServiceListActionRuns2_Call struct {
	*mock.Call
}

// WaypointServiceListActionRuns2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListActionRuns2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListActionRuns2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListActionRuns2_Call {
	return &MockClientService_WaypointServiceListActionRuns2_Call{Call: _e.mock.On("WaypointServiceListActionRuns2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListActionRuns2_Call) Run(run func(params *waypoint_service.WaypointServiceListActionRuns2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListActionRuns2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListActionRuns2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListActionRuns2_Call) Return(_a0 *waypoint_service.WaypointServiceListActionRuns2OK, _a1 error) *MockClientService_WaypointServiceListActionRuns2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListActionRuns2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListActionRuns2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRuns2OK, error)) *MockClientService_WaypointServiceListActionRuns2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListActionRunsByNamespace provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListActionRunsByNamespace(params *waypoint_service.WaypointServiceListActionRunsByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRunsByNamespaceOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListActionRunsByNamespace")
	}

	var r0 *waypoint_service.WaypointServiceListActionRunsByNamespaceOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionRunsByNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRunsByNamespaceOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListActionRunsByNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListActionRunsByNamespaceOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListActionRunsByNamespaceOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListActionRunsByNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListActionRunsByNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListActionRunsByNamespace'
type MockClientService_WaypointServiceListActionRunsByNamespace_Call struct {
	*mock.Call
}

// WaypointServiceListActionRunsByNamespace is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListActionRunsByNamespaceParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListActionRunsByNamespace(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListActionRunsByNamespace_Call {
	return &MockClientService_WaypointServiceListActionRunsByNamespace_Call{Call: _e.mock.On("WaypointServiceListActionRunsByNamespace",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListActionRunsByNamespace_Call) Run(run func(params *waypoint_service.WaypointServiceListActionRunsByNamespaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListActionRunsByNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListActionRunsByNamespaceParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListActionRunsByNamespace_Call) Return(_a0 *waypoint_service.WaypointServiceListActionRunsByNamespaceOK, _a1 error) *MockClientService_WaypointServiceListActionRunsByNamespace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListActionRunsByNamespace_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListActionRunsByNamespaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListActionRunsByNamespaceOK, error)) *MockClientService_WaypointServiceListActionRunsByNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListAddOnDefinitions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListAddOnDefinitions(params *waypoint_service.WaypointServiceListAddOnDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAddOnDefinitionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListAddOnDefinitions")
	}

	var r0 *waypoint_service.WaypointServiceListAddOnDefinitionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAddOnDefinitionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListAddOnDefinitionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListAddOnDefinitionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListAddOnDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListAddOnDefinitions'
type MockClientService_WaypointServiceListAddOnDefinitions_Call struct {
	*mock.Call
}

// WaypointServiceListAddOnDefinitions is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListAddOnDefinitionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListAddOnDefinitions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListAddOnDefinitions_Call {
	return &MockClientService_WaypointServiceListAddOnDefinitions_Call{Call: _e.mock.On("WaypointServiceListAddOnDefinitions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListAddOnDefinitions_Call) Run(run func(params *waypoint_service.WaypointServiceListAddOnDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListAddOnDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListAddOnDefinitionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListAddOnDefinitions_Call) Return(_a0 *waypoint_service.WaypointServiceListAddOnDefinitionsOK, _a1 error) *MockClientService_WaypointServiceListAddOnDefinitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListAddOnDefinitions_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAddOnDefinitionsOK, error)) *MockClientService_WaypointServiceListAddOnDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListAddOns provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListAddOns(params *waypoint_service.WaypointServiceListAddOnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAddOnsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListAddOns")
	}

	var r0 *waypoint_service.WaypointServiceListAddOnsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListAddOnsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAddOnsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListAddOnsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListAddOnsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListAddOnsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListAddOnsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListAddOns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListAddOns'
type MockClientService_WaypointServiceListAddOns_Call struct {
	*mock.Call
}

// WaypointServiceListAddOns is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListAddOnsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListAddOns(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListAddOns_Call {
	return &MockClientService_WaypointServiceListAddOns_Call{Call: _e.mock.On("WaypointServiceListAddOns",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListAddOns_Call) Run(run func(params *waypoint_service.WaypointServiceListAddOnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListAddOns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListAddOnsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListAddOns_Call) Return(_a0 *waypoint_service.WaypointServiceListAddOnsOK, _a1 error) *MockClientService_WaypointServiceListAddOns_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListAddOns_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListAddOnsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAddOnsOK, error)) *MockClientService_WaypointServiceListAddOns_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListAgentGroups provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListAgentGroups(params *waypoint_service.WaypointServiceListAgentGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAgentGroupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListAgentGroups")
	}

	var r0 *waypoint_service.WaypointServiceListAgentGroupsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAgentGroupsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListAgentGroupsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListAgentGroupsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListAgentGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListAgentGroups'
type MockClientService_WaypointServiceListAgentGroups_Call struct {
	*mock.Call
}

// WaypointServiceListAgentGroups is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListAgentGroupsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListAgentGroups(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListAgentGroups_Call {
	return &MockClientService_WaypointServiceListAgentGroups_Call{Call: _e.mock.On("WaypointServiceListAgentGroups",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListAgentGroups_Call) Run(run func(params *waypoint_service.WaypointServiceListAgentGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListAgentGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListAgentGroupsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListAgentGroups_Call) Return(_a0 *waypoint_service.WaypointServiceListAgentGroupsOK, _a1 error) *MockClientService_WaypointServiceListAgentGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListAgentGroups_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListAgentGroupsOK, error)) *MockClientService_WaypointServiceListAgentGroups_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListApplicationTemplates provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListApplicationTemplates(params *waypoint_service.WaypointServiceListApplicationTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationTemplatesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListApplicationTemplates")
	}

	var r0 *waypoint_service.WaypointServiceListApplicationTemplatesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListApplicationTemplatesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationTemplatesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListApplicationTemplatesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListApplicationTemplatesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListApplicationTemplatesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListApplicationTemplatesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListApplicationTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListApplicationTemplates'
type MockClientService_WaypointServiceListApplicationTemplates_Call struct {
	*mock.Call
}

// WaypointServiceListApplicationTemplates is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListApplicationTemplatesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListApplicationTemplates(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListApplicationTemplates_Call {
	return &MockClientService_WaypointServiceListApplicationTemplates_Call{Call: _e.mock.On("WaypointServiceListApplicationTemplates",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListApplicationTemplates_Call) Run(run func(params *waypoint_service.WaypointServiceListApplicationTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListApplicationTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListApplicationTemplatesParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListApplicationTemplates_Call) Return(_a0 *waypoint_service.WaypointServiceListApplicationTemplatesOK, _a1 error) *MockClientService_WaypointServiceListApplicationTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListApplicationTemplates_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListApplicationTemplatesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationTemplatesOK, error)) *MockClientService_WaypointServiceListApplicationTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListApplicationTemplates2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListApplicationTemplates2(params *waypoint_service.WaypointServiceListApplicationTemplates2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationTemplates2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListApplicationTemplates2")
	}

	var r0 *waypoint_service.WaypointServiceListApplicationTemplates2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListApplicationTemplates2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationTemplates2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListApplicationTemplates2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListApplicationTemplates2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListApplicationTemplates2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListApplicationTemplates2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListApplicationTemplates2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListApplicationTemplates2'
type MockClientService_WaypointServiceListApplicationTemplates2_Call struct {
	*mock.Call
}

// WaypointServiceListApplicationTemplates2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListApplicationTemplates2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListApplicationTemplates2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListApplicationTemplates2_Call {
	return &MockClientService_WaypointServiceListApplicationTemplates2_Call{Call: _e.mock.On("WaypointServiceListApplicationTemplates2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListApplicationTemplates2_Call) Run(run func(params *waypoint_service.WaypointServiceListApplicationTemplates2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListApplicationTemplates2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListApplicationTemplates2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListApplicationTemplates2_Call) Return(_a0 *waypoint_service.WaypointServiceListApplicationTemplates2OK, _a1 error) *MockClientService_WaypointServiceListApplicationTemplates2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListApplicationTemplates2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListApplicationTemplates2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationTemplates2OK, error)) *MockClientService_WaypointServiceListApplicationTemplates2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListApplications provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListApplications(params *waypoint_service.WaypointServiceListApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListApplications")
	}

	var r0 *waypoint_service.WaypointServiceListApplicationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListApplicationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListApplicationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListApplicationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListApplicationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListApplicationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListApplications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListApplications'
type MockClientService_WaypointServiceListApplications_Call struct {
	*mock.Call
}

// WaypointServiceListApplications is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListApplicationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListApplications(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListApplications_Call {
	return &MockClientService_WaypointServiceListApplications_Call{Call: _e.mock.On("WaypointServiceListApplications",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListApplications_Call) Run(run func(params *waypoint_service.WaypointServiceListApplicationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListApplications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListApplicationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListApplications_Call) Return(_a0 *waypoint_service.WaypointServiceListApplicationsOK, _a1 error) *MockClientService_WaypointServiceListApplications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListApplications_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListApplicationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListApplicationsOK, error)) *MockClientService_WaypointServiceListApplications_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListNoCodeModules provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListNoCodeModules(params *waypoint_service.WaypointServiceListNoCodeModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListNoCodeModulesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListNoCodeModules")
	}

	var r0 *waypoint_service.WaypointServiceListNoCodeModulesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListNoCodeModulesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListNoCodeModulesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListNoCodeModulesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListNoCodeModulesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListNoCodeModulesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListNoCodeModulesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListNoCodeModules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListNoCodeModules'
type MockClientService_WaypointServiceListNoCodeModules_Call struct {
	*mock.Call
}

// WaypointServiceListNoCodeModules is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListNoCodeModulesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListNoCodeModules(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListNoCodeModules_Call {
	return &MockClientService_WaypointServiceListNoCodeModules_Call{Call: _e.mock.On("WaypointServiceListNoCodeModules",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListNoCodeModules_Call) Run(run func(params *waypoint_service.WaypointServiceListNoCodeModulesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListNoCodeModules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListNoCodeModulesParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListNoCodeModules_Call) Return(_a0 *waypoint_service.WaypointServiceListNoCodeModulesOK, _a1 error) *MockClientService_WaypointServiceListNoCodeModules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListNoCodeModules_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListNoCodeModulesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListNoCodeModulesOK, error)) *MockClientService_WaypointServiceListNoCodeModules_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListNoCodeModules2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListNoCodeModules2(params *waypoint_service.WaypointServiceListNoCodeModules2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListNoCodeModules2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListNoCodeModules2")
	}

	var r0 *waypoint_service.WaypointServiceListNoCodeModules2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListNoCodeModules2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListNoCodeModules2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListNoCodeModules2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListNoCodeModules2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListNoCodeModules2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListNoCodeModules2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListNoCodeModules2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListNoCodeModules2'
type MockClientService_WaypointServiceListNoCodeModules2_Call struct {
	*mock.Call
}

// WaypointServiceListNoCodeModules2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListNoCodeModules2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListNoCodeModules2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListNoCodeModules2_Call {
	return &MockClientService_WaypointServiceListNoCodeModules2_Call{Call: _e.mock.On("WaypointServiceListNoCodeModules2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListNoCodeModules2_Call) Run(run func(params *waypoint_service.WaypointServiceListNoCodeModules2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListNoCodeModules2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListNoCodeModules2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListNoCodeModules2_Call) Return(_a0 *waypoint_service.WaypointServiceListNoCodeModules2OK, _a1 error) *MockClientService_WaypointServiceListNoCodeModules2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListNoCodeModules2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListNoCodeModules2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListNoCodeModules2OK, error)) *MockClientService_WaypointServiceListNoCodeModules2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListTFAgentPools provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListTFAgentPools(params *waypoint_service.WaypointServiceListTFAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFAgentPoolsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListTFAgentPools")
	}

	var r0 *waypoint_service.WaypointServiceListTFAgentPoolsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListTFAgentPoolsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFAgentPoolsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListTFAgentPoolsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListTFAgentPoolsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListTFAgentPoolsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListTFAgentPoolsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListTFAgentPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListTFAgentPools'
type MockClientService_WaypointServiceListTFAgentPools_Call struct {
	*mock.Call
}

// WaypointServiceListTFAgentPools is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListTFAgentPoolsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListTFAgentPools(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListTFAgentPools_Call {
	return &MockClientService_WaypointServiceListTFAgentPools_Call{Call: _e.mock.On("WaypointServiceListTFAgentPools",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListTFAgentPools_Call) Run(run func(params *waypoint_service.WaypointServiceListTFAgentPoolsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListTFAgentPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListTFAgentPoolsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListTFAgentPools_Call) Return(_a0 *waypoint_service.WaypointServiceListTFAgentPoolsOK, _a1 error) *MockClientService_WaypointServiceListTFAgentPools_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListTFAgentPools_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListTFAgentPoolsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFAgentPoolsOK, error)) *MockClientService_WaypointServiceListTFAgentPools_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListTFCOrganizations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListTFCOrganizations(params *waypoint_service.WaypointServiceListTFCOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFCOrganizationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListTFCOrganizations")
	}

	var r0 *waypoint_service.WaypointServiceListTFCOrganizationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListTFCOrganizationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFCOrganizationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListTFCOrganizationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListTFCOrganizationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListTFCOrganizationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListTFCOrganizationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListTFCOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListTFCOrganizations'
type MockClientService_WaypointServiceListTFCOrganizations_Call struct {
	*mock.Call
}

// WaypointServiceListTFCOrganizations is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListTFCOrganizationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListTFCOrganizations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListTFCOrganizations_Call {
	return &MockClientService_WaypointServiceListTFCOrganizations_Call{Call: _e.mock.On("WaypointServiceListTFCOrganizations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListTFCOrganizations_Call) Run(run func(params *waypoint_service.WaypointServiceListTFCOrganizationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListTFCOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListTFCOrganizationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListTFCOrganizations_Call) Return(_a0 *waypoint_service.WaypointServiceListTFCOrganizationsOK, _a1 error) *MockClientService_WaypointServiceListTFCOrganizations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListTFCOrganizations_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListTFCOrganizationsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFCOrganizationsOK, error)) *MockClientService_WaypointServiceListTFCOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListTFCProjects provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListTFCProjects(params *waypoint_service.WaypointServiceListTFCProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFCProjectsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListTFCProjects")
	}

	var r0 *waypoint_service.WaypointServiceListTFCProjectsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListTFCProjectsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFCProjectsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListTFCProjectsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListTFCProjectsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListTFCProjectsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListTFCProjectsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListTFCProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListTFCProjects'
type MockClientService_WaypointServiceListTFCProjects_Call struct {
	*mock.Call
}

// WaypointServiceListTFCProjects is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListTFCProjectsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListTFCProjects(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListTFCProjects_Call {
	return &MockClientService_WaypointServiceListTFCProjects_Call{Call: _e.mock.On("WaypointServiceListTFCProjects",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListTFCProjects_Call) Run(run func(params *waypoint_service.WaypointServiceListTFCProjectsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListTFCProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListTFCProjectsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListTFCProjects_Call) Return(_a0 *waypoint_service.WaypointServiceListTFCProjectsOK, _a1 error) *MockClientService_WaypointServiceListTFCProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListTFCProjects_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListTFCProjectsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListTFCProjectsOK, error)) *MockClientService_WaypointServiceListTFCProjects_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceListVariables provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceListVariables(params *waypoint_service.WaypointServiceListVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListVariablesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceListVariables")
	}

	var r0 *waypoint_service.WaypointServiceListVariablesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListVariablesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListVariablesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceListVariablesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceListVariablesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceListVariablesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceListVariablesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceListVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceListVariables'
type MockClientService_WaypointServiceListVariables_Call struct {
	*mock.Call
}

// WaypointServiceListVariables is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceListVariablesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceListVariables(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceListVariables_Call {
	return &MockClientService_WaypointServiceListVariables_Call{Call: _e.mock.On("WaypointServiceListVariables",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceListVariables_Call) Run(run func(params *waypoint_service.WaypointServiceListVariablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceListVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceListVariablesParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceListVariables_Call) Return(_a0 *waypoint_service.WaypointServiceListVariablesOK, _a1 error) *MockClientService_WaypointServiceListVariables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceListVariables_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceListVariablesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceListVariablesOK, error)) *MockClientService_WaypointServiceListVariables_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceQueueAgentOperation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceQueueAgentOperation(params *waypoint_service.WaypointServiceQueueAgentOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceQueueAgentOperationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceQueueAgentOperation")
	}

	var r0 *waypoint_service.WaypointServiceQueueAgentOperationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceQueueAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceQueueAgentOperationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceQueueAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceQueueAgentOperationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceQueueAgentOperationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceQueueAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceQueueAgentOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceQueueAgentOperation'
type MockClientService_WaypointServiceQueueAgentOperation_Call struct {
	*mock.Call
}

// WaypointServiceQueueAgentOperation is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceQueueAgentOperationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceQueueAgentOperation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceQueueAgentOperation_Call {
	return &MockClientService_WaypointServiceQueueAgentOperation_Call{Call: _e.mock.On("WaypointServiceQueueAgentOperation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceQueueAgentOperation_Call) Run(run func(params *waypoint_service.WaypointServiceQueueAgentOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceQueueAgentOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceQueueAgentOperationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceQueueAgentOperation_Call) Return(_a0 *waypoint_service.WaypointServiceQueueAgentOperationOK, _a1 error) *MockClientService_WaypointServiceQueueAgentOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceQueueAgentOperation_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceQueueAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceQueueAgentOperationOK, error)) *MockClientService_WaypointServiceQueueAgentOperation_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceRetrieveAgentOperation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceRetrieveAgentOperation(params *waypoint_service.WaypointServiceRetrieveAgentOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceRetrieveAgentOperationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceRetrieveAgentOperation")
	}

	var r0 *waypoint_service.WaypointServiceRetrieveAgentOperationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceRetrieveAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceRetrieveAgentOperationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceRetrieveAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceRetrieveAgentOperationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceRetrieveAgentOperationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceRetrieveAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceRetrieveAgentOperation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceRetrieveAgentOperation'
type MockClientService_WaypointServiceRetrieveAgentOperation_Call struct {
	*mock.Call
}

// WaypointServiceRetrieveAgentOperation is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceRetrieveAgentOperationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceRetrieveAgentOperation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceRetrieveAgentOperation_Call {
	return &MockClientService_WaypointServiceRetrieveAgentOperation_Call{Call: _e.mock.On("WaypointServiceRetrieveAgentOperation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceRetrieveAgentOperation_Call) Run(run func(params *waypoint_service.WaypointServiceRetrieveAgentOperationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceRetrieveAgentOperation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceRetrieveAgentOperationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceRetrieveAgentOperation_Call) Return(_a0 *waypoint_service.WaypointServiceRetrieveAgentOperationOK, _a1 error) *MockClientService_WaypointServiceRetrieveAgentOperation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceRetrieveAgentOperation_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceRetrieveAgentOperationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceRetrieveAgentOperationOK, error)) *MockClientService_WaypointServiceRetrieveAgentOperation_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceRunAction provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceRunAction(params *waypoint_service.WaypointServiceRunActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceRunActionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceRunAction")
	}

	var r0 *waypoint_service.WaypointServiceRunActionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceRunActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceRunActionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceRunActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceRunActionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceRunActionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceRunActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceRunAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceRunAction'
type MockClientService_WaypointServiceRunAction_Call struct {
	*mock.Call
}

// WaypointServiceRunAction is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceRunActionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceRunAction(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceRunAction_Call {
	return &MockClientService_WaypointServiceRunAction_Call{Call: _e.mock.On("WaypointServiceRunAction",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceRunAction_Call) Run(run func(params *waypoint_service.WaypointServiceRunActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceRunAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceRunActionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceRunAction_Call) Return(_a0 *waypoint_service.WaypointServiceRunActionOK, _a1 error) *MockClientService_WaypointServiceRunAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceRunAction_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceRunActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceRunActionOK, error)) *MockClientService_WaypointServiceRunAction_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceSendStatusLog provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceSendStatusLog(params *waypoint_service.WaypointServiceSendStatusLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceSendStatusLogOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceSendStatusLog")
	}

	var r0 *waypoint_service.WaypointServiceSendStatusLogOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceSendStatusLogParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceSendStatusLogOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceSendStatusLogParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceSendStatusLogOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceSendStatusLogOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceSendStatusLogParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceSendStatusLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceSendStatusLog'
type MockClientService_WaypointServiceSendStatusLog_Call struct {
	*mock.Call
}

// WaypointServiceSendStatusLog is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceSendStatusLogParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceSendStatusLog(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceSendStatusLog_Call {
	return &MockClientService_WaypointServiceSendStatusLog_Call{Call: _e.mock.On("WaypointServiceSendStatusLog",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceSendStatusLog_Call) Run(run func(params *waypoint_service.WaypointServiceSendStatusLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceSendStatusLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceSendStatusLogParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceSendStatusLog_Call) Return(_a0 *waypoint_service.WaypointServiceSendStatusLogOK, _a1 error) *MockClientService_WaypointServiceSendStatusLog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceSendStatusLog_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceSendStatusLogParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceSendStatusLogOK, error)) *MockClientService_WaypointServiceSendStatusLog_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceStartingAction provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceStartingAction(params *waypoint_service.WaypointServiceStartingActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceStartingActionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceStartingAction")
	}

	var r0 *waypoint_service.WaypointServiceStartingActionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceStartingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceStartingActionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceStartingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceStartingActionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceStartingActionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceStartingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceStartingAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceStartingAction'
type MockClientService_WaypointServiceStartingAction_Call struct {
	*mock.Call
}

// WaypointServiceStartingAction is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceStartingActionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceStartingAction(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceStartingAction_Call {
	return &MockClientService_WaypointServiceStartingAction_Call{Call: _e.mock.On("WaypointServiceStartingAction",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceStartingAction_Call) Run(run func(params *waypoint_service.WaypointServiceStartingActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceStartingAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceStartingActionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceStartingAction_Call) Return(_a0 *waypoint_service.WaypointServiceStartingActionOK, _a1 error) *MockClientService_WaypointServiceStartingAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceStartingAction_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceStartingActionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceStartingActionOK, error)) *MockClientService_WaypointServiceStartingAction_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIBulkUpdateActionAssignForApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIBulkUpdateActionAssignForApp(params *waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIBulkUpdateActionAssignForApp")
	}

	var r0 *waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIBulkUpdateActionAssignForApp'
type MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call struct {
	*mock.Call
}

// WaypointServiceUIBulkUpdateActionAssignForApp is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIBulkUpdateActionAssignForApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call {
	return &MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call{Call: _e.mock.On("WaypointServiceUIBulkUpdateActionAssignForApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call) Run(run func(params *waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call) Return(_a0 *waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppOK, _a1 error) *MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIBulkUpdateActionAssignForAppOK, error)) *MockClientService_WaypointServiceUIBulkUpdateActionAssignForApp_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUICreateActionConfigWithVars provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUICreateActionConfigWithVars(params *waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUICreateActionConfigWithVarsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUICreateActionConfigWithVars")
	}

	var r0 *waypoint_service.WaypointServiceUICreateActionConfigWithVarsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUICreateActionConfigWithVarsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUICreateActionConfigWithVarsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUICreateActionConfigWithVarsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUICreateActionConfigWithVars_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUICreateActionConfigWithVars'
type MockClientService_WaypointServiceUICreateActionConfigWithVars_Call struct {
	*mock.Call
}

// WaypointServiceUICreateActionConfigWithVars is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUICreateActionConfigWithVars(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUICreateActionConfigWithVars_Call {
	return &MockClientService_WaypointServiceUICreateActionConfigWithVars_Call{Call: _e.mock.On("WaypointServiceUICreateActionConfigWithVars",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUICreateActionConfigWithVars_Call) Run(run func(params *waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUICreateActionConfigWithVars_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUICreateActionConfigWithVars_Call) Return(_a0 *waypoint_service.WaypointServiceUICreateActionConfigWithVarsOK, _a1 error) *MockClientService_WaypointServiceUICreateActionConfigWithVars_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUICreateActionConfigWithVars_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUICreateActionConfigWithVarsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUICreateActionConfigWithVarsOK, error)) *MockClientService_WaypointServiceUICreateActionConfigWithVars_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIGetActionConfigBundle provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIGetActionConfigBundle(params *waypoint_service.WaypointServiceUIGetActionConfigBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetActionConfigBundleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIGetActionConfigBundle")
	}

	var r0 *waypoint_service.WaypointServiceUIGetActionConfigBundleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetActionConfigBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetActionConfigBundleOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetActionConfigBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIGetActionConfigBundleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIGetActionConfigBundleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIGetActionConfigBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIGetActionConfigBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIGetActionConfigBundle'
type MockClientService_WaypointServiceUIGetActionConfigBundle_Call struct {
	*mock.Call
}

// WaypointServiceUIGetActionConfigBundle is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIGetActionConfigBundleParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIGetActionConfigBundle(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIGetActionConfigBundle_Call {
	return &MockClientService_WaypointServiceUIGetActionConfigBundle_Call{Call: _e.mock.On("WaypointServiceUIGetActionConfigBundle",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIGetActionConfigBundle_Call) Run(run func(params *waypoint_service.WaypointServiceUIGetActionConfigBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIGetActionConfigBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIGetActionConfigBundleParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetActionConfigBundle_Call) Return(_a0 *waypoint_service.WaypointServiceUIGetActionConfigBundleOK, _a1 error) *MockClientService_WaypointServiceUIGetActionConfigBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetActionConfigBundle_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIGetActionConfigBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetActionConfigBundleOK, error)) *MockClientService_WaypointServiceUIGetActionConfigBundle_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIGetActionConfigBundle2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIGetActionConfigBundle2(params *waypoint_service.WaypointServiceUIGetActionConfigBundle2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetActionConfigBundle2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIGetActionConfigBundle2")
	}

	var r0 *waypoint_service.WaypointServiceUIGetActionConfigBundle2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetActionConfigBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetActionConfigBundle2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetActionConfigBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIGetActionConfigBundle2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIGetActionConfigBundle2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIGetActionConfigBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIGetActionConfigBundle2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIGetActionConfigBundle2'
type MockClientService_WaypointServiceUIGetActionConfigBundle2_Call struct {
	*mock.Call
}

// WaypointServiceUIGetActionConfigBundle2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIGetActionConfigBundle2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIGetActionConfigBundle2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIGetActionConfigBundle2_Call {
	return &MockClientService_WaypointServiceUIGetActionConfigBundle2_Call{Call: _e.mock.On("WaypointServiceUIGetActionConfigBundle2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIGetActionConfigBundle2_Call) Run(run func(params *waypoint_service.WaypointServiceUIGetActionConfigBundle2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIGetActionConfigBundle2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIGetActionConfigBundle2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetActionConfigBundle2_Call) Return(_a0 *waypoint_service.WaypointServiceUIGetActionConfigBundle2OK, _a1 error) *MockClientService_WaypointServiceUIGetActionConfigBundle2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetActionConfigBundle2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIGetActionConfigBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetActionConfigBundle2OK, error)) *MockClientService_WaypointServiceUIGetActionConfigBundle2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIGetApplicationBundle provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIGetApplicationBundle(params *waypoint_service.WaypointServiceUIGetApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationBundleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIGetApplicationBundle")
	}

	var r0 *waypoint_service.WaypointServiceUIGetApplicationBundleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationBundleOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIGetApplicationBundleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIGetApplicationBundleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIGetApplicationBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIGetApplicationBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIGetApplicationBundle'
type MockClientService_WaypointServiceUIGetApplicationBundle_Call struct {
	*mock.Call
}

// WaypointServiceUIGetApplicationBundle is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIGetApplicationBundleParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIGetApplicationBundle(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIGetApplicationBundle_Call {
	return &MockClientService_WaypointServiceUIGetApplicationBundle_Call{Call: _e.mock.On("WaypointServiceUIGetApplicationBundle",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIGetApplicationBundle_Call) Run(run func(params *waypoint_service.WaypointServiceUIGetApplicationBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIGetApplicationBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIGetApplicationBundleParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationBundle_Call) Return(_a0 *waypoint_service.WaypointServiceUIGetApplicationBundleOK, _a1 error) *MockClientService_WaypointServiceUIGetApplicationBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationBundle_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIGetApplicationBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationBundleOK, error)) *MockClientService_WaypointServiceUIGetApplicationBundle_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIGetApplicationBundle2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIGetApplicationBundle2(params *waypoint_service.WaypointServiceUIGetApplicationBundle2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationBundle2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIGetApplicationBundle2")
	}

	var r0 *waypoint_service.WaypointServiceUIGetApplicationBundle2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationBundle2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIGetApplicationBundle2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIGetApplicationBundle2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIGetApplicationBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIGetApplicationBundle2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIGetApplicationBundle2'
type MockClientService_WaypointServiceUIGetApplicationBundle2_Call struct {
	*mock.Call
}

// WaypointServiceUIGetApplicationBundle2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIGetApplicationBundle2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIGetApplicationBundle2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIGetApplicationBundle2_Call {
	return &MockClientService_WaypointServiceUIGetApplicationBundle2_Call{Call: _e.mock.On("WaypointServiceUIGetApplicationBundle2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIGetApplicationBundle2_Call) Run(run func(params *waypoint_service.WaypointServiceUIGetApplicationBundle2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIGetApplicationBundle2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIGetApplicationBundle2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationBundle2_Call) Return(_a0 *waypoint_service.WaypointServiceUIGetApplicationBundle2OK, _a1 error) *MockClientService_WaypointServiceUIGetApplicationBundle2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationBundle2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIGetApplicationBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationBundle2OK, error)) *MockClientService_WaypointServiceUIGetApplicationBundle2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIGetApplicationTemplateBundle provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIGetApplicationTemplateBundle(params *waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIGetApplicationTemplateBundle")
	}

	var r0 *waypoint_service.WaypointServiceUIGetApplicationTemplateBundleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIGetApplicationTemplateBundleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIGetApplicationTemplateBundle'
type MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call struct {
	*mock.Call
}

// WaypointServiceUIGetApplicationTemplateBundle is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIGetApplicationTemplateBundle(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call {
	return &MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call{Call: _e.mock.On("WaypointServiceUIGetApplicationTemplateBundle",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call) Run(run func(params *waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call) Return(_a0 *waypoint_service.WaypointServiceUIGetApplicationTemplateBundleOK, _a1 error) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationTemplateBundleOK, error)) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIGetApplicationTemplateBundle2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIGetApplicationTemplateBundle2(params *waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIGetApplicationTemplateBundle2")
	}

	var r0 *waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIGetApplicationTemplateBundle2'
type MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call struct {
	*mock.Call
}

// WaypointServiceUIGetApplicationTemplateBundle2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIGetApplicationTemplateBundle2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call {
	return &MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call{Call: _e.mock.On("WaypointServiceUIGetApplicationTemplateBundle2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call) Run(run func(params *waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call) Return(_a0 *waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2OK, _a1 error) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIGetApplicationTemplateBundle2OK, error)) *MockClientService_WaypointServiceUIGetApplicationTemplateBundle2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIListActionConfigBundles provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIListActionConfigBundles(params *waypoint_service.WaypointServiceUIListActionConfigBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIListActionConfigBundlesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIListActionConfigBundles")
	}

	var r0 *waypoint_service.WaypointServiceUIListActionConfigBundlesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIListActionConfigBundlesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIListActionConfigBundlesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIListActionConfigBundlesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIListActionConfigBundlesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIListActionConfigBundlesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIListActionConfigBundlesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIListActionConfigBundles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIListActionConfigBundles'
type MockClientService_WaypointServiceUIListActionConfigBundles_Call struct {
	*mock.Call
}

// WaypointServiceUIListActionConfigBundles is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIListActionConfigBundlesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIListActionConfigBundles(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIListActionConfigBundles_Call {
	return &MockClientService_WaypointServiceUIListActionConfigBundles_Call{Call: _e.mock.On("WaypointServiceUIListActionConfigBundles",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIListActionConfigBundles_Call) Run(run func(params *waypoint_service.WaypointServiceUIListActionConfigBundlesParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIListActionConfigBundles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIListActionConfigBundlesParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIListActionConfigBundles_Call) Return(_a0 *waypoint_service.WaypointServiceUIListActionConfigBundlesOK, _a1 error) *MockClientService_WaypointServiceUIListActionConfigBundles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIListActionConfigBundles_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIListActionConfigBundlesParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIListActionConfigBundlesOK, error)) *MockClientService_WaypointServiceUIListActionConfigBundles_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUIListAddOnDefinitions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUIListAddOnDefinitions(params *waypoint_service.WaypointServiceUIListAddOnDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIListAddOnDefinitionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUIListAddOnDefinitions")
	}

	var r0 *waypoint_service.WaypointServiceUIListAddOnDefinitionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIListAddOnDefinitionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUIListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUIListAddOnDefinitionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUIListAddOnDefinitionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUIListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUIListAddOnDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUIListAddOnDefinitions'
type MockClientService_WaypointServiceUIListAddOnDefinitions_Call struct {
	*mock.Call
}

// WaypointServiceUIListAddOnDefinitions is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUIListAddOnDefinitionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUIListAddOnDefinitions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUIListAddOnDefinitions_Call {
	return &MockClientService_WaypointServiceUIListAddOnDefinitions_Call{Call: _e.mock.On("WaypointServiceUIListAddOnDefinitions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUIListAddOnDefinitions_Call) Run(run func(params *waypoint_service.WaypointServiceUIListAddOnDefinitionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUIListAddOnDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUIListAddOnDefinitionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUIListAddOnDefinitions_Call) Return(_a0 *waypoint_service.WaypointServiceUIListAddOnDefinitionsOK, _a1 error) *MockClientService_WaypointServiceUIListAddOnDefinitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUIListAddOnDefinitions_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUIListAddOnDefinitionsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUIListAddOnDefinitionsOK, error)) *MockClientService_WaypointServiceUIListAddOnDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUILoadProductBanner provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUILoadProductBanner(params *waypoint_service.WaypointServiceUILoadProductBannerParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUILoadProductBannerOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUILoadProductBanner")
	}

	var r0 *waypoint_service.WaypointServiceUILoadProductBannerOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUILoadProductBannerParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUILoadProductBannerOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUILoadProductBannerParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUILoadProductBannerOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUILoadProductBannerOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUILoadProductBannerParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUILoadProductBanner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUILoadProductBanner'
type MockClientService_WaypointServiceUILoadProductBanner_Call struct {
	*mock.Call
}

// WaypointServiceUILoadProductBanner is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUILoadProductBannerParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUILoadProductBanner(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUILoadProductBanner_Call {
	return &MockClientService_WaypointServiceUILoadProductBanner_Call{Call: _e.mock.On("WaypointServiceUILoadProductBanner",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUILoadProductBanner_Call) Run(run func(params *waypoint_service.WaypointServiceUILoadProductBannerParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUILoadProductBanner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUILoadProductBannerParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUILoadProductBanner_Call) Return(_a0 *waypoint_service.WaypointServiceUILoadProductBannerOK, _a1 error) *MockClientService_WaypointServiceUILoadProductBanner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUILoadProductBanner_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUILoadProductBannerParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUILoadProductBannerOK, error)) *MockClientService_WaypointServiceUILoadProductBanner_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateActionConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateActionConfig(params *waypoint_service.WaypointServiceUpdateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateActionConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateActionConfig")
	}

	var r0 *waypoint_service.WaypointServiceUpdateActionConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateActionConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateActionConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateActionConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateActionConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateActionConfig'
type MockClientService_WaypointServiceUpdateActionConfig_Call struct {
	*mock.Call
}

// WaypointServiceUpdateActionConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateActionConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateActionConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateActionConfig_Call {
	return &MockClientService_WaypointServiceUpdateActionConfig_Call{Call: _e.mock.On("WaypointServiceUpdateActionConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateActionConfig_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateActionConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateActionConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateActionConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateActionConfig_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateActionConfigOK, _a1 error) *MockClientService_WaypointServiceUpdateActionConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateActionConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateActionConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateActionConfigOK, error)) *MockClientService_WaypointServiceUpdateActionConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateAddOn provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateAddOn(params *waypoint_service.WaypointServiceUpdateAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateAddOn")
	}

	var r0 *waypoint_service.WaypointServiceUpdateAddOnOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateAddOnOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateAddOnOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateAddOn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateAddOn'
type MockClientService_WaypointServiceUpdateAddOn_Call struct {
	*mock.Call
}

// WaypointServiceUpdateAddOn is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateAddOnParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateAddOn(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateAddOn_Call {
	return &MockClientService_WaypointServiceUpdateAddOn_Call{Call: _e.mock.On("WaypointServiceUpdateAddOn",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateAddOn_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateAddOnParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateAddOn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateAddOnParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAddOn_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateAddOnOK, _a1 error) *MockClientService_WaypointServiceUpdateAddOn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAddOn_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateAddOnParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnOK, error)) *MockClientService_WaypointServiceUpdateAddOn_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateAddOnDefinition provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateAddOnDefinition(params *waypoint_service.WaypointServiceUpdateAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnDefinitionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateAddOnDefinition")
	}

	var r0 *waypoint_service.WaypointServiceUpdateAddOnDefinitionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnDefinitionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateAddOnDefinitionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateAddOnDefinitionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateAddOnDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateAddOnDefinition'
type MockClientService_WaypointServiceUpdateAddOnDefinition_Call struct {
	*mock.Call
}

// WaypointServiceUpdateAddOnDefinition is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateAddOnDefinitionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateAddOnDefinition(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateAddOnDefinition_Call {
	return &MockClientService_WaypointServiceUpdateAddOnDefinition_Call{Call: _e.mock.On("WaypointServiceUpdateAddOnDefinition",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateAddOnDefinition_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateAddOnDefinitionParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateAddOnDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateAddOnDefinitionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAddOnDefinition_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateAddOnDefinitionOK, _a1 error) *MockClientService_WaypointServiceUpdateAddOnDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAddOnDefinition_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateAddOnDefinitionParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnDefinitionOK, error)) *MockClientService_WaypointServiceUpdateAddOnDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateAddOnDefinition2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateAddOnDefinition2(params *waypoint_service.WaypointServiceUpdateAddOnDefinition2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnDefinition2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateAddOnDefinition2")
	}

	var r0 *waypoint_service.WaypointServiceUpdateAddOnDefinition2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnDefinition2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateAddOnDefinition2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateAddOnDefinition2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateAddOnDefinition2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateAddOnDefinition2'
type MockClientService_WaypointServiceUpdateAddOnDefinition2_Call struct {
	*mock.Call
}

// WaypointServiceUpdateAddOnDefinition2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateAddOnDefinition2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateAddOnDefinition2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateAddOnDefinition2_Call {
	return &MockClientService_WaypointServiceUpdateAddOnDefinition2_Call{Call: _e.mock.On("WaypointServiceUpdateAddOnDefinition2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateAddOnDefinition2_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateAddOnDefinition2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateAddOnDefinition2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateAddOnDefinition2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAddOnDefinition2_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateAddOnDefinition2OK, _a1 error) *MockClientService_WaypointServiceUpdateAddOnDefinition2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAddOnDefinition2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateAddOnDefinition2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAddOnDefinition2OK, error)) *MockClientService_WaypointServiceUpdateAddOnDefinition2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateAgentGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateAgentGroup(params *waypoint_service.WaypointServiceUpdateAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAgentGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateAgentGroup")
	}

	var r0 *waypoint_service.WaypointServiceUpdateAgentGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAgentGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateAgentGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateAgentGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateAgentGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateAgentGroup'
type MockClientService_WaypointServiceUpdateAgentGroup_Call struct {
	*mock.Call
}

// WaypointServiceUpdateAgentGroup is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateAgentGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateAgentGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateAgentGroup_Call {
	return &MockClientService_WaypointServiceUpdateAgentGroup_Call{Call: _e.mock.On("WaypointServiceUpdateAgentGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateAgentGroup_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateAgentGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateAgentGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateAgentGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAgentGroup_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateAgentGroupOK, _a1 error) *MockClientService_WaypointServiceUpdateAgentGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateAgentGroup_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateAgentGroupParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateAgentGroupOK, error)) *MockClientService_WaypointServiceUpdateAgentGroup_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplication provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplication(params *waypoint_service.WaypointServiceUpdateApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplication")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplicationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplicationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplicationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplication'
type MockClientService_WaypointServiceUpdateApplication_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplication is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplicationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplication(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplication_Call {
	return &MockClientService_WaypointServiceUpdateApplication_Call{Call: _e.mock.On("WaypointServiceUpdateApplication",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplication_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplicationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplication_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplicationOK, _a1 error) *MockClientService_WaypointServiceUpdateApplication_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplication_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplicationParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationOK, error)) *MockClientService_WaypointServiceUpdateApplication_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplication2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplication2(params *waypoint_service.WaypointServiceUpdateApplication2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplication2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplication2")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplication2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplication2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplication2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplication2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplication2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplication2'
type MockClientService_WaypointServiceUpdateApplication2_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplication2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplication2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplication2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplication2_Call {
	return &MockClientService_WaypointServiceUpdateApplication2_Call{Call: _e.mock.On("WaypointServiceUpdateApplication2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplication2_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplication2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplication2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplication2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplication2_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplication2OK, _a1 error) *MockClientService_WaypointServiceUpdateApplication2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplication2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplication2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplication2OK, error)) *MockClientService_WaypointServiceUpdateApplication2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplicationTemplate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplicationTemplate(params *waypoint_service.WaypointServiceUpdateApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplicationTemplate")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplicationTemplateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplicationTemplateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplicationTemplateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplicationTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplicationTemplate'
type MockClientService_WaypointServiceUpdateApplicationTemplate_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplicationTemplate is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplicationTemplateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplicationTemplate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplicationTemplate_Call {
	return &MockClientService_WaypointServiceUpdateApplicationTemplate_Call{Call: _e.mock.On("WaypointServiceUpdateApplicationTemplate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplicationTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplicationTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplicationTemplateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplicationTemplateOK, _a1 error) *MockClientService_WaypointServiceUpdateApplicationTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplicationTemplateParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplateOK, error)) *MockClientService_WaypointServiceUpdateApplicationTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplicationTemplate2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplicationTemplate2(params *waypoint_service.WaypointServiceUpdateApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplicationTemplate2")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplicationTemplate2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplicationTemplate2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplicationTemplate2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplicationTemplate2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplicationTemplate2'
type MockClientService_WaypointServiceUpdateApplicationTemplate2_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplicationTemplate2 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplicationTemplate2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplicationTemplate2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplicationTemplate2_Call {
	return &MockClientService_WaypointServiceUpdateApplicationTemplate2_Call{Call: _e.mock.On("WaypointServiceUpdateApplicationTemplate2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate2_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplicationTemplate2Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplicationTemplate2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplicationTemplate2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate2_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplicationTemplate2OK, _a1 error) *MockClientService_WaypointServiceUpdateApplicationTemplate2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate2_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplicationTemplate2Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate2OK, error)) *MockClientService_WaypointServiceUpdateApplicationTemplate2_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplicationTemplate3 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplicationTemplate3(params *waypoint_service.WaypointServiceUpdateApplicationTemplate3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate3OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplicationTemplate3")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplicationTemplate3OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate3OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplicationTemplate3OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplicationTemplate3OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplicationTemplate3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplicationTemplate3'
type MockClientService_WaypointServiceUpdateApplicationTemplate3_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplicationTemplate3 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplicationTemplate3Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplicationTemplate3(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplicationTemplate3_Call {
	return &MockClientService_WaypointServiceUpdateApplicationTemplate3_Call{Call: _e.mock.On("WaypointServiceUpdateApplicationTemplate3",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate3_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplicationTemplate3Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplicationTemplate3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplicationTemplate3Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate3_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplicationTemplate3OK, _a1 error) *MockClientService_WaypointServiceUpdateApplicationTemplate3_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate3_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplicationTemplate3Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate3OK, error)) *MockClientService_WaypointServiceUpdateApplicationTemplate3_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplicationTemplate4 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplicationTemplate4(params *waypoint_service.WaypointServiceUpdateApplicationTemplate4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate4OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplicationTemplate4")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplicationTemplate4OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate4OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplicationTemplate4OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplicationTemplate4OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplicationTemplate4_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplicationTemplate4'
type MockClientService_WaypointServiceUpdateApplicationTemplate4_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplicationTemplate4 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplicationTemplate4Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplicationTemplate4(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplicationTemplate4_Call {
	return &MockClientService_WaypointServiceUpdateApplicationTemplate4_Call{Call: _e.mock.On("WaypointServiceUpdateApplicationTemplate4",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate4_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplicationTemplate4Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplicationTemplate4_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplicationTemplate4Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate4_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplicationTemplate4OK, _a1 error) *MockClientService_WaypointServiceUpdateApplicationTemplate4_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate4_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplicationTemplate4Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate4OK, error)) *MockClientService_WaypointServiceUpdateApplicationTemplate4_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplicationTemplate5 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplicationTemplate5(params *waypoint_service.WaypointServiceUpdateApplicationTemplate5Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate5OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplicationTemplate5")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplicationTemplate5OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate5Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate5OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate5Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplicationTemplate5OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplicationTemplate5OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate5Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplicationTemplate5_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplicationTemplate5'
type MockClientService_WaypointServiceUpdateApplicationTemplate5_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplicationTemplate5 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplicationTemplate5Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplicationTemplate5(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplicationTemplate5_Call {
	return &MockClientService_WaypointServiceUpdateApplicationTemplate5_Call{Call: _e.mock.On("WaypointServiceUpdateApplicationTemplate5",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate5_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplicationTemplate5Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplicationTemplate5_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplicationTemplate5Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate5_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplicationTemplate5OK, _a1 error) *MockClientService_WaypointServiceUpdateApplicationTemplate5_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate5_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplicationTemplate5Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate5OK, error)) *MockClientService_WaypointServiceUpdateApplicationTemplate5_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateApplicationTemplate6 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateApplicationTemplate6(params *waypoint_service.WaypointServiceUpdateApplicationTemplate6Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate6OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateApplicationTemplate6")
	}

	var r0 *waypoint_service.WaypointServiceUpdateApplicationTemplate6OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate6Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate6OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate6Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateApplicationTemplate6OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateApplicationTemplate6OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateApplicationTemplate6Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateApplicationTemplate6_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateApplicationTemplate6'
type MockClientService_WaypointServiceUpdateApplicationTemplate6_Call struct {
	*mock.Call
}

// WaypointServiceUpdateApplicationTemplate6 is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateApplicationTemplate6Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateApplicationTemplate6(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateApplicationTemplate6_Call {
	return &MockClientService_WaypointServiceUpdateApplicationTemplate6_Call{Call: _e.mock.On("WaypointServiceUpdateApplicationTemplate6",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate6_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateApplicationTemplate6Params, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateApplicationTemplate6_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateApplicationTemplate6Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate6_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateApplicationTemplate6OK, _a1 error) *MockClientService_WaypointServiceUpdateApplicationTemplate6_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateApplicationTemplate6_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateApplicationTemplate6Params, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateApplicationTemplate6OK, error)) *MockClientService_WaypointServiceUpdateApplicationTemplate6_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateTFCConfig provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateTFCConfig(params *waypoint_service.WaypointServiceUpdateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateTFCConfigOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateTFCConfig")
	}

	var r0 *waypoint_service.WaypointServiceUpdateTFCConfigOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateTFCConfigOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateTFCConfigOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateTFCConfigOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateTFCConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateTFCConfig'
type MockClientService_WaypointServiceUpdateTFCConfig_Call struct {
	*mock.Call
}

// WaypointServiceUpdateTFCConfig is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateTFCConfigParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateTFCConfig(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateTFCConfig_Call {
	return &MockClientService_WaypointServiceUpdateTFCConfig_Call{Call: _e.mock.On("WaypointServiceUpdateTFCConfig",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateTFCConfig_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateTFCConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateTFCConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateTFCConfigParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateTFCConfig_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateTFCConfigOK, _a1 error) *MockClientService_WaypointServiceUpdateTFCConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateTFCConfig_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateTFCConfigParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateTFCConfigOK, error)) *MockClientService_WaypointServiceUpdateTFCConfig_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpdateVariable provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpdateVariable(params *waypoint_service.WaypointServiceUpdateVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateVariableOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpdateVariable")
	}

	var r0 *waypoint_service.WaypointServiceUpdateVariableOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateVariableOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpdateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpdateVariableOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpdateVariableOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpdateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpdateVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpdateVariable'
type MockClientService_WaypointServiceUpdateVariable_Call struct {
	*mock.Call
}

// WaypointServiceUpdateVariable is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpdateVariableParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpdateVariable(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpdateVariable_Call {
	return &MockClientService_WaypointServiceUpdateVariable_Call{Call: _e.mock.On("WaypointServiceUpdateVariable",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpdateVariable_Call) Run(run func(params *waypoint_service.WaypointServiceUpdateVariableParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpdateVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpdateVariableParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateVariable_Call) Return(_a0 *waypoint_service.WaypointServiceUpdateVariableOK, _a1 error) *MockClientService_WaypointServiceUpdateVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpdateVariable_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpdateVariableParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpdateVariableOK, error)) *MockClientService_WaypointServiceUpdateVariable_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceUpgradeApplicationTFWorkspace provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceUpgradeApplicationTFWorkspace(params *waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceUpgradeApplicationTFWorkspace")
	}

	var r0 *waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceUpgradeApplicationTFWorkspace'
type MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call struct {
	*mock.Call
}

// WaypointServiceUpgradeApplicationTFWorkspace is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceUpgradeApplicationTFWorkspace(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call {
	return &MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call{Call: _e.mock.On("WaypointServiceUpgradeApplicationTFWorkspace",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call) Run(run func(params *waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call) Return(_a0 *waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceOK, _a1 error) *MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceUpgradeApplicationTFWorkspaceOK, error)) *MockClientService_WaypointServiceUpgradeApplicationTFWorkspace_Call {
	_c.Call.Return(run)
	return _c
}

// WaypointServiceValidateAgentGroups provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) WaypointServiceValidateAgentGroups(params *waypoint_service.WaypointServiceValidateAgentGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceValidateAgentGroupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WaypointServiceValidateAgentGroups")
	}

	var r0 *waypoint_service.WaypointServiceValidateAgentGroupsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceValidateAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceValidateAgentGroupsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*waypoint_service.WaypointServiceValidateAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) *waypoint_service.WaypointServiceValidateAgentGroupsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*waypoint_service.WaypointServiceValidateAgentGroupsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*waypoint_service.WaypointServiceValidateAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_WaypointServiceValidateAgentGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaypointServiceValidateAgentGroups'
type MockClientService_WaypointServiceValidateAgentGroups_Call struct {
	*mock.Call
}

// WaypointServiceValidateAgentGroups is a helper method to define mock.On call
//   - params *waypoint_service.WaypointServiceValidateAgentGroupsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...waypoint_service.ClientOption
func (_e *MockClientService_Expecter) WaypointServiceValidateAgentGroups(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_WaypointServiceValidateAgentGroups_Call {
	return &MockClientService_WaypointServiceValidateAgentGroups_Call{Call: _e.mock.On("WaypointServiceValidateAgentGroups",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_WaypointServiceValidateAgentGroups_Call) Run(run func(params *waypoint_service.WaypointServiceValidateAgentGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...waypoint_service.ClientOption)) *MockClientService_WaypointServiceValidateAgentGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]waypoint_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(waypoint_service.ClientOption)
			}
		}
		run(args[0].(*waypoint_service.WaypointServiceValidateAgentGroupsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_WaypointServiceValidateAgentGroups_Call) Return(_a0 *waypoint_service.WaypointServiceValidateAgentGroupsOK, _a1 error) *MockClientService_WaypointServiceValidateAgentGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_WaypointServiceValidateAgentGroups_Call) RunAndReturn(run func(*waypoint_service.WaypointServiceValidateAgentGroupsParams, runtime.ClientAuthInfoWriter, ...waypoint_service.ClientOption) (*waypoint_service.WaypointServiceValidateAgentGroupsOK, error)) *MockClientService_WaypointServiceValidateAgentGroups_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
