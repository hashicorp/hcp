// Code generated by mockery. DO NOT EDIT.

package mock_s_s_o_management_service

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	s_s_o_management_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-iam/stable/2019-12-10/client/s_s_o_management_service"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// SSOManagementServiceCreateSSOConfiguration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceCreateSSOConfiguration(params *s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceCreateSSOConfiguration")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceCreateSSOConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceCreateSSOConfiguration'
type MockClientService_SSOManagementServiceCreateSSOConfiguration_Call struct {
	*mock.Call
}

// SSOManagementServiceCreateSSOConfiguration is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceCreateSSOConfiguration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceCreateSSOConfiguration_Call {
	return &MockClientService_SSOManagementServiceCreateSSOConfiguration_Call{Call: _e.mock.On("SSOManagementServiceCreateSSOConfiguration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceCreateSSOConfiguration_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceCreateSSOConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceCreateSSOConfiguration_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationOK, _a1 error) *MockClientService_SSOManagementServiceCreateSSOConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceCreateSSOConfiguration_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceCreateSSOConfigurationOK, error)) *MockClientService_SSOManagementServiceCreateSSOConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceDeleteSSOConfiguration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceDeleteSSOConfiguration(params *s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceDeleteSSOConfiguration")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceDeleteSSOConfiguration'
type MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call struct {
	*mock.Call
}

// SSOManagementServiceDeleteSSOConfiguration is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceDeleteSSOConfiguration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call {
	return &MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call{Call: _e.mock.On("SSOManagementServiceDeleteSSOConfiguration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationOK, _a1 error) *MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceDeleteSSOConfigurationOK, error)) *MockClientService_SSOManagementServiceDeleteSSOConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceGetPreconfigurationData provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceGetPreconfigurationData(params *s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceGetPreconfigurationData")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceGetPreconfigurationData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceGetPreconfigurationData'
type MockClientService_SSOManagementServiceGetPreconfigurationData_Call struct {
	*mock.Call
}

// SSOManagementServiceGetPreconfigurationData is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceGetPreconfigurationData(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceGetPreconfigurationData_Call {
	return &MockClientService_SSOManagementServiceGetPreconfigurationData_Call{Call: _e.mock.On("SSOManagementServiceGetPreconfigurationData",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceGetPreconfigurationData_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceGetPreconfigurationData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceGetPreconfigurationData_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataOK, _a1 error) *MockClientService_SSOManagementServiceGetPreconfigurationData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceGetPreconfigurationData_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetPreconfigurationDataOK, error)) *MockClientService_SSOManagementServiceGetPreconfigurationData_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceGetSSOConfiguration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceGetSSOConfiguration(params *s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceGetSSOConfiguration")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceGetSSOConfigurationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceGetSSOConfigurationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceGetSSOConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceGetSSOConfiguration'
type MockClientService_SSOManagementServiceGetSSOConfiguration_Call struct {
	*mock.Call
}

// SSOManagementServiceGetSSOConfiguration is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceGetSSOConfiguration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceGetSSOConfiguration_Call {
	return &MockClientService_SSOManagementServiceGetSSOConfiguration_Call{Call: _e.mock.On("SSOManagementServiceGetSSOConfiguration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceGetSSOConfiguration_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceGetSSOConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceGetSSOConfiguration_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceGetSSOConfigurationOK, _a1 error) *MockClientService_SSOManagementServiceGetSSOConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceGetSSOConfiguration_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetSSOConfigurationOK, error)) *MockClientService_SSOManagementServiceGetSSOConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceGetSSOType provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceGetSSOType(params *s_s_o_management_service.SSOManagementServiceGetSSOTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetSSOTypeOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceGetSSOType")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceGetSSOTypeOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceGetSSOTypeParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetSSOTypeOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceGetSSOTypeParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceGetSSOTypeOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceGetSSOTypeOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceGetSSOTypeParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceGetSSOType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceGetSSOType'
type MockClientService_SSOManagementServiceGetSSOType_Call struct {
	*mock.Call
}

// SSOManagementServiceGetSSOType is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceGetSSOTypeParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceGetSSOType(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceGetSSOType_Call {
	return &MockClientService_SSOManagementServiceGetSSOType_Call{Call: _e.mock.On("SSOManagementServiceGetSSOType",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceGetSSOType_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceGetSSOTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceGetSSOType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceGetSSOTypeParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceGetSSOType_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceGetSSOTypeOK, _a1 error) *MockClientService_SSOManagementServiceGetSSOType_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceGetSSOType_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceGetSSOTypeParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceGetSSOTypeOK, error)) *MockClientService_SSOManagementServiceGetSSOType_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceListSSOConfigurations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceListSSOConfigurations(params *s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceListSSOConfigurations")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceListSSOConfigurationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceListSSOConfigurationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceListSSOConfigurations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceListSSOConfigurations'
type MockClientService_SSOManagementServiceListSSOConfigurations_Call struct {
	*mock.Call
}

// SSOManagementServiceListSSOConfigurations is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceListSSOConfigurations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceListSSOConfigurations_Call {
	return &MockClientService_SSOManagementServiceListSSOConfigurations_Call{Call: _e.mock.On("SSOManagementServiceListSSOConfigurations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceListSSOConfigurations_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceListSSOConfigurations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceListSSOConfigurations_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceListSSOConfigurationsOK, _a1 error) *MockClientService_SSOManagementServiceListSSOConfigurations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceListSSOConfigurations_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceListSSOConfigurationsOK, error)) *MockClientService_SSOManagementServiceListSSOConfigurations_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceUpdateSSOConfiguration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceUpdateSSOConfiguration(params *s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceUpdateSSOConfiguration")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceUpdateSSOConfiguration'
type MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call struct {
	*mock.Call
}

// SSOManagementServiceUpdateSSOConfiguration is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceUpdateSSOConfiguration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call {
	return &MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call{Call: _e.mock.On("SSOManagementServiceUpdateSSOConfiguration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationOK, _a1 error) *MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceUpdateSSOConfigurationOK, error)) *MockClientService_SSOManagementServiceUpdateSSOConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceVerifyDomainOwnership provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceVerifyDomainOwnership(params *s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceVerifyDomainOwnership")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceVerifyDomainOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceVerifyDomainOwnership'
type MockClientService_SSOManagementServiceVerifyDomainOwnership_Call struct {
	*mock.Call
}

// SSOManagementServiceVerifyDomainOwnership is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceVerifyDomainOwnership(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceVerifyDomainOwnership_Call {
	return &MockClientService_SSOManagementServiceVerifyDomainOwnership_Call{Call: _e.mock.On("SSOManagementServiceVerifyDomainOwnership",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceVerifyDomainOwnership_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceVerifyDomainOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceVerifyDomainOwnership_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipOK, _a1 error) *MockClientService_SSOManagementServiceVerifyDomainOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceVerifyDomainOwnership_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceVerifyDomainOwnershipOK, error)) *MockClientService_SSOManagementServiceVerifyDomainOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// SSOManagementServiceVerifySSODomainOwnership provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SSOManagementServiceVerifySSODomainOwnership(params *s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SSOManagementServiceVerifySSODomainOwnership")
	}

	var r0 *s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) *s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SSOManagementServiceVerifySSODomainOwnership'
type MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call struct {
	*mock.Call
}

// SSOManagementServiceVerifySSODomainOwnership is a helper method to define mock.On call
//   - params *s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...s_s_o_management_service.ClientOption
func (_e *MockClientService_Expecter) SSOManagementServiceVerifySSODomainOwnership(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call {
	return &MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call{Call: _e.mock.On("SSOManagementServiceVerifySSODomainOwnership",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call) Run(run func(params *s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams, authInfo runtime.ClientAuthInfoWriter, opts ...s_s_o_management_service.ClientOption)) *MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]s_s_o_management_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(s_s_o_management_service.ClientOption)
			}
		}
		run(args[0].(*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call) Return(_a0 *s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipOK, _a1 error) *MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call) RunAndReturn(run func(*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipParams, runtime.ClientAuthInfoWriter, ...s_s_o_management_service.ClientOption) (*s_s_o_management_service.SSOManagementServiceVerifySSODomainOwnershipOK, error)) *MockClientService_SSOManagementServiceVerifySSODomainOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
