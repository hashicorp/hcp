// Code generated by mockery. DO NOT EDIT.

package mock_profile_service

import (
	runtime "github.com/go-openapi/runtime"
	profile_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-iam/stable/2019-12-10/client/profile_service"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// ProfileServiceConfirmMFAEnrollment provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProfileServiceConfirmMFAEnrollment(params *profile_service.ProfileServiceConfirmMFAEnrollmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption) (*profile_service.ProfileServiceConfirmMFAEnrollmentOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProfileServiceConfirmMFAEnrollment")
	}

	var r0 *profile_service.ProfileServiceConfirmMFAEnrollmentOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceConfirmMFAEnrollmentParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceConfirmMFAEnrollmentOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceConfirmMFAEnrollmentParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) *profile_service.ProfileServiceConfirmMFAEnrollmentOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile_service.ProfileServiceConfirmMFAEnrollmentOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*profile_service.ProfileServiceConfirmMFAEnrollmentParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProfileServiceConfirmMFAEnrollment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileServiceConfirmMFAEnrollment'
type MockClientService_ProfileServiceConfirmMFAEnrollment_Call struct {
	*mock.Call
}

// ProfileServiceConfirmMFAEnrollment is a helper method to define mock.On call
//   - params *profile_service.ProfileServiceConfirmMFAEnrollmentParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...profile_service.ClientOption
func (_e *MockClientService_Expecter) ProfileServiceConfirmMFAEnrollment(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProfileServiceConfirmMFAEnrollment_Call {
	return &MockClientService_ProfileServiceConfirmMFAEnrollment_Call{Call: _e.mock.On("ProfileServiceConfirmMFAEnrollment",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProfileServiceConfirmMFAEnrollment_Call) Run(run func(params *profile_service.ProfileServiceConfirmMFAEnrollmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption)) *MockClientService_ProfileServiceConfirmMFAEnrollment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]profile_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(profile_service.ClientOption)
			}
		}
		run(args[0].(*profile_service.ProfileServiceConfirmMFAEnrollmentParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProfileServiceConfirmMFAEnrollment_Call) Return(_a0 *profile_service.ProfileServiceConfirmMFAEnrollmentOK, _a1 error) *MockClientService_ProfileServiceConfirmMFAEnrollment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProfileServiceConfirmMFAEnrollment_Call) RunAndReturn(run func(*profile_service.ProfileServiceConfirmMFAEnrollmentParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceConfirmMFAEnrollmentOK, error)) *MockClientService_ProfileServiceConfirmMFAEnrollment_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileServiceDisableMFA provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProfileServiceDisableMFA(params *profile_service.ProfileServiceDisableMFAParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption) (*profile_service.ProfileServiceDisableMFAOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProfileServiceDisableMFA")
	}

	var r0 *profile_service.ProfileServiceDisableMFAOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceDisableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceDisableMFAOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceDisableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) *profile_service.ProfileServiceDisableMFAOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile_service.ProfileServiceDisableMFAOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*profile_service.ProfileServiceDisableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProfileServiceDisableMFA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileServiceDisableMFA'
type MockClientService_ProfileServiceDisableMFA_Call struct {
	*mock.Call
}

// ProfileServiceDisableMFA is a helper method to define mock.On call
//   - params *profile_service.ProfileServiceDisableMFAParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...profile_service.ClientOption
func (_e *MockClientService_Expecter) ProfileServiceDisableMFA(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProfileServiceDisableMFA_Call {
	return &MockClientService_ProfileServiceDisableMFA_Call{Call: _e.mock.On("ProfileServiceDisableMFA",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProfileServiceDisableMFA_Call) Run(run func(params *profile_service.ProfileServiceDisableMFAParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption)) *MockClientService_ProfileServiceDisableMFA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]profile_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(profile_service.ClientOption)
			}
		}
		run(args[0].(*profile_service.ProfileServiceDisableMFAParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProfileServiceDisableMFA_Call) Return(_a0 *profile_service.ProfileServiceDisableMFAOK, _a1 error) *MockClientService_ProfileServiceDisableMFA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProfileServiceDisableMFA_Call) RunAndReturn(run func(*profile_service.ProfileServiceDisableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceDisableMFAOK, error)) *MockClientService_ProfileServiceDisableMFA_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileServiceEnableMFA provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProfileServiceEnableMFA(params *profile_service.ProfileServiceEnableMFAParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption) (*profile_service.ProfileServiceEnableMFAOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProfileServiceEnableMFA")
	}

	var r0 *profile_service.ProfileServiceEnableMFAOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceEnableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceEnableMFAOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceEnableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) *profile_service.ProfileServiceEnableMFAOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile_service.ProfileServiceEnableMFAOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*profile_service.ProfileServiceEnableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProfileServiceEnableMFA_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileServiceEnableMFA'
type MockClientService_ProfileServiceEnableMFA_Call struct {
	*mock.Call
}

// ProfileServiceEnableMFA is a helper method to define mock.On call
//   - params *profile_service.ProfileServiceEnableMFAParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...profile_service.ClientOption
func (_e *MockClientService_Expecter) ProfileServiceEnableMFA(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProfileServiceEnableMFA_Call {
	return &MockClientService_ProfileServiceEnableMFA_Call{Call: _e.mock.On("ProfileServiceEnableMFA",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProfileServiceEnableMFA_Call) Run(run func(params *profile_service.ProfileServiceEnableMFAParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption)) *MockClientService_ProfileServiceEnableMFA_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]profile_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(profile_service.ClientOption)
			}
		}
		run(args[0].(*profile_service.ProfileServiceEnableMFAParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProfileServiceEnableMFA_Call) Return(_a0 *profile_service.ProfileServiceEnableMFAOK, _a1 error) *MockClientService_ProfileServiceEnableMFA_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProfileServiceEnableMFA_Call) RunAndReturn(run func(*profile_service.ProfileServiceEnableMFAParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceEnableMFAOK, error)) *MockClientService_ProfileServiceEnableMFA_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileServiceGetMFAStatus provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProfileServiceGetMFAStatus(params *profile_service.ProfileServiceGetMFAStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption) (*profile_service.ProfileServiceGetMFAStatusOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProfileServiceGetMFAStatus")
	}

	var r0 *profile_service.ProfileServiceGetMFAStatusOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceGetMFAStatusParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceGetMFAStatusOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceGetMFAStatusParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) *profile_service.ProfileServiceGetMFAStatusOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile_service.ProfileServiceGetMFAStatusOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*profile_service.ProfileServiceGetMFAStatusParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProfileServiceGetMFAStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileServiceGetMFAStatus'
type MockClientService_ProfileServiceGetMFAStatus_Call struct {
	*mock.Call
}

// ProfileServiceGetMFAStatus is a helper method to define mock.On call
//   - params *profile_service.ProfileServiceGetMFAStatusParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...profile_service.ClientOption
func (_e *MockClientService_Expecter) ProfileServiceGetMFAStatus(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProfileServiceGetMFAStatus_Call {
	return &MockClientService_ProfileServiceGetMFAStatus_Call{Call: _e.mock.On("ProfileServiceGetMFAStatus",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProfileServiceGetMFAStatus_Call) Run(run func(params *profile_service.ProfileServiceGetMFAStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption)) *MockClientService_ProfileServiceGetMFAStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]profile_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(profile_service.ClientOption)
			}
		}
		run(args[0].(*profile_service.ProfileServiceGetMFAStatusParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProfileServiceGetMFAStatus_Call) Return(_a0 *profile_service.ProfileServiceGetMFAStatusOK, _a1 error) *MockClientService_ProfileServiceGetMFAStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProfileServiceGetMFAStatus_Call) RunAndReturn(run func(*profile_service.ProfileServiceGetMFAStatusParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceGetMFAStatusOK, error)) *MockClientService_ProfileServiceGetMFAStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileServiceResetPassword provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProfileServiceResetPassword(params *profile_service.ProfileServiceResetPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption) (*profile_service.ProfileServiceResetPasswordOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProfileServiceResetPassword")
	}

	var r0 *profile_service.ProfileServiceResetPasswordOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceResetPasswordParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceResetPasswordOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceResetPasswordParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) *profile_service.ProfileServiceResetPasswordOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile_service.ProfileServiceResetPasswordOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*profile_service.ProfileServiceResetPasswordParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProfileServiceResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileServiceResetPassword'
type MockClientService_ProfileServiceResetPassword_Call struct {
	*mock.Call
}

// ProfileServiceResetPassword is a helper method to define mock.On call
//   - params *profile_service.ProfileServiceResetPasswordParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...profile_service.ClientOption
func (_e *MockClientService_Expecter) ProfileServiceResetPassword(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProfileServiceResetPassword_Call {
	return &MockClientService_ProfileServiceResetPassword_Call{Call: _e.mock.On("ProfileServiceResetPassword",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProfileServiceResetPassword_Call) Run(run func(params *profile_service.ProfileServiceResetPasswordParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption)) *MockClientService_ProfileServiceResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]profile_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(profile_service.ClientOption)
			}
		}
		run(args[0].(*profile_service.ProfileServiceResetPasswordParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProfileServiceResetPassword_Call) Return(_a0 *profile_service.ProfileServiceResetPasswordOK, _a1 error) *MockClientService_ProfileServiceResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProfileServiceResetPassword_Call) RunAndReturn(run func(*profile_service.ProfileServiceResetPasswordParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceResetPasswordOK, error)) *MockClientService_ProfileServiceResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ProfileServiceSendVerificationEmail provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProfileServiceSendVerificationEmail(params *profile_service.ProfileServiceSendVerificationEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption) (*profile_service.ProfileServiceSendVerificationEmailOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProfileServiceSendVerificationEmail")
	}

	var r0 *profile_service.ProfileServiceSendVerificationEmailOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceSendVerificationEmailParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceSendVerificationEmailOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*profile_service.ProfileServiceSendVerificationEmailParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) *profile_service.ProfileServiceSendVerificationEmailOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile_service.ProfileServiceSendVerificationEmailOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*profile_service.ProfileServiceSendVerificationEmailParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProfileServiceSendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProfileServiceSendVerificationEmail'
type MockClientService_ProfileServiceSendVerificationEmail_Call struct {
	*mock.Call
}

// ProfileServiceSendVerificationEmail is a helper method to define mock.On call
//   - params *profile_service.ProfileServiceSendVerificationEmailParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...profile_service.ClientOption
func (_e *MockClientService_Expecter) ProfileServiceSendVerificationEmail(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProfileServiceSendVerificationEmail_Call {
	return &MockClientService_ProfileServiceSendVerificationEmail_Call{Call: _e.mock.On("ProfileServiceSendVerificationEmail",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProfileServiceSendVerificationEmail_Call) Run(run func(params *profile_service.ProfileServiceSendVerificationEmailParams, authInfo runtime.ClientAuthInfoWriter, opts ...profile_service.ClientOption)) *MockClientService_ProfileServiceSendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]profile_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(profile_service.ClientOption)
			}
		}
		run(args[0].(*profile_service.ProfileServiceSendVerificationEmailParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProfileServiceSendVerificationEmail_Call) Return(_a0 *profile_service.ProfileServiceSendVerificationEmailOK, _a1 error) *MockClientService_ProfileServiceSendVerificationEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProfileServiceSendVerificationEmail_Call) RunAndReturn(run func(*profile_service.ProfileServiceSendVerificationEmailParams, runtime.ClientAuthInfoWriter, ...profile_service.ClientOption) (*profile_service.ProfileServiceSendVerificationEmailOK, error)) *MockClientService_ProfileServiceSendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
