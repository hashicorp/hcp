// Code generated by mockery. DO NOT EDIT.

package mock_invitations_service

import (
	invitations_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-iam/stable/2019-12-10/client/invitations_service"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// InvitationsServiceAcceptOrganizationInvitation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) InvitationsServiceAcceptOrganizationInvitation(params *invitations_service.InvitationsServiceAcceptOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceAcceptOrganizationInvitationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvitationsServiceAcceptOrganizationInvitation")
	}

	var r0 *invitations_service.InvitationsServiceAcceptOrganizationInvitationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceAcceptOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceAcceptOrganizationInvitationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceAcceptOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) *invitations_service.InvitationsServiceAcceptOrganizationInvitationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invitations_service.InvitationsServiceAcceptOrganizationInvitationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*invitations_service.InvitationsServiceAcceptOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvitationsServiceAcceptOrganizationInvitation'
type MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call struct {
	*mock.Call
}

// InvitationsServiceAcceptOrganizationInvitation is a helper method to define mock.On call
//   - params *invitations_service.InvitationsServiceAcceptOrganizationInvitationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...invitations_service.ClientOption
func (_e *MockClientService_Expecter) InvitationsServiceAcceptOrganizationInvitation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call {
	return &MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call{Call: _e.mock.On("InvitationsServiceAcceptOrganizationInvitation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call) Run(run func(params *invitations_service.InvitationsServiceAcceptOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption)) *MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]invitations_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(invitations_service.ClientOption)
			}
		}
		run(args[0].(*invitations_service.InvitationsServiceAcceptOrganizationInvitationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call) Return(_a0 *invitations_service.InvitationsServiceAcceptOrganizationInvitationOK, _a1 error) *MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call) RunAndReturn(run func(*invitations_service.InvitationsServiceAcceptOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceAcceptOrganizationInvitationOK, error)) *MockClientService_InvitationsServiceAcceptOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// InvitationsServiceCreateOrganizationInvitations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) InvitationsServiceCreateOrganizationInvitations(params *invitations_service.InvitationsServiceCreateOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceCreateOrganizationInvitationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvitationsServiceCreateOrganizationInvitations")
	}

	var r0 *invitations_service.InvitationsServiceCreateOrganizationInvitationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceCreateOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceCreateOrganizationInvitationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceCreateOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) *invitations_service.InvitationsServiceCreateOrganizationInvitationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invitations_service.InvitationsServiceCreateOrganizationInvitationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*invitations_service.InvitationsServiceCreateOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_InvitationsServiceCreateOrganizationInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvitationsServiceCreateOrganizationInvitations'
type MockClientService_InvitationsServiceCreateOrganizationInvitations_Call struct {
	*mock.Call
}

// InvitationsServiceCreateOrganizationInvitations is a helper method to define mock.On call
//   - params *invitations_service.InvitationsServiceCreateOrganizationInvitationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...invitations_service.ClientOption
func (_e *MockClientService_Expecter) InvitationsServiceCreateOrganizationInvitations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_InvitationsServiceCreateOrganizationInvitations_Call {
	return &MockClientService_InvitationsServiceCreateOrganizationInvitations_Call{Call: _e.mock.On("InvitationsServiceCreateOrganizationInvitations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_InvitationsServiceCreateOrganizationInvitations_Call) Run(run func(params *invitations_service.InvitationsServiceCreateOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption)) *MockClientService_InvitationsServiceCreateOrganizationInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]invitations_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(invitations_service.ClientOption)
			}
		}
		run(args[0].(*invitations_service.InvitationsServiceCreateOrganizationInvitationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_InvitationsServiceCreateOrganizationInvitations_Call) Return(_a0 *invitations_service.InvitationsServiceCreateOrganizationInvitationsOK, _a1 error) *MockClientService_InvitationsServiceCreateOrganizationInvitations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_InvitationsServiceCreateOrganizationInvitations_Call) RunAndReturn(run func(*invitations_service.InvitationsServiceCreateOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceCreateOrganizationInvitationsOK, error)) *MockClientService_InvitationsServiceCreateOrganizationInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// InvitationsServiceDeleteOrganizationInvitation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) InvitationsServiceDeleteOrganizationInvitation(params *invitations_service.InvitationsServiceDeleteOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceDeleteOrganizationInvitationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvitationsServiceDeleteOrganizationInvitation")
	}

	var r0 *invitations_service.InvitationsServiceDeleteOrganizationInvitationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceDeleteOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceDeleteOrganizationInvitationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceDeleteOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) *invitations_service.InvitationsServiceDeleteOrganizationInvitationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invitations_service.InvitationsServiceDeleteOrganizationInvitationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*invitations_service.InvitationsServiceDeleteOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvitationsServiceDeleteOrganizationInvitation'
type MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call struct {
	*mock.Call
}

// InvitationsServiceDeleteOrganizationInvitation is a helper method to define mock.On call
//   - params *invitations_service.InvitationsServiceDeleteOrganizationInvitationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...invitations_service.ClientOption
func (_e *MockClientService_Expecter) InvitationsServiceDeleteOrganizationInvitation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call {
	return &MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call{Call: _e.mock.On("InvitationsServiceDeleteOrganizationInvitation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call) Run(run func(params *invitations_service.InvitationsServiceDeleteOrganizationInvitationParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption)) *MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]invitations_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(invitations_service.ClientOption)
			}
		}
		run(args[0].(*invitations_service.InvitationsServiceDeleteOrganizationInvitationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call) Return(_a0 *invitations_service.InvitationsServiceDeleteOrganizationInvitationOK, _a1 error) *MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call) RunAndReturn(run func(*invitations_service.InvitationsServiceDeleteOrganizationInvitationParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceDeleteOrganizationInvitationOK, error)) *MockClientService_InvitationsServiceDeleteOrganizationInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// InvitationsServiceGetOrganizationNameByInvitationToken provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) InvitationsServiceGetOrganizationNameByInvitationToken(params *invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvitationsServiceGetOrganizationNameByInvitationToken")
	}

	var r0 *invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) *invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvitationsServiceGetOrganizationNameByInvitationToken'
type MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call struct {
	*mock.Call
}

// InvitationsServiceGetOrganizationNameByInvitationToken is a helper method to define mock.On call
//   - params *invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...invitations_service.ClientOption
func (_e *MockClientService_Expecter) InvitationsServiceGetOrganizationNameByInvitationToken(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call {
	return &MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call{Call: _e.mock.On("InvitationsServiceGetOrganizationNameByInvitationToken",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call) Run(run func(params *invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption)) *MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]invitations_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(invitations_service.ClientOption)
			}
		}
		run(args[0].(*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call) Return(_a0 *invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenOK, _a1 error) *MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call) RunAndReturn(run func(*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceGetOrganizationNameByInvitationTokenOK, error)) *MockClientService_InvitationsServiceGetOrganizationNameByInvitationToken_Call {
	_c.Call.Return(run)
	return _c
}

// InvitationsServiceListOrganizationInvitations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) InvitationsServiceListOrganizationInvitations(params *invitations_service.InvitationsServiceListOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceListOrganizationInvitationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvitationsServiceListOrganizationInvitations")
	}

	var r0 *invitations_service.InvitationsServiceListOrganizationInvitationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceListOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceListOrganizationInvitationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*invitations_service.InvitationsServiceListOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) *invitations_service.InvitationsServiceListOrganizationInvitationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invitations_service.InvitationsServiceListOrganizationInvitationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*invitations_service.InvitationsServiceListOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_InvitationsServiceListOrganizationInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvitationsServiceListOrganizationInvitations'
type MockClientService_InvitationsServiceListOrganizationInvitations_Call struct {
	*mock.Call
}

// InvitationsServiceListOrganizationInvitations is a helper method to define mock.On call
//   - params *invitations_service.InvitationsServiceListOrganizationInvitationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...invitations_service.ClientOption
func (_e *MockClientService_Expecter) InvitationsServiceListOrganizationInvitations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_InvitationsServiceListOrganizationInvitations_Call {
	return &MockClientService_InvitationsServiceListOrganizationInvitations_Call{Call: _e.mock.On("InvitationsServiceListOrganizationInvitations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_InvitationsServiceListOrganizationInvitations_Call) Run(run func(params *invitations_service.InvitationsServiceListOrganizationInvitationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...invitations_service.ClientOption)) *MockClientService_InvitationsServiceListOrganizationInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]invitations_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(invitations_service.ClientOption)
			}
		}
		run(args[0].(*invitations_service.InvitationsServiceListOrganizationInvitationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_InvitationsServiceListOrganizationInvitations_Call) Return(_a0 *invitations_service.InvitationsServiceListOrganizationInvitationsOK, _a1 error) *MockClientService_InvitationsServiceListOrganizationInvitations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_InvitationsServiceListOrganizationInvitations_Call) RunAndReturn(run func(*invitations_service.InvitationsServiceListOrganizationInvitationsParams, runtime.ClientAuthInfoWriter, ...invitations_service.ClientOption) (*invitations_service.InvitationsServiceListOrganizationInvitationsOK, error)) *MockClientService_InvitationsServiceListOrganizationInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
