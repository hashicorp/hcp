// Code generated by mockery. DO NOT EDIT.

package mock_groups_service

import (
	groups_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-iam/stable/2019-12-10/client/groups_service"
	mock "github.com/stretchr/testify/mock"

	runtime "github.com/go-openapi/runtime"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// GroupsServiceCountGroupsForPrincipals provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceCountGroupsForPrincipals(params *groups_service.GroupsServiceCountGroupsForPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceCountGroupsForPrincipalsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceCountGroupsForPrincipals")
	}

	var r0 *groups_service.GroupsServiceCountGroupsForPrincipalsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCountGroupsForPrincipalsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCountGroupsForPrincipalsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCountGroupsForPrincipalsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceCountGroupsForPrincipalsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceCountGroupsForPrincipalsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceCountGroupsForPrincipalsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceCountGroupsForPrincipals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceCountGroupsForPrincipals'
type MockClientService_GroupsServiceCountGroupsForPrincipals_Call struct {
	*mock.Call
}

// GroupsServiceCountGroupsForPrincipals is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceCountGroupsForPrincipalsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceCountGroupsForPrincipals(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceCountGroupsForPrincipals_Call {
	return &MockClientService_GroupsServiceCountGroupsForPrincipals_Call{Call: _e.mock.On("GroupsServiceCountGroupsForPrincipals",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceCountGroupsForPrincipals_Call) Run(run func(params *groups_service.GroupsServiceCountGroupsForPrincipalsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceCountGroupsForPrincipals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceCountGroupsForPrincipalsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceCountGroupsForPrincipals_Call) Return(_a0 *groups_service.GroupsServiceCountGroupsForPrincipalsOK, _a1 error) *MockClientService_GroupsServiceCountGroupsForPrincipals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceCountGroupsForPrincipals_Call) RunAndReturn(run func(*groups_service.GroupsServiceCountGroupsForPrincipalsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCountGroupsForPrincipalsOK, error)) *MockClientService_GroupsServiceCountGroupsForPrincipals_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceCountMembersForGroups provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceCountMembersForGroups(params *groups_service.GroupsServiceCountMembersForGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceCountMembersForGroupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceCountMembersForGroups")
	}

	var r0 *groups_service.GroupsServiceCountMembersForGroupsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCountMembersForGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCountMembersForGroupsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCountMembersForGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceCountMembersForGroupsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceCountMembersForGroupsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceCountMembersForGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceCountMembersForGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceCountMembersForGroups'
type MockClientService_GroupsServiceCountMembersForGroups_Call struct {
	*mock.Call
}

// GroupsServiceCountMembersForGroups is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceCountMembersForGroupsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceCountMembersForGroups(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceCountMembersForGroups_Call {
	return &MockClientService_GroupsServiceCountMembersForGroups_Call{Call: _e.mock.On("GroupsServiceCountMembersForGroups",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceCountMembersForGroups_Call) Run(run func(params *groups_service.GroupsServiceCountMembersForGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceCountMembersForGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceCountMembersForGroupsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceCountMembersForGroups_Call) Return(_a0 *groups_service.GroupsServiceCountMembersForGroupsOK, _a1 error) *MockClientService_GroupsServiceCountMembersForGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceCountMembersForGroups_Call) RunAndReturn(run func(*groups_service.GroupsServiceCountMembersForGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCountMembersForGroupsOK, error)) *MockClientService_GroupsServiceCountMembersForGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceCountOrganizationGroups provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceCountOrganizationGroups(params *groups_service.GroupsServiceCountOrganizationGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceCountOrganizationGroupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceCountOrganizationGroups")
	}

	var r0 *groups_service.GroupsServiceCountOrganizationGroupsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCountOrganizationGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCountOrganizationGroupsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCountOrganizationGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceCountOrganizationGroupsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceCountOrganizationGroupsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceCountOrganizationGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceCountOrganizationGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceCountOrganizationGroups'
type MockClientService_GroupsServiceCountOrganizationGroups_Call struct {
	*mock.Call
}

// GroupsServiceCountOrganizationGroups is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceCountOrganizationGroupsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceCountOrganizationGroups(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceCountOrganizationGroups_Call {
	return &MockClientService_GroupsServiceCountOrganizationGroups_Call{Call: _e.mock.On("GroupsServiceCountOrganizationGroups",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceCountOrganizationGroups_Call) Run(run func(params *groups_service.GroupsServiceCountOrganizationGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceCountOrganizationGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceCountOrganizationGroupsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceCountOrganizationGroups_Call) Return(_a0 *groups_service.GroupsServiceCountOrganizationGroupsOK, _a1 error) *MockClientService_GroupsServiceCountOrganizationGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceCountOrganizationGroups_Call) RunAndReturn(run func(*groups_service.GroupsServiceCountOrganizationGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCountOrganizationGroupsOK, error)) *MockClientService_GroupsServiceCountOrganizationGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceCreateGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceCreateGroup(params *groups_service.GroupsServiceCreateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceCreateGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceCreateGroup")
	}

	var r0 *groups_service.GroupsServiceCreateGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCreateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCreateGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceCreateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceCreateGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceCreateGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceCreateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceCreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceCreateGroup'
type MockClientService_GroupsServiceCreateGroup_Call struct {
	*mock.Call
}

// GroupsServiceCreateGroup is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceCreateGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceCreateGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceCreateGroup_Call {
	return &MockClientService_GroupsServiceCreateGroup_Call{Call: _e.mock.On("GroupsServiceCreateGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceCreateGroup_Call) Run(run func(params *groups_service.GroupsServiceCreateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceCreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceCreateGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceCreateGroup_Call) Return(_a0 *groups_service.GroupsServiceCreateGroupOK, _a1 error) *MockClientService_GroupsServiceCreateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceCreateGroup_Call) RunAndReturn(run func(*groups_service.GroupsServiceCreateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceCreateGroupOK, error)) *MockClientService_GroupsServiceCreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceDeleteGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceDeleteGroup(params *groups_service.GroupsServiceDeleteGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceDeleteGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceDeleteGroup")
	}

	var r0 *groups_service.GroupsServiceDeleteGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceDeleteGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceDeleteGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceDeleteGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceDeleteGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceDeleteGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceDeleteGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceDeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceDeleteGroup'
type MockClientService_GroupsServiceDeleteGroup_Call struct {
	*mock.Call
}

// GroupsServiceDeleteGroup is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceDeleteGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceDeleteGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceDeleteGroup_Call {
	return &MockClientService_GroupsServiceDeleteGroup_Call{Call: _e.mock.On("GroupsServiceDeleteGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceDeleteGroup_Call) Run(run func(params *groups_service.GroupsServiceDeleteGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceDeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceDeleteGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceDeleteGroup_Call) Return(_a0 *groups_service.GroupsServiceDeleteGroupOK, _a1 error) *MockClientService_GroupsServiceDeleteGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceDeleteGroup_Call) RunAndReturn(run func(*groups_service.GroupsServiceDeleteGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceDeleteGroupOK, error)) *MockClientService_GroupsServiceDeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceGetGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceGetGroup(params *groups_service.GroupsServiceGetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceGetGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceGetGroup")
	}

	var r0 *groups_service.GroupsServiceGetGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceGetGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceGetGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceGetGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceGetGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceGetGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceGetGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceGetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceGetGroup'
type MockClientService_GroupsServiceGetGroup_Call struct {
	*mock.Call
}

// GroupsServiceGetGroup is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceGetGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceGetGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceGetGroup_Call {
	return &MockClientService_GroupsServiceGetGroup_Call{Call: _e.mock.On("GroupsServiceGetGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceGetGroup_Call) Run(run func(params *groups_service.GroupsServiceGetGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceGetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceGetGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceGetGroup_Call) Return(_a0 *groups_service.GroupsServiceGetGroupOK, _a1 error) *MockClientService_GroupsServiceGetGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceGetGroup_Call) RunAndReturn(run func(*groups_service.GroupsServiceGetGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceGetGroupOK, error)) *MockClientService_GroupsServiceGetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceListGroupMembers provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceListGroupMembers(params *groups_service.GroupsServiceListGroupMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceListGroupMembersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceListGroupMembers")
	}

	var r0 *groups_service.GroupsServiceListGroupMembersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceListGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceListGroupMembersOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceListGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceListGroupMembersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceListGroupMembersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceListGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceListGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceListGroupMembers'
type MockClientService_GroupsServiceListGroupMembers_Call struct {
	*mock.Call
}

// GroupsServiceListGroupMembers is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceListGroupMembersParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceListGroupMembers(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceListGroupMembers_Call {
	return &MockClientService_GroupsServiceListGroupMembers_Call{Call: _e.mock.On("GroupsServiceListGroupMembers",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceListGroupMembers_Call) Run(run func(params *groups_service.GroupsServiceListGroupMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceListGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceListGroupMembersParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceListGroupMembers_Call) Return(_a0 *groups_service.GroupsServiceListGroupMembersOK, _a1 error) *MockClientService_GroupsServiceListGroupMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceListGroupMembers_Call) RunAndReturn(run func(*groups_service.GroupsServiceListGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceListGroupMembersOK, error)) *MockClientService_GroupsServiceListGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceListGroups provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceListGroups(params *groups_service.GroupsServiceListGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceListGroupsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceListGroups")
	}

	var r0 *groups_service.GroupsServiceListGroupsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceListGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceListGroupsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceListGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceListGroupsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceListGroupsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceListGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceListGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceListGroups'
type MockClientService_GroupsServiceListGroups_Call struct {
	*mock.Call
}

// GroupsServiceListGroups is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceListGroupsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceListGroups(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceListGroups_Call {
	return &MockClientService_GroupsServiceListGroups_Call{Call: _e.mock.On("GroupsServiceListGroups",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceListGroups_Call) Run(run func(params *groups_service.GroupsServiceListGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceListGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceListGroupsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceListGroups_Call) Return(_a0 *groups_service.GroupsServiceListGroupsOK, _a1 error) *MockClientService_GroupsServiceListGroups_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceListGroups_Call) RunAndReturn(run func(*groups_service.GroupsServiceListGroupsParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceListGroupsOK, error)) *MockClientService_GroupsServiceListGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceUpdateGroup provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceUpdateGroup(params *groups_service.GroupsServiceUpdateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceUpdateGroupOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceUpdateGroup")
	}

	var r0 *groups_service.GroupsServiceUpdateGroupOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceUpdateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceUpdateGroupOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceUpdateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceUpdateGroupOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceUpdateGroupOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceUpdateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceUpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceUpdateGroup'
type MockClientService_GroupsServiceUpdateGroup_Call struct {
	*mock.Call
}

// GroupsServiceUpdateGroup is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceUpdateGroupParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceUpdateGroup(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceUpdateGroup_Call {
	return &MockClientService_GroupsServiceUpdateGroup_Call{Call: _e.mock.On("GroupsServiceUpdateGroup",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceUpdateGroup_Call) Run(run func(params *groups_service.GroupsServiceUpdateGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceUpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceUpdateGroupParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceUpdateGroup_Call) Return(_a0 *groups_service.GroupsServiceUpdateGroupOK, _a1 error) *MockClientService_GroupsServiceUpdateGroup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceUpdateGroup_Call) RunAndReturn(run func(*groups_service.GroupsServiceUpdateGroupParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceUpdateGroupOK, error)) *MockClientService_GroupsServiceUpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GroupsServiceUpdateGroupMembers provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GroupsServiceUpdateGroupMembers(params *groups_service.GroupsServiceUpdateGroupMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption) (*groups_service.GroupsServiceUpdateGroupMembersOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GroupsServiceUpdateGroupMembers")
	}

	var r0 *groups_service.GroupsServiceUpdateGroupMembersOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceUpdateGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceUpdateGroupMembersOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*groups_service.GroupsServiceUpdateGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) *groups_service.GroupsServiceUpdateGroupMembersOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groups_service.GroupsServiceUpdateGroupMembersOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*groups_service.GroupsServiceUpdateGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GroupsServiceUpdateGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GroupsServiceUpdateGroupMembers'
type MockClientService_GroupsServiceUpdateGroupMembers_Call struct {
	*mock.Call
}

// GroupsServiceUpdateGroupMembers is a helper method to define mock.On call
//   - params *groups_service.GroupsServiceUpdateGroupMembersParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...groups_service.ClientOption
func (_e *MockClientService_Expecter) GroupsServiceUpdateGroupMembers(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GroupsServiceUpdateGroupMembers_Call {
	return &MockClientService_GroupsServiceUpdateGroupMembers_Call{Call: _e.mock.On("GroupsServiceUpdateGroupMembers",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GroupsServiceUpdateGroupMembers_Call) Run(run func(params *groups_service.GroupsServiceUpdateGroupMembersParams, authInfo runtime.ClientAuthInfoWriter, opts ...groups_service.ClientOption)) *MockClientService_GroupsServiceUpdateGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]groups_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(groups_service.ClientOption)
			}
		}
		run(args[0].(*groups_service.GroupsServiceUpdateGroupMembersParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GroupsServiceUpdateGroupMembers_Call) Return(_a0 *groups_service.GroupsServiceUpdateGroupMembersOK, _a1 error) *MockClientService_GroupsServiceUpdateGroupMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GroupsServiceUpdateGroupMembers_Call) RunAndReturn(run func(*groups_service.GroupsServiceUpdateGroupMembersParams, runtime.ClientAuthInfoWriter, ...groups_service.ClientOption) (*groups_service.GroupsServiceUpdateGroupMembersOK, error)) *MockClientService_GroupsServiceUpdateGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
