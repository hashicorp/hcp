// Code generated by mockery. DO NOT EDIT.

package mock_organization_service

import (
	runtime "github.com/go-openapi/runtime"
	organization_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-resource-manager/stable/2019-12-10/client/organization_service"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// OrganizationServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceCreate(params *organization_service.OrganizationServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceCreate")
	}

	var r0 *organization_service.OrganizationServiceCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceCreateParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceCreateParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceCreateParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceCreate'
type MockClientService_OrganizationServiceCreate_Call struct {
	*mock.Call
}

// OrganizationServiceCreate is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceCreate_Call {
	return &MockClientService_OrganizationServiceCreate_Call{Call: _e.mock.On("OrganizationServiceCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceCreate_Call) Run(run func(params *organization_service.OrganizationServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceCreate_Call) Return(_a0 *organization_service.OrganizationServiceCreateOK, _a1 error) *MockClientService_OrganizationServiceCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceCreate_Call) RunAndReturn(run func(*organization_service.OrganizationServiceCreateParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceCreateOK, error)) *MockClientService_OrganizationServiceCreate_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceGet(params *organization_service.OrganizationServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceGet")
	}

	var r0 *organization_service.OrganizationServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceGetParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceGet'
type MockClientService_OrganizationServiceGet_Call struct {
	*mock.Call
}

// OrganizationServiceGet is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceGet_Call {
	return &MockClientService_OrganizationServiceGet_Call{Call: _e.mock.On("OrganizationServiceGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceGet_Call) Run(run func(params *organization_service.OrganizationServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceGet_Call) Return(_a0 *organization_service.OrganizationServiceGetOK, _a1 error) *MockClientService_OrganizationServiceGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceGet_Call) RunAndReturn(run func(*organization_service.OrganizationServiceGetParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetOK, error)) *MockClientService_OrganizationServiceGet_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceGetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceGetIamPolicy(params *organization_service.OrganizationServiceGetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceGetIamPolicy")
	}

	var r0 *organization_service.OrganizationServiceGetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceGetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceGetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceGetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceGetIamPolicy'
type MockClientService_OrganizationServiceGetIamPolicy_Call struct {
	*mock.Call
}

// OrganizationServiceGetIamPolicy is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceGetIamPolicyParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceGetIamPolicy(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceGetIamPolicy_Call {
	return &MockClientService_OrganizationServiceGetIamPolicy_Call{Call: _e.mock.On("OrganizationServiceGetIamPolicy",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceGetIamPolicy_Call) Run(run func(params *organization_service.OrganizationServiceGetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceGetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceGetIamPolicyParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceGetIamPolicy_Call) Return(_a0 *organization_service.OrganizationServiceGetIamPolicyOK, _a1 error) *MockClientService_OrganizationServiceGetIamPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceGetIamPolicy_Call) RunAndReturn(run func(*organization_service.OrganizationServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetIamPolicyOK, error)) *MockClientService_OrganizationServiceGetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceGetRole provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceGetRole(params *organization_service.OrganizationServiceGetRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetRoleOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceGetRole")
	}

	var r0 *organization_service.OrganizationServiceGetRoleOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetRoleParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetRoleOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceGetRoleParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceGetRoleOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceGetRoleOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceGetRoleParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceGetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceGetRole'
type MockClientService_OrganizationServiceGetRole_Call struct {
	*mock.Call
}

// OrganizationServiceGetRole is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceGetRoleParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceGetRole(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceGetRole_Call {
	return &MockClientService_OrganizationServiceGetRole_Call{Call: _e.mock.On("OrganizationServiceGetRole",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceGetRole_Call) Run(run func(params *organization_service.OrganizationServiceGetRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceGetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceGetRoleParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceGetRole_Call) Return(_a0 *organization_service.OrganizationServiceGetRoleOK, _a1 error) *MockClientService_OrganizationServiceGetRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceGetRole_Call) RunAndReturn(run func(*organization_service.OrganizationServiceGetRoleParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceGetRoleOK, error)) *MockClientService_OrganizationServiceGetRole_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceList provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceList(params *organization_service.OrganizationServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceList")
	}

	var r0 *organization_service.OrganizationServiceListOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceListOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceListOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceListOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceListParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceList'
type MockClientService_OrganizationServiceList_Call struct {
	*mock.Call
}

// OrganizationServiceList is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceListParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceList(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceList_Call {
	return &MockClientService_OrganizationServiceList_Call{Call: _e.mock.On("OrganizationServiceList",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceList_Call) Run(run func(params *organization_service.OrganizationServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceListParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceList_Call) Return(_a0 *organization_service.OrganizationServiceListOK, _a1 error) *MockClientService_OrganizationServiceList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceList_Call) RunAndReturn(run func(*organization_service.OrganizationServiceListParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceListOK, error)) *MockClientService_OrganizationServiceList_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceListRoles provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceListRoles(params *organization_service.OrganizationServiceListRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceListRolesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceListRoles")
	}

	var r0 *organization_service.OrganizationServiceListRolesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListRolesParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceListRolesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceListRolesParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceListRolesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceListRolesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceListRolesParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceListRoles'
type MockClientService_OrganizationServiceListRoles_Call struct {
	*mock.Call
}

// OrganizationServiceListRoles is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceListRolesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceListRoles(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceListRoles_Call {
	return &MockClientService_OrganizationServiceListRoles_Call{Call: _e.mock.On("OrganizationServiceListRoles",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceListRoles_Call) Run(run func(params *organization_service.OrganizationServiceListRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceListRolesParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceListRoles_Call) Return(_a0 *organization_service.OrganizationServiceListRolesOK, _a1 error) *MockClientService_OrganizationServiceListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceListRoles_Call) RunAndReturn(run func(*organization_service.OrganizationServiceListRolesParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceListRolesOK, error)) *MockClientService_OrganizationServiceListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceSetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceSetIamPolicy(params *organization_service.OrganizationServiceSetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceSetIamPolicy")
	}

	var r0 *organization_service.OrganizationServiceSetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceSetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceSetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceSetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceSetIamPolicy'
type MockClientService_OrganizationServiceSetIamPolicy_Call struct {
	*mock.Call
}

// OrganizationServiceSetIamPolicy is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceSetIamPolicyParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceSetIamPolicy(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceSetIamPolicy_Call {
	return &MockClientService_OrganizationServiceSetIamPolicy_Call{Call: _e.mock.On("OrganizationServiceSetIamPolicy",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceSetIamPolicy_Call) Run(run func(params *organization_service.OrganizationServiceSetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceSetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceSetIamPolicyParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceSetIamPolicy_Call) Return(_a0 *organization_service.OrganizationServiceSetIamPolicyOK, _a1 error) *MockClientService_OrganizationServiceSetIamPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceSetIamPolicy_Call) RunAndReturn(run func(*organization_service.OrganizationServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetIamPolicyOK, error)) *MockClientService_OrganizationServiceSetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceSetName provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceSetName(params *organization_service.OrganizationServiceSetNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceSetName")
	}

	var r0 *organization_service.OrganizationServiceSetNameOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetNameParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetNameOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceSetNameParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceSetNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceSetNameOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceSetNameParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceSetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceSetName'
type MockClientService_OrganizationServiceSetName_Call struct {
	*mock.Call
}

// OrganizationServiceSetName is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceSetNameParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceSetName(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceSetName_Call {
	return &MockClientService_OrganizationServiceSetName_Call{Call: _e.mock.On("OrganizationServiceSetName",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceSetName_Call) Run(run func(params *organization_service.OrganizationServiceSetNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceSetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceSetNameParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceSetName_Call) Return(_a0 *organization_service.OrganizationServiceSetNameOK, _a1 error) *MockClientService_OrganizationServiceSetName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceSetName_Call) RunAndReturn(run func(*organization_service.OrganizationServiceSetNameParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceSetNameOK, error)) *MockClientService_OrganizationServiceSetName_Call {
	_c.Call.Return(run)
	return _c
}

// OrganizationServiceTestIamPermissions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OrganizationServiceTestIamPermissions(params *organization_service.OrganizationServiceTestIamPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption) (*organization_service.OrganizationServiceTestIamPermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OrganizationServiceTestIamPermissions")
	}

	var r0 *organization_service.OrganizationServiceTestIamPermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceTestIamPermissionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*organization_service.OrganizationServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) *organization_service.OrganizationServiceTestIamPermissionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*organization_service.OrganizationServiceTestIamPermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*organization_service.OrganizationServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OrganizationServiceTestIamPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrganizationServiceTestIamPermissions'
type MockClientService_OrganizationServiceTestIamPermissions_Call struct {
	*mock.Call
}

// OrganizationServiceTestIamPermissions is a helper method to define mock.On call
//   - params *organization_service.OrganizationServiceTestIamPermissionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...organization_service.ClientOption
func (_e *MockClientService_Expecter) OrganizationServiceTestIamPermissions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OrganizationServiceTestIamPermissions_Call {
	return &MockClientService_OrganizationServiceTestIamPermissions_Call{Call: _e.mock.On("OrganizationServiceTestIamPermissions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OrganizationServiceTestIamPermissions_Call) Run(run func(params *organization_service.OrganizationServiceTestIamPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...organization_service.ClientOption)) *MockClientService_OrganizationServiceTestIamPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]organization_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(organization_service.ClientOption)
			}
		}
		run(args[0].(*organization_service.OrganizationServiceTestIamPermissionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OrganizationServiceTestIamPermissions_Call) Return(_a0 *organization_service.OrganizationServiceTestIamPermissionsOK, _a1 error) *MockClientService_OrganizationServiceTestIamPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OrganizationServiceTestIamPermissions_Call) RunAndReturn(run func(*organization_service.OrganizationServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...organization_service.ClientOption) (*organization_service.OrganizationServiceTestIamPermissionsOK, error)) *MockClientService_OrganizationServiceTestIamPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
