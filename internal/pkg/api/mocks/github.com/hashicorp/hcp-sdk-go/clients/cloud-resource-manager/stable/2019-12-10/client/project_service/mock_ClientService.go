// Code generated by mockery. DO NOT EDIT.

package mock_project_service

import (
	runtime "github.com/go-openapi/runtime"
	project_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-resource-manager/stable/2019-12-10/client/project_service"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// ProjectServiceCreate provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceCreate(params *project_service.ProjectServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceCreateOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceCreate")
	}

	var r0 *project_service.ProjectServiceCreateOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceCreateParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceCreateOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceCreateParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceCreateOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceCreateOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceCreateParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceCreate'
type MockClientService_ProjectServiceCreate_Call struct {
	*mock.Call
}

// ProjectServiceCreate is a helper method to define mock.On call
//   - params *project_service.ProjectServiceCreateParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceCreate(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceCreate_Call {
	return &MockClientService_ProjectServiceCreate_Call{Call: _e.mock.On("ProjectServiceCreate",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceCreate_Call) Run(run func(params *project_service.ProjectServiceCreateParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceCreateParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceCreate_Call) Return(_a0 *project_service.ProjectServiceCreateOK, _a1 error) *MockClientService_ProjectServiceCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceCreate_Call) RunAndReturn(run func(*project_service.ProjectServiceCreateParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceCreateOK, error)) *MockClientService_ProjectServiceCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceDelete provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceDelete(params *project_service.ProjectServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceDeleteOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceDelete")
	}

	var r0 *project_service.ProjectServiceDeleteOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceDeleteParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceDeleteOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceDeleteParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceDeleteOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceDeleteOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceDeleteParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceDelete'
type MockClientService_ProjectServiceDelete_Call struct {
	*mock.Call
}

// ProjectServiceDelete is a helper method to define mock.On call
//   - params *project_service.ProjectServiceDeleteParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceDelete(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceDelete_Call {
	return &MockClientService_ProjectServiceDelete_Call{Call: _e.mock.On("ProjectServiceDelete",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceDelete_Call) Run(run func(params *project_service.ProjectServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceDeleteParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceDelete_Call) Return(_a0 *project_service.ProjectServiceDeleteOK, _a1 error) *MockClientService_ProjectServiceDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceDelete_Call) RunAndReturn(run func(*project_service.ProjectServiceDeleteParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceDeleteOK, error)) *MockClientService_ProjectServiceDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceGet provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceGet(params *project_service.ProjectServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceGetOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceGet")
	}

	var r0 *project_service.ProjectServiceGetOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceGetOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceGetOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceGetParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceGet'
type MockClientService_ProjectServiceGet_Call struct {
	*mock.Call
}

// ProjectServiceGet is a helper method to define mock.On call
//   - params *project_service.ProjectServiceGetParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceGet(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceGet_Call {
	return &MockClientService_ProjectServiceGet_Call{Call: _e.mock.On("ProjectServiceGet",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceGet_Call) Run(run func(params *project_service.ProjectServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceGetParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceGet_Call) Return(_a0 *project_service.ProjectServiceGetOK, _a1 error) *MockClientService_ProjectServiceGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceGet_Call) RunAndReturn(run func(*project_service.ProjectServiceGetParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetOK, error)) *MockClientService_ProjectServiceGet_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceGetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceGetIamPolicy(params *project_service.ProjectServiceGetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceGetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceGetIamPolicy")
	}

	var r0 *project_service.ProjectServiceGetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceGetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceGetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceGetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceGetIamPolicy'
type MockClientService_ProjectServiceGetIamPolicy_Call struct {
	*mock.Call
}

// ProjectServiceGetIamPolicy is a helper method to define mock.On call
//   - params *project_service.ProjectServiceGetIamPolicyParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceGetIamPolicy(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceGetIamPolicy_Call {
	return &MockClientService_ProjectServiceGetIamPolicy_Call{Call: _e.mock.On("ProjectServiceGetIamPolicy",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceGetIamPolicy_Call) Run(run func(params *project_service.ProjectServiceGetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceGetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceGetIamPolicyParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceGetIamPolicy_Call) Return(_a0 *project_service.ProjectServiceGetIamPolicyOK, _a1 error) *MockClientService_ProjectServiceGetIamPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceGetIamPolicy_Call) RunAndReturn(run func(*project_service.ProjectServiceGetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetIamPolicyOK, error)) *MockClientService_ProjectServiceGetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceGetProjectsCount provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceGetProjectsCount(params *project_service.ProjectServiceGetProjectsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceGetProjectsCountOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceGetProjectsCount")
	}

	var r0 *project_service.ProjectServiceGetProjectsCountOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetProjectsCountParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetProjectsCountOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceGetProjectsCountParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceGetProjectsCountOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceGetProjectsCountOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceGetProjectsCountParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceGetProjectsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceGetProjectsCount'
type MockClientService_ProjectServiceGetProjectsCount_Call struct {
	*mock.Call
}

// ProjectServiceGetProjectsCount is a helper method to define mock.On call
//   - params *project_service.ProjectServiceGetProjectsCountParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceGetProjectsCount(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceGetProjectsCount_Call {
	return &MockClientService_ProjectServiceGetProjectsCount_Call{Call: _e.mock.On("ProjectServiceGetProjectsCount",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceGetProjectsCount_Call) Run(run func(params *project_service.ProjectServiceGetProjectsCountParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceGetProjectsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceGetProjectsCountParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceGetProjectsCount_Call) Return(_a0 *project_service.ProjectServiceGetProjectsCountOK, _a1 error) *MockClientService_ProjectServiceGetProjectsCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceGetProjectsCount_Call) RunAndReturn(run func(*project_service.ProjectServiceGetProjectsCountParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceGetProjectsCountOK, error)) *MockClientService_ProjectServiceGetProjectsCount_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceList provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceList(params *project_service.ProjectServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceListOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceList")
	}

	var r0 *project_service.ProjectServiceListOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceListParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceListOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceListParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceListOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceListOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceListParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceList'
type MockClientService_ProjectServiceList_Call struct {
	*mock.Call
}

// ProjectServiceList is a helper method to define mock.On call
//   - params *project_service.ProjectServiceListParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceList(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceList_Call {
	return &MockClientService_ProjectServiceList_Call{Call: _e.mock.On("ProjectServiceList",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceList_Call) Run(run func(params *project_service.ProjectServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceListParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceList_Call) Return(_a0 *project_service.ProjectServiceListOK, _a1 error) *MockClientService_ProjectServiceList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceList_Call) RunAndReturn(run func(*project_service.ProjectServiceListParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceListOK, error)) *MockClientService_ProjectServiceList_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceSetDescription provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceSetDescription(params *project_service.ProjectServiceSetDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceSetDescriptionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceSetDescription")
	}

	var r0 *project_service.ProjectServiceSetDescriptionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetDescriptionParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetDescriptionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetDescriptionParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceSetDescriptionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceSetDescriptionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceSetDescriptionParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceSetDescription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceSetDescription'
type MockClientService_ProjectServiceSetDescription_Call struct {
	*mock.Call
}

// ProjectServiceSetDescription is a helper method to define mock.On call
//   - params *project_service.ProjectServiceSetDescriptionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceSetDescription(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceSetDescription_Call {
	return &MockClientService_ProjectServiceSetDescription_Call{Call: _e.mock.On("ProjectServiceSetDescription",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceSetDescription_Call) Run(run func(params *project_service.ProjectServiceSetDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceSetDescription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceSetDescriptionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceSetDescription_Call) Return(_a0 *project_service.ProjectServiceSetDescriptionOK, _a1 error) *MockClientService_ProjectServiceSetDescription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceSetDescription_Call) RunAndReturn(run func(*project_service.ProjectServiceSetDescriptionParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetDescriptionOK, error)) *MockClientService_ProjectServiceSetDescription_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceSetIamPolicy provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceSetIamPolicy(params *project_service.ProjectServiceSetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceSetIamPolicyOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceSetIamPolicy")
	}

	var r0 *project_service.ProjectServiceSetIamPolicyOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetIamPolicyOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceSetIamPolicyOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceSetIamPolicyOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceSetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceSetIamPolicy'
type MockClientService_ProjectServiceSetIamPolicy_Call struct {
	*mock.Call
}

// ProjectServiceSetIamPolicy is a helper method to define mock.On call
//   - params *project_service.ProjectServiceSetIamPolicyParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceSetIamPolicy(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceSetIamPolicy_Call {
	return &MockClientService_ProjectServiceSetIamPolicy_Call{Call: _e.mock.On("ProjectServiceSetIamPolicy",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceSetIamPolicy_Call) Run(run func(params *project_service.ProjectServiceSetIamPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceSetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceSetIamPolicyParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceSetIamPolicy_Call) Return(_a0 *project_service.ProjectServiceSetIamPolicyOK, _a1 error) *MockClientService_ProjectServiceSetIamPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceSetIamPolicy_Call) RunAndReturn(run func(*project_service.ProjectServiceSetIamPolicyParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetIamPolicyOK, error)) *MockClientService_ProjectServiceSetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceSetName provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceSetName(params *project_service.ProjectServiceSetNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceSetNameOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceSetName")
	}

	var r0 *project_service.ProjectServiceSetNameOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetNameParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetNameOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceSetNameParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceSetNameOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceSetNameOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceSetNameParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceSetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceSetName'
type MockClientService_ProjectServiceSetName_Call struct {
	*mock.Call
}

// ProjectServiceSetName is a helper method to define mock.On call
//   - params *project_service.ProjectServiceSetNameParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceSetName(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceSetName_Call {
	return &MockClientService_ProjectServiceSetName_Call{Call: _e.mock.On("ProjectServiceSetName",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceSetName_Call) Run(run func(params *project_service.ProjectServiceSetNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceSetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceSetNameParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceSetName_Call) Return(_a0 *project_service.ProjectServiceSetNameOK, _a1 error) *MockClientService_ProjectServiceSetName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceSetName_Call) RunAndReturn(run func(*project_service.ProjectServiceSetNameParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceSetNameOK, error)) *MockClientService_ProjectServiceSetName_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectServiceTestIamPermissions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ProjectServiceTestIamPermissions(params *project_service.ProjectServiceTestIamPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption) (*project_service.ProjectServiceTestIamPermissionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectServiceTestIamPermissions")
	}

	var r0 *project_service.ProjectServiceTestIamPermissionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceTestIamPermissionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*project_service.ProjectServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) *project_service.ProjectServiceTestIamPermissionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*project_service.ProjectServiceTestIamPermissionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*project_service.ProjectServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ProjectServiceTestIamPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectServiceTestIamPermissions'
type MockClientService_ProjectServiceTestIamPermissions_Call struct {
	*mock.Call
}

// ProjectServiceTestIamPermissions is a helper method to define mock.On call
//   - params *project_service.ProjectServiceTestIamPermissionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...project_service.ClientOption
func (_e *MockClientService_Expecter) ProjectServiceTestIamPermissions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ProjectServiceTestIamPermissions_Call {
	return &MockClientService_ProjectServiceTestIamPermissions_Call{Call: _e.mock.On("ProjectServiceTestIamPermissions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ProjectServiceTestIamPermissions_Call) Run(run func(params *project_service.ProjectServiceTestIamPermissionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...project_service.ClientOption)) *MockClientService_ProjectServiceTestIamPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]project_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(project_service.ClientOption)
			}
		}
		run(args[0].(*project_service.ProjectServiceTestIamPermissionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ProjectServiceTestIamPermissions_Call) Return(_a0 *project_service.ProjectServiceTestIamPermissionsOK, _a1 error) *MockClientService_ProjectServiceTestIamPermissions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ProjectServiceTestIamPermissions_Call) RunAndReturn(run func(*project_service.ProjectServiceTestIamPermissionsParams, runtime.ClientAuthInfoWriter, ...project_service.ClientOption) (*project_service.ProjectServiceTestIamPermissionsOK, error)) *MockClientService_ProjectServiceTestIamPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
