// Code generated by mockery. DO NOT EDIT.

package mock_secret_service

import (
	runtime "github.com/go-openapi/runtime"
	mock "github.com/stretchr/testify/mock"

	secret_service "github.com/hashicorp/hcp-sdk-go/clients/cloud-vault-secrets/stable/2023-06-13/client/secret_service"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// CompleteGitHubInstall provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CompleteGitHubInstall(params *secret_service.CompleteGitHubInstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CompleteGitHubInstallOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CompleteGitHubInstall")
	}

	var r0 *secret_service.CompleteGitHubInstallOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CompleteGitHubInstallParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CompleteGitHubInstallOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CompleteGitHubInstallParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CompleteGitHubInstallOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CompleteGitHubInstallOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CompleteGitHubInstallParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CompleteGitHubInstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteGitHubInstall'
type MockClientService_CompleteGitHubInstall_Call struct {
	*mock.Call
}

// CompleteGitHubInstall is a helper method to define mock.On call
//   - params *secret_service.CompleteGitHubInstallParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CompleteGitHubInstall(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CompleteGitHubInstall_Call {
	return &MockClientService_CompleteGitHubInstall_Call{Call: _e.mock.On("CompleteGitHubInstall",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CompleteGitHubInstall_Call) Run(run func(params *secret_service.CompleteGitHubInstallParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CompleteGitHubInstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CompleteGitHubInstallParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CompleteGitHubInstall_Call) Return(_a0 *secret_service.CompleteGitHubInstallOK, _a1 error) *MockClientService_CompleteGitHubInstall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CompleteGitHubInstall_Call) RunAndReturn(run func(*secret_service.CompleteGitHubInstallParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CompleteGitHubInstallOK, error)) *MockClientService_CompleteGitHubInstall_Call {
	_c.Call.Return(run)
	return _c
}

// CompleteVercelInstallation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CompleteVercelInstallation(params *secret_service.CompleteVercelInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CompleteVercelInstallationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CompleteVercelInstallation")
	}

	var r0 *secret_service.CompleteVercelInstallationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CompleteVercelInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CompleteVercelInstallationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CompleteVercelInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CompleteVercelInstallationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CompleteVercelInstallationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CompleteVercelInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CompleteVercelInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompleteVercelInstallation'
type MockClientService_CompleteVercelInstallation_Call struct {
	*mock.Call
}

// CompleteVercelInstallation is a helper method to define mock.On call
//   - params *secret_service.CompleteVercelInstallationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CompleteVercelInstallation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CompleteVercelInstallation_Call {
	return &MockClientService_CompleteVercelInstallation_Call{Call: _e.mock.On("CompleteVercelInstallation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CompleteVercelInstallation_Call) Run(run func(params *secret_service.CompleteVercelInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CompleteVercelInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CompleteVercelInstallationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CompleteVercelInstallation_Call) Return(_a0 *secret_service.CompleteVercelInstallationOK, _a1 error) *MockClientService_CompleteVercelInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CompleteVercelInstallation_Call) RunAndReturn(run func(*secret_service.CompleteVercelInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CompleteVercelInstallationOK, error)) *MockClientService_CompleteVercelInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectGitHubInstallation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ConnectGitHubInstallation(params *secret_service.ConnectGitHubInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ConnectGitHubInstallationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConnectGitHubInstallation")
	}

	var r0 *secret_service.ConnectGitHubInstallationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ConnectGitHubInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ConnectGitHubInstallationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ConnectGitHubInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ConnectGitHubInstallationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ConnectGitHubInstallationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ConnectGitHubInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ConnectGitHubInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectGitHubInstallation'
type MockClientService_ConnectGitHubInstallation_Call struct {
	*mock.Call
}

// ConnectGitHubInstallation is a helper method to define mock.On call
//   - params *secret_service.ConnectGitHubInstallationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ConnectGitHubInstallation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ConnectGitHubInstallation_Call {
	return &MockClientService_ConnectGitHubInstallation_Call{Call: _e.mock.On("ConnectGitHubInstallation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ConnectGitHubInstallation_Call) Run(run func(params *secret_service.ConnectGitHubInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ConnectGitHubInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ConnectGitHubInstallationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ConnectGitHubInstallation_Call) Return(_a0 *secret_service.ConnectGitHubInstallationOK, _a1 error) *MockClientService_ConnectGitHubInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ConnectGitHubInstallation_Call) RunAndReturn(run func(*secret_service.ConnectGitHubInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ConnectGitHubInstallationOK, error)) *MockClientService_ConnectGitHubInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateApp(params *secret_service.CreateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *secret_service.CreateAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApp'
type MockClientService_CreateApp_Call struct {
	*mock.Call
}

// CreateApp is a helper method to define mock.On call
//   - params *secret_service.CreateAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateApp_Call {
	return &MockClientService_CreateApp_Call{Call: _e.mock.On("CreateApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateApp_Call) Run(run func(params *secret_service.CreateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateApp_Call) Return(_a0 *secret_service.CreateAppOK, _a1 error) *MockClientService_CreateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateApp_Call) RunAndReturn(run func(*secret_service.CreateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppOK, error)) *MockClientService_CreateApp_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAppKVSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateAppKVSecret(params *secret_service.CreateAppKVSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAppKVSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppKVSecret")
	}

	var r0 *secret_service.CreateAppKVSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppKVSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAppKVSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAppKVSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateAppKVSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppKVSecret'
type MockClientService_CreateAppKVSecret_Call struct {
	*mock.Call
}

// CreateAppKVSecret is a helper method to define mock.On call
//   - params *secret_service.CreateAppKVSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateAppKVSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateAppKVSecret_Call {
	return &MockClientService_CreateAppKVSecret_Call{Call: _e.mock.On("CreateAppKVSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateAppKVSecret_Call) Run(run func(params *secret_service.CreateAppKVSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateAppKVSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAppKVSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateAppKVSecret_Call) Return(_a0 *secret_service.CreateAppKVSecretOK, _a1 error) *MockClientService_CreateAppKVSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateAppKVSecret_Call) RunAndReturn(run func(*secret_service.CreateAppKVSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAppKVSecretOK, error)) *MockClientService_CreateAppKVSecret_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAwsSmSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateAwsSmSyncIntegration(params *secret_service.CreateAwsSmSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAwsSmSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAwsSmSyncIntegration")
	}

	var r0 *secret_service.CreateAwsSmSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsSmSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAwsSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAwsSmSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAwsSmSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAwsSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateAwsSmSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAwsSmSyncIntegration'
type MockClientService_CreateAwsSmSyncIntegration_Call struct {
	*mock.Call
}

// CreateAwsSmSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateAwsSmSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateAwsSmSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateAwsSmSyncIntegration_Call {
	return &MockClientService_CreateAwsSmSyncIntegration_Call{Call: _e.mock.On("CreateAwsSmSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateAwsSmSyncIntegration_Call) Run(run func(params *secret_service.CreateAwsSmSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateAwsSmSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAwsSmSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateAwsSmSyncIntegration_Call) Return(_a0 *secret_service.CreateAwsSmSyncIntegrationOK, _a1 error) *MockClientService_CreateAwsSmSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateAwsSmSyncIntegration_Call) RunAndReturn(run func(*secret_service.CreateAwsSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAwsSmSyncIntegrationOK, error)) *MockClientService_CreateAwsSmSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAzureKvSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateAzureKvSyncIntegration(params *secret_service.CreateAzureKvSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateAzureKvSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAzureKvSyncIntegration")
	}

	var r0 *secret_service.CreateAzureKvSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAzureKvSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAzureKvSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateAzureKvSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateAzureKvSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateAzureKvSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateAzureKvSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateAzureKvSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAzureKvSyncIntegration'
type MockClientService_CreateAzureKvSyncIntegration_Call struct {
	*mock.Call
}

// CreateAzureKvSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateAzureKvSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateAzureKvSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateAzureKvSyncIntegration_Call {
	return &MockClientService_CreateAzureKvSyncIntegration_Call{Call: _e.mock.On("CreateAzureKvSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateAzureKvSyncIntegration_Call) Run(run func(params *secret_service.CreateAzureKvSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateAzureKvSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateAzureKvSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateAzureKvSyncIntegration_Call) Return(_a0 *secret_service.CreateAzureKvSyncIntegrationOK, _a1 error) *MockClientService_CreateAzureKvSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateAzureKvSyncIntegration_Call) RunAndReturn(run func(*secret_service.CreateAzureKvSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateAzureKvSyncIntegrationOK, error)) *MockClientService_CreateAzureKvSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGcpSmSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateGcpSmSyncIntegration(params *secret_service.CreateGcpSmSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateGcpSmSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGcpSmSyncIntegration")
	}

	var r0 *secret_service.CreateGcpSmSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpSmSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGcpSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateGcpSmSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateGcpSmSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateGcpSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateGcpSmSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGcpSmSyncIntegration'
type MockClientService_CreateGcpSmSyncIntegration_Call struct {
	*mock.Call
}

// CreateGcpSmSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateGcpSmSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateGcpSmSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateGcpSmSyncIntegration_Call {
	return &MockClientService_CreateGcpSmSyncIntegration_Call{Call: _e.mock.On("CreateGcpSmSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateGcpSmSyncIntegration_Call) Run(run func(params *secret_service.CreateGcpSmSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateGcpSmSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateGcpSmSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateGcpSmSyncIntegration_Call) Return(_a0 *secret_service.CreateGcpSmSyncIntegrationOK, _a1 error) *MockClientService_CreateGcpSmSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateGcpSmSyncIntegration_Call) RunAndReturn(run func(*secret_service.CreateGcpSmSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGcpSmSyncIntegrationOK, error)) *MockClientService_CreateGcpSmSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGhOrgSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateGhOrgSyncIntegration(params *secret_service.CreateGhOrgSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateGhOrgSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGhOrgSyncIntegration")
	}

	var r0 *secret_service.CreateGhOrgSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGhOrgSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGhOrgSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGhOrgSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateGhOrgSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateGhOrgSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateGhOrgSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateGhOrgSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGhOrgSyncIntegration'
type MockClientService_CreateGhOrgSyncIntegration_Call struct {
	*mock.Call
}

// CreateGhOrgSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateGhOrgSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateGhOrgSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateGhOrgSyncIntegration_Call {
	return &MockClientService_CreateGhOrgSyncIntegration_Call{Call: _e.mock.On("CreateGhOrgSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateGhOrgSyncIntegration_Call) Run(run func(params *secret_service.CreateGhOrgSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateGhOrgSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateGhOrgSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateGhOrgSyncIntegration_Call) Return(_a0 *secret_service.CreateGhOrgSyncIntegrationOK, _a1 error) *MockClientService_CreateGhOrgSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateGhOrgSyncIntegration_Call) RunAndReturn(run func(*secret_service.CreateGhOrgSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGhOrgSyncIntegrationOK, error)) *MockClientService_CreateGhOrgSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGhRepoSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateGhRepoSyncIntegration(params *secret_service.CreateGhRepoSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateGhRepoSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGhRepoSyncIntegration")
	}

	var r0 *secret_service.CreateGhRepoSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGhRepoSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGhRepoSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateGhRepoSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateGhRepoSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateGhRepoSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateGhRepoSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateGhRepoSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGhRepoSyncIntegration'
type MockClientService_CreateGhRepoSyncIntegration_Call struct {
	*mock.Call
}

// CreateGhRepoSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateGhRepoSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateGhRepoSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateGhRepoSyncIntegration_Call {
	return &MockClientService_CreateGhRepoSyncIntegration_Call{Call: _e.mock.On("CreateGhRepoSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateGhRepoSyncIntegration_Call) Run(run func(params *secret_service.CreateGhRepoSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateGhRepoSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateGhRepoSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateGhRepoSyncIntegration_Call) Return(_a0 *secret_service.CreateGhRepoSyncIntegrationOK, _a1 error) *MockClientService_CreateGhRepoSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateGhRepoSyncIntegration_Call) RunAndReturn(run func(*secret_service.CreateGhRepoSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateGhRepoSyncIntegrationOK, error)) *MockClientService_CreateGhRepoSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateHcpTerraformSyncInstallation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateHcpTerraformSyncInstallation(params *secret_service.CreateHcpTerraformSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateHcpTerraformSyncInstallationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHcpTerraformSyncInstallation")
	}

	var r0 *secret_service.CreateHcpTerraformSyncInstallationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateHcpTerraformSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateHcpTerraformSyncInstallationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateHcpTerraformSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateHcpTerraformSyncInstallationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateHcpTerraformSyncInstallationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateHcpTerraformSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateHcpTerraformSyncInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHcpTerraformSyncInstallation'
type MockClientService_CreateHcpTerraformSyncInstallation_Call struct {
	*mock.Call
}

// CreateHcpTerraformSyncInstallation is a helper method to define mock.On call
//   - params *secret_service.CreateHcpTerraformSyncInstallationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateHcpTerraformSyncInstallation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateHcpTerraformSyncInstallation_Call {
	return &MockClientService_CreateHcpTerraformSyncInstallation_Call{Call: _e.mock.On("CreateHcpTerraformSyncInstallation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateHcpTerraformSyncInstallation_Call) Run(run func(params *secret_service.CreateHcpTerraformSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateHcpTerraformSyncInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateHcpTerraformSyncInstallationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateHcpTerraformSyncInstallation_Call) Return(_a0 *secret_service.CreateHcpTerraformSyncInstallationOK, _a1 error) *MockClientService_CreateHcpTerraformSyncInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateHcpTerraformSyncInstallation_Call) RunAndReturn(run func(*secret_service.CreateHcpTerraformSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateHcpTerraformSyncInstallationOK, error)) *MockClientService_CreateHcpTerraformSyncInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateHcpTerraformSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateHcpTerraformSyncIntegration(params *secret_service.CreateHcpTerraformSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateHcpTerraformSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHcpTerraformSyncIntegration")
	}

	var r0 *secret_service.CreateHcpTerraformSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateHcpTerraformSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateHcpTerraformSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateHcpTerraformSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateHcpTerraformSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateHcpTerraformSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateHcpTerraformSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateHcpTerraformSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateHcpTerraformSyncIntegration'
type MockClientService_CreateHcpTerraformSyncIntegration_Call struct {
	*mock.Call
}

// CreateHcpTerraformSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateHcpTerraformSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateHcpTerraformSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateHcpTerraformSyncIntegration_Call {
	return &MockClientService_CreateHcpTerraformSyncIntegration_Call{Call: _e.mock.On("CreateHcpTerraformSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateHcpTerraformSyncIntegration_Call) Run(run func(params *secret_service.CreateHcpTerraformSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateHcpTerraformSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateHcpTerraformSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateHcpTerraformSyncIntegration_Call) Return(_a0 *secret_service.CreateHcpTerraformSyncIntegrationOK, _a1 error) *MockClientService_CreateHcpTerraformSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateHcpTerraformSyncIntegration_Call) RunAndReturn(run func(*secret_service.CreateHcpTerraformSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateHcpTerraformSyncIntegrationOK, error)) *MockClientService_CreateHcpTerraformSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVercelProjectSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) CreateVercelProjectSyncIntegration(params *secret_service.CreateVercelProjectSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.CreateVercelProjectSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVercelProjectSyncIntegration")
	}

	var r0 *secret_service.CreateVercelProjectSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.CreateVercelProjectSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateVercelProjectSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.CreateVercelProjectSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.CreateVercelProjectSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.CreateVercelProjectSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.CreateVercelProjectSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_CreateVercelProjectSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVercelProjectSyncIntegration'
type MockClientService_CreateVercelProjectSyncIntegration_Call struct {
	*mock.Call
}

// CreateVercelProjectSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.CreateVercelProjectSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) CreateVercelProjectSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_CreateVercelProjectSyncIntegration_Call {
	return &MockClientService_CreateVercelProjectSyncIntegration_Call{Call: _e.mock.On("CreateVercelProjectSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_CreateVercelProjectSyncIntegration_Call) Run(run func(params *secret_service.CreateVercelProjectSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_CreateVercelProjectSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.CreateVercelProjectSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_CreateVercelProjectSyncIntegration_Call) Return(_a0 *secret_service.CreateVercelProjectSyncIntegrationOK, _a1 error) *MockClientService_CreateVercelProjectSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_CreateVercelProjectSyncIntegration_Call) RunAndReturn(run func(*secret_service.CreateVercelProjectSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.CreateVercelProjectSyncIntegrationOK, error)) *MockClientService_CreateVercelProjectSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteApp(params *secret_service.DeleteAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *secret_service.DeleteAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApp'
type MockClientService_DeleteApp_Call struct {
	*mock.Call
}

// DeleteApp is a helper method to define mock.On call
//   - params *secret_service.DeleteAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteApp_Call {
	return &MockClientService_DeleteApp_Call{Call: _e.mock.On("DeleteApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteApp_Call) Run(run func(params *secret_service.DeleteAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteApp_Call) Return(_a0 *secret_service.DeleteAppOK, _a1 error) *MockClientService_DeleteApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteApp_Call) RunAndReturn(run func(*secret_service.DeleteAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppOK, error)) *MockClientService_DeleteApp_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteAppSecret(params *secret_service.DeleteAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAppSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppSecret")
	}

	var r0 *secret_service.DeleteAppSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAppSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAppSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAppSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppSecret'
type MockClientService_DeleteAppSecret_Call struct {
	*mock.Call
}

// DeleteAppSecret is a helper method to define mock.On call
//   - params *secret_service.DeleteAppSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteAppSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteAppSecret_Call {
	return &MockClientService_DeleteAppSecret_Call{Call: _e.mock.On("DeleteAppSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteAppSecret_Call) Run(run func(params *secret_service.DeleteAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteAppSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAppSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAppSecret_Call) Return(_a0 *secret_service.DeleteAppSecretOK, _a1 error) *MockClientService_DeleteAppSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAppSecret_Call) RunAndReturn(run func(*secret_service.DeleteAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretOK, error)) *MockClientService_DeleteAppSecret_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAppSecretVersion provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteAppSecretVersion(params *secret_service.DeleteAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteAppSecretVersionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppSecretVersion")
	}

	var r0 *secret_service.DeleteAppSecretVersionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretVersionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteAppSecretVersionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteAppSecretVersionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteAppSecretVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAppSecretVersion'
type MockClientService_DeleteAppSecretVersion_Call struct {
	*mock.Call
}

// DeleteAppSecretVersion is a helper method to define mock.On call
//   - params *secret_service.DeleteAppSecretVersionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteAppSecretVersion(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteAppSecretVersion_Call {
	return &MockClientService_DeleteAppSecretVersion_Call{Call: _e.mock.On("DeleteAppSecretVersion",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteAppSecretVersion_Call) Run(run func(params *secret_service.DeleteAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteAppSecretVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteAppSecretVersionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteAppSecretVersion_Call) Return(_a0 *secret_service.DeleteAppSecretVersionOK, _a1 error) *MockClientService_DeleteAppSecretVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteAppSecretVersion_Call) RunAndReturn(run func(*secret_service.DeleteAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteAppSecretVersionOK, error)) *MockClientService_DeleteAppSecretVersion_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncInstallation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteSyncInstallation(params *secret_service.DeleteSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteSyncInstallationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncInstallation")
	}

	var r0 *secret_service.DeleteSyncInstallationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteSyncInstallationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteSyncInstallationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteSyncInstallationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteSyncInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncInstallation'
type MockClientService_DeleteSyncInstallation_Call struct {
	*mock.Call
}

// DeleteSyncInstallation is a helper method to define mock.On call
//   - params *secret_service.DeleteSyncInstallationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteSyncInstallation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteSyncInstallation_Call {
	return &MockClientService_DeleteSyncInstallation_Call{Call: _e.mock.On("DeleteSyncInstallation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteSyncInstallation_Call) Run(run func(params *secret_service.DeleteSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteSyncInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteSyncInstallationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteSyncInstallation_Call) Return(_a0 *secret_service.DeleteSyncInstallationOK, _a1 error) *MockClientService_DeleteSyncInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteSyncInstallation_Call) RunAndReturn(run func(*secret_service.DeleteSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteSyncInstallationOK, error)) *MockClientService_DeleteSyncInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) DeleteSyncIntegration(params *secret_service.DeleteSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.DeleteSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncIntegration")
	}

	var r0 *secret_service.DeleteSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.DeleteSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.DeleteSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.DeleteSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.DeleteSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_DeleteSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSyncIntegration'
type MockClientService_DeleteSyncIntegration_Call struct {
	*mock.Call
}

// DeleteSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.DeleteSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) DeleteSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_DeleteSyncIntegration_Call {
	return &MockClientService_DeleteSyncIntegration_Call{Call: _e.mock.On("DeleteSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_DeleteSyncIntegration_Call) Run(run func(params *secret_service.DeleteSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_DeleteSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.DeleteSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_DeleteSyncIntegration_Call) Return(_a0 *secret_service.DeleteSyncIntegrationOK, _a1 error) *MockClientService_DeleteSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_DeleteSyncIntegration_Call) RunAndReturn(run func(*secret_service.DeleteSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.DeleteSyncIntegrationOK, error)) *MockClientService_DeleteSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// ForceSync provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ForceSync(params *secret_service.ForceSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ForceSyncOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ForceSync")
	}

	var r0 *secret_service.ForceSyncOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ForceSyncParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ForceSyncOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ForceSyncParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ForceSyncOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ForceSyncOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ForceSyncParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ForceSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceSync'
type MockClientService_ForceSync_Call struct {
	*mock.Call
}

// ForceSync is a helper method to define mock.On call
//   - params *secret_service.ForceSyncParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ForceSync(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ForceSync_Call {
	return &MockClientService_ForceSync_Call{Call: _e.mock.On("ForceSync",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ForceSync_Call) Run(run func(params *secret_service.ForceSyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ForceSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ForceSyncParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ForceSync_Call) Return(_a0 *secret_service.ForceSyncOK, _a1 error) *MockClientService_ForceSync_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ForceSync_Call) RunAndReturn(run func(*secret_service.ForceSyncParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ForceSyncOK, error)) *MockClientService_ForceSync_Call {
	_c.Call.Return(run)
	return _c
}

// GetApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetApp(params *secret_service.GetAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *secret_service.GetAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApp'
type MockClientService_GetApp_Call struct {
	*mock.Call
}

// GetApp is a helper method to define mock.On call
//   - params *secret_service.GetAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetApp_Call {
	return &MockClientService_GetApp_Call{Call: _e.mock.On("GetApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetApp_Call) Run(run func(params *secret_service.GetAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetApp_Call) Return(_a0 *secret_service.GetAppOK, _a1 error) *MockClientService_GetApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetApp_Call) RunAndReturn(run func(*secret_service.GetAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppOK, error)) *MockClientService_GetApp_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetAppSecret(params *secret_service.GetAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAppSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppSecret")
	}

	var r0 *secret_service.GetAppSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAppSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAppSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAppSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppSecret'
type MockClientService_GetAppSecret_Call struct {
	*mock.Call
}

// GetAppSecret is a helper method to define mock.On call
//   - params *secret_service.GetAppSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetAppSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetAppSecret_Call {
	return &MockClientService_GetAppSecret_Call{Call: _e.mock.On("GetAppSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetAppSecret_Call) Run(run func(params *secret_service.GetAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetAppSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAppSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAppSecret_Call) Return(_a0 *secret_service.GetAppSecretOK, _a1 error) *MockClientService_GetAppSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAppSecret_Call) RunAndReturn(run func(*secret_service.GetAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretOK, error)) *MockClientService_GetAppSecret_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppSecretVersion provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetAppSecretVersion(params *secret_service.GetAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetAppSecretVersionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppSecretVersion")
	}

	var r0 *secret_service.GetAppSecretVersionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretVersionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetAppSecretVersionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetAppSecretVersionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetAppSecretVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppSecretVersion'
type MockClientService_GetAppSecretVersion_Call struct {
	*mock.Call
}

// GetAppSecretVersion is a helper method to define mock.On call
//   - params *secret_service.GetAppSecretVersionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetAppSecretVersion(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetAppSecretVersion_Call {
	return &MockClientService_GetAppSecretVersion_Call{Call: _e.mock.On("GetAppSecretVersion",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetAppSecretVersion_Call) Run(run func(params *secret_service.GetAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetAppSecretVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetAppSecretVersionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetAppSecretVersion_Call) Return(_a0 *secret_service.GetAppSecretVersionOK, _a1 error) *MockClientService_GetAppSecretVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetAppSecretVersion_Call) RunAndReturn(run func(*secret_service.GetAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetAppSecretVersionOK, error)) *MockClientService_GetAppSecretVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetGitHubEnvironments provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGitHubEnvironments(params *secret_service.GetGitHubEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGitHubEnvironmentsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGitHubEnvironments")
	}

	var r0 *secret_service.GetGitHubEnvironmentsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGitHubEnvironmentsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGitHubEnvironmentsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGitHubEnvironmentsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGitHubEnvironmentsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGitHubEnvironmentsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGitHubEnvironmentsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGitHubEnvironments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGitHubEnvironments'
type MockClientService_GetGitHubEnvironments_Call struct {
	*mock.Call
}

// GetGitHubEnvironments is a helper method to define mock.On call
//   - params *secret_service.GetGitHubEnvironmentsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGitHubEnvironments(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGitHubEnvironments_Call {
	return &MockClientService_GetGitHubEnvironments_Call{Call: _e.mock.On("GetGitHubEnvironments",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGitHubEnvironments_Call) Run(run func(params *secret_service.GetGitHubEnvironmentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGitHubEnvironments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGitHubEnvironmentsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGitHubEnvironments_Call) Return(_a0 *secret_service.GetGitHubEnvironmentsOK, _a1 error) *MockClientService_GetGitHubEnvironments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGitHubEnvironments_Call) RunAndReturn(run func(*secret_service.GetGitHubEnvironmentsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGitHubEnvironmentsOK, error)) *MockClientService_GetGitHubEnvironments_Call {
	_c.Call.Return(run)
	return _c
}

// GetGitHubInstallLinks provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGitHubInstallLinks(params *secret_service.GetGitHubInstallLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGitHubInstallLinksOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGitHubInstallLinks")
	}

	var r0 *secret_service.GetGitHubInstallLinksOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGitHubInstallLinksParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGitHubInstallLinksOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGitHubInstallLinksParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGitHubInstallLinksOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGitHubInstallLinksOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGitHubInstallLinksParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGitHubInstallLinks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGitHubInstallLinks'
type MockClientService_GetGitHubInstallLinks_Call struct {
	*mock.Call
}

// GetGitHubInstallLinks is a helper method to define mock.On call
//   - params *secret_service.GetGitHubInstallLinksParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGitHubInstallLinks(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGitHubInstallLinks_Call {
	return &MockClientService_GetGitHubInstallLinks_Call{Call: _e.mock.On("GetGitHubInstallLinks",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGitHubInstallLinks_Call) Run(run func(params *secret_service.GetGitHubInstallLinksParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGitHubInstallLinks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGitHubInstallLinksParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGitHubInstallLinks_Call) Return(_a0 *secret_service.GetGitHubInstallLinksOK, _a1 error) *MockClientService_GetGitHubInstallLinks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGitHubInstallLinks_Call) RunAndReturn(run func(*secret_service.GetGitHubInstallLinksParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGitHubInstallLinksOK, error)) *MockClientService_GetGitHubInstallLinks_Call {
	_c.Call.Return(run)
	return _c
}

// GetGitHubRepositories provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetGitHubRepositories(params *secret_service.GetGitHubRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetGitHubRepositoriesOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGitHubRepositories")
	}

	var r0 *secret_service.GetGitHubRepositoriesOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetGitHubRepositoriesParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGitHubRepositoriesOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetGitHubRepositoriesParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetGitHubRepositoriesOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetGitHubRepositoriesOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetGitHubRepositoriesParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetGitHubRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGitHubRepositories'
type MockClientService_GetGitHubRepositories_Call struct {
	*mock.Call
}

// GetGitHubRepositories is a helper method to define mock.On call
//   - params *secret_service.GetGitHubRepositoriesParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetGitHubRepositories(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetGitHubRepositories_Call {
	return &MockClientService_GetGitHubRepositories_Call{Call: _e.mock.On("GetGitHubRepositories",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetGitHubRepositories_Call) Run(run func(params *secret_service.GetGitHubRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetGitHubRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetGitHubRepositoriesParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetGitHubRepositories_Call) Return(_a0 *secret_service.GetGitHubRepositoriesOK, _a1 error) *MockClientService_GetGitHubRepositories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetGitHubRepositories_Call) RunAndReturn(run func(*secret_service.GetGitHubRepositoriesParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetGitHubRepositoriesOK, error)) *MockClientService_GetGitHubRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncInstallation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetSyncInstallation(params *secret_service.GetSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetSyncInstallationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncInstallation")
	}

	var r0 *secret_service.GetSyncInstallationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetSyncInstallationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetSyncInstallationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetSyncInstallationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetSyncInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncInstallation'
type MockClientService_GetSyncInstallation_Call struct {
	*mock.Call
}

// GetSyncInstallation is a helper method to define mock.On call
//   - params *secret_service.GetSyncInstallationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetSyncInstallation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetSyncInstallation_Call {
	return &MockClientService_GetSyncInstallation_Call{Call: _e.mock.On("GetSyncInstallation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetSyncInstallation_Call) Run(run func(params *secret_service.GetSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetSyncInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetSyncInstallationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetSyncInstallation_Call) Return(_a0 *secret_service.GetSyncInstallationOK, _a1 error) *MockClientService_GetSyncInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetSyncInstallation_Call) RunAndReturn(run func(*secret_service.GetSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetSyncInstallationOK, error)) *MockClientService_GetSyncInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// GetSyncIntegration provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetSyncIntegration(params *secret_service.GetSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetSyncIntegrationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncIntegration")
	}

	var r0 *secret_service.GetSyncIntegrationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetSyncIntegrationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetSyncIntegrationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetSyncIntegrationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetSyncIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSyncIntegration'
type MockClientService_GetSyncIntegration_Call struct {
	*mock.Call
}

// GetSyncIntegration is a helper method to define mock.On call
//   - params *secret_service.GetSyncIntegrationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetSyncIntegration(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetSyncIntegration_Call {
	return &MockClientService_GetSyncIntegration_Call{Call: _e.mock.On("GetSyncIntegration",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetSyncIntegration_Call) Run(run func(params *secret_service.GetSyncIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetSyncIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetSyncIntegrationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetSyncIntegration_Call) Return(_a0 *secret_service.GetSyncIntegrationOK, _a1 error) *MockClientService_GetSyncIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetSyncIntegration_Call) RunAndReturn(run func(*secret_service.GetSyncIntegrationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetSyncIntegrationOK, error)) *MockClientService_GetSyncIntegration_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsage provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetUsage(params *secret_service.GetUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetUsageOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage")
	}

	var r0 *secret_service.GetUsageOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsageOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetUsageOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetUsageOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsage'
type MockClientService_GetUsage_Call struct {
	*mock.Call
}

// GetUsage is a helper method to define mock.On call
//   - params *secret_service.GetUsageParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetUsage(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetUsage_Call {
	return &MockClientService_GetUsage_Call{Call: _e.mock.On("GetUsage",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetUsage_Call) Run(run func(params *secret_service.GetUsageParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetUsageParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUsage_Call) Return(_a0 *secret_service.GetUsageOK, _a1 error) *MockClientService_GetUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUsage_Call) RunAndReturn(run func(*secret_service.GetUsageParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsageOK, error)) *MockClientService_GetUsage_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsage2 provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetUsage2(params *secret_service.GetUsage2Params, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetUsage2OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage2")
	}

	var r0 *secret_service.GetUsage2OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsage2OK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetUsage2OK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetUsage2OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetUsage2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsage2'
type MockClientService_GetUsage2_Call struct {
	*mock.Call
}

// GetUsage2 is a helper method to define mock.On call
//   - params *secret_service.GetUsage2Params
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetUsage2(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetUsage2_Call {
	return &MockClientService_GetUsage2_Call{Call: _e.mock.On("GetUsage2",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetUsage2_Call) Run(run func(params *secret_service.GetUsage2Params, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetUsage2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetUsage2Params), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetUsage2_Call) Return(_a0 *secret_service.GetUsage2OK, _a1 error) *MockClientService_GetUsage2_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetUsage2_Call) RunAndReturn(run func(*secret_service.GetUsage2Params, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetUsage2OK, error)) *MockClientService_GetUsage2_Call {
	_c.Call.Return(run)
	return _c
}

// GetVercelInstallationLink provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) GetVercelInstallationLink(params *secret_service.GetVercelInstallationLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.GetVercelInstallationLinkOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVercelInstallationLink")
	}

	var r0 *secret_service.GetVercelInstallationLinkOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.GetVercelInstallationLinkParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetVercelInstallationLinkOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.GetVercelInstallationLinkParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.GetVercelInstallationLinkOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.GetVercelInstallationLinkOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.GetVercelInstallationLinkParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetVercelInstallationLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVercelInstallationLink'
type MockClientService_GetVercelInstallationLink_Call struct {
	*mock.Call
}

// GetVercelInstallationLink is a helper method to define mock.On call
//   - params *secret_service.GetVercelInstallationLinkParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) GetVercelInstallationLink(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_GetVercelInstallationLink_Call {
	return &MockClientService_GetVercelInstallationLink_Call{Call: _e.mock.On("GetVercelInstallationLink",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_GetVercelInstallationLink_Call) Run(run func(params *secret_service.GetVercelInstallationLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_GetVercelInstallationLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.GetVercelInstallationLinkParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetVercelInstallationLink_Call) Return(_a0 *secret_service.GetVercelInstallationLinkOK, _a1 error) *MockClientService_GetVercelInstallationLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetVercelInstallationLink_Call) RunAndReturn(run func(*secret_service.GetVercelInstallationLinkParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.GetVercelInstallationLinkOK, error)) *MockClientService_GetVercelInstallationLink_Call {
	_c.Call.Return(run)
	return _c
}

// ListAppSecretVersions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListAppSecretVersions(params *secret_service.ListAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAppSecretVersionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppSecretVersions")
	}

	var r0 *secret_service.ListAppSecretVersionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretVersionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAppSecretVersionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAppSecretVersionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListAppSecretVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAppSecretVersions'
type MockClientService_ListAppSecretVersions_Call struct {
	*mock.Call
}

// ListAppSecretVersions is a helper method to define mock.On call
//   - params *secret_service.ListAppSecretVersionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListAppSecretVersions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListAppSecretVersions_Call {
	return &MockClientService_ListAppSecretVersions_Call{Call: _e.mock.On("ListAppSecretVersions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListAppSecretVersions_Call) Run(run func(params *secret_service.ListAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListAppSecretVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAppSecretVersionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListAppSecretVersions_Call) Return(_a0 *secret_service.ListAppSecretVersionsOK, _a1 error) *MockClientService_ListAppSecretVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListAppSecretVersions_Call) RunAndReturn(run func(*secret_service.ListAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretVersionsOK, error)) *MockClientService_ListAppSecretVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListAppSecrets provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListAppSecrets(params *secret_service.ListAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAppSecretsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppSecrets")
	}

	var r0 *secret_service.ListAppSecretsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAppSecretsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAppSecretsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListAppSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAppSecrets'
type MockClientService_ListAppSecrets_Call struct {
	*mock.Call
}

// ListAppSecrets is a helper method to define mock.On call
//   - params *secret_service.ListAppSecretsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListAppSecrets(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListAppSecrets_Call {
	return &MockClientService_ListAppSecrets_Call{Call: _e.mock.On("ListAppSecrets",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListAppSecrets_Call) Run(run func(params *secret_service.ListAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListAppSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAppSecretsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListAppSecrets_Call) Return(_a0 *secret_service.ListAppSecretsOK, _a1 error) *MockClientService_ListAppSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListAppSecrets_Call) RunAndReturn(run func(*secret_service.ListAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppSecretsOK, error)) *MockClientService_ListAppSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// ListApps provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListApps(params *secret_service.ListAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListAppsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApps")
	}

	var r0 *secret_service.ListAppsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListAppsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListAppsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListApps_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListApps'
type MockClientService_ListApps_Call struct {
	*mock.Call
}

// ListApps is a helper method to define mock.On call
//   - params *secret_service.ListAppsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListApps(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListApps_Call {
	return &MockClientService_ListApps_Call{Call: _e.mock.On("ListApps",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListApps_Call) Run(run func(params *secret_service.ListAppsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListApps_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListAppsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListApps_Call) Return(_a0 *secret_service.ListAppsOK, _a1 error) *MockClientService_ListApps_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListApps_Call) RunAndReturn(run func(*secret_service.ListAppsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListAppsOK, error)) *MockClientService_ListApps_Call {
	_c.Call.Return(run)
	return _c
}

// ListGitHubInstallations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListGitHubInstallations(params *secret_service.ListGitHubInstallationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListGitHubInstallationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGitHubInstallations")
	}

	var r0 *secret_service.ListGitHubInstallationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListGitHubInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGitHubInstallationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListGitHubInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListGitHubInstallationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListGitHubInstallationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListGitHubInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListGitHubInstallations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListGitHubInstallations'
type MockClientService_ListGitHubInstallations_Call struct {
	*mock.Call
}

// ListGitHubInstallations is a helper method to define mock.On call
//   - params *secret_service.ListGitHubInstallationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListGitHubInstallations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListGitHubInstallations_Call {
	return &MockClientService_ListGitHubInstallations_Call{Call: _e.mock.On("ListGitHubInstallations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListGitHubInstallations_Call) Run(run func(params *secret_service.ListGitHubInstallationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListGitHubInstallations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListGitHubInstallationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListGitHubInstallations_Call) Return(_a0 *secret_service.ListGitHubInstallationsOK, _a1 error) *MockClientService_ListGitHubInstallations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListGitHubInstallations_Call) RunAndReturn(run func(*secret_service.ListGitHubInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListGitHubInstallationsOK, error)) *MockClientService_ListGitHubInstallations_Call {
	_c.Call.Return(run)
	return _c
}

// ListOpenAppSecretVersions provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListOpenAppSecretVersions(params *secret_service.ListOpenAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListOpenAppSecretVersionsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenAppSecretVersions")
	}

	var r0 *secret_service.ListOpenAppSecretVersionsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListOpenAppSecretVersionsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListOpenAppSecretVersionsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListOpenAppSecretVersionsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListOpenAppSecretVersions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOpenAppSecretVersions'
type MockClientService_ListOpenAppSecretVersions_Call struct {
	*mock.Call
}

// ListOpenAppSecretVersions is a helper method to define mock.On call
//   - params *secret_service.ListOpenAppSecretVersionsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListOpenAppSecretVersions(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListOpenAppSecretVersions_Call {
	return &MockClientService_ListOpenAppSecretVersions_Call{Call: _e.mock.On("ListOpenAppSecretVersions",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListOpenAppSecretVersions_Call) Run(run func(params *secret_service.ListOpenAppSecretVersionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListOpenAppSecretVersions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListOpenAppSecretVersionsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListOpenAppSecretVersions_Call) Return(_a0 *secret_service.ListOpenAppSecretVersionsOK, _a1 error) *MockClientService_ListOpenAppSecretVersions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListOpenAppSecretVersions_Call) RunAndReturn(run func(*secret_service.ListOpenAppSecretVersionsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListOpenAppSecretVersionsOK, error)) *MockClientService_ListOpenAppSecretVersions_Call {
	_c.Call.Return(run)
	return _c
}

// ListSyncInstallations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListSyncInstallations(params *secret_service.ListSyncInstallationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListSyncInstallationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSyncInstallations")
	}

	var r0 *secret_service.ListSyncInstallationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListSyncInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListSyncInstallationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListSyncInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListSyncInstallationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListSyncInstallationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListSyncInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListSyncInstallations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSyncInstallations'
type MockClientService_ListSyncInstallations_Call struct {
	*mock.Call
}

// ListSyncInstallations is a helper method to define mock.On call
//   - params *secret_service.ListSyncInstallationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListSyncInstallations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListSyncInstallations_Call {
	return &MockClientService_ListSyncInstallations_Call{Call: _e.mock.On("ListSyncInstallations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListSyncInstallations_Call) Run(run func(params *secret_service.ListSyncInstallationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListSyncInstallations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListSyncInstallationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListSyncInstallations_Call) Return(_a0 *secret_service.ListSyncInstallationsOK, _a1 error) *MockClientService_ListSyncInstallations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListSyncInstallations_Call) RunAndReturn(run func(*secret_service.ListSyncInstallationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListSyncInstallationsOK, error)) *MockClientService_ListSyncInstallations_Call {
	_c.Call.Return(run)
	return _c
}

// ListSyncIntegrations provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) ListSyncIntegrations(params *secret_service.ListSyncIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.ListSyncIntegrationsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSyncIntegrations")
	}

	var r0 *secret_service.ListSyncIntegrationsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.ListSyncIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListSyncIntegrationsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.ListSyncIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.ListSyncIntegrationsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.ListSyncIntegrationsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.ListSyncIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListSyncIntegrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSyncIntegrations'
type MockClientService_ListSyncIntegrations_Call struct {
	*mock.Call
}

// ListSyncIntegrations is a helper method to define mock.On call
//   - params *secret_service.ListSyncIntegrationsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) ListSyncIntegrations(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_ListSyncIntegrations_Call {
	return &MockClientService_ListSyncIntegrations_Call{Call: _e.mock.On("ListSyncIntegrations",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_ListSyncIntegrations_Call) Run(run func(params *secret_service.ListSyncIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_ListSyncIntegrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.ListSyncIntegrationsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListSyncIntegrations_Call) Return(_a0 *secret_service.ListSyncIntegrationsOK, _a1 error) *MockClientService_ListSyncIntegrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListSyncIntegrations_Call) RunAndReturn(run func(*secret_service.ListSyncIntegrationsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.ListSyncIntegrationsOK, error)) *MockClientService_ListSyncIntegrations_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAppSecret provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OpenAppSecret(params *secret_service.OpenAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.OpenAppSecretOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenAppSecret")
	}

	var r0 *secret_service.OpenAppSecretOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.OpenAppSecretOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.OpenAppSecretOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OpenAppSecret_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAppSecret'
type MockClientService_OpenAppSecret_Call struct {
	*mock.Call
}

// OpenAppSecret is a helper method to define mock.On call
//   - params *secret_service.OpenAppSecretParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) OpenAppSecret(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OpenAppSecret_Call {
	return &MockClientService_OpenAppSecret_Call{Call: _e.mock.On("OpenAppSecret",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OpenAppSecret_Call) Run(run func(params *secret_service.OpenAppSecretParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_OpenAppSecret_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.OpenAppSecretParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OpenAppSecret_Call) Return(_a0 *secret_service.OpenAppSecretOK, _a1 error) *MockClientService_OpenAppSecret_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OpenAppSecret_Call) RunAndReturn(run func(*secret_service.OpenAppSecretParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretOK, error)) *MockClientService_OpenAppSecret_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAppSecretVersion provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OpenAppSecretVersion(params *secret_service.OpenAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.OpenAppSecretVersionOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenAppSecretVersion")
	}

	var r0 *secret_service.OpenAppSecretVersionOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretVersionOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.OpenAppSecretVersionOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.OpenAppSecretVersionOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OpenAppSecretVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAppSecretVersion'
type MockClientService_OpenAppSecretVersion_Call struct {
	*mock.Call
}

// OpenAppSecretVersion is a helper method to define mock.On call
//   - params *secret_service.OpenAppSecretVersionParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) OpenAppSecretVersion(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OpenAppSecretVersion_Call {
	return &MockClientService_OpenAppSecretVersion_Call{Call: _e.mock.On("OpenAppSecretVersion",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OpenAppSecretVersion_Call) Run(run func(params *secret_service.OpenAppSecretVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_OpenAppSecretVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.OpenAppSecretVersionParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OpenAppSecretVersion_Call) Return(_a0 *secret_service.OpenAppSecretVersionOK, _a1 error) *MockClientService_OpenAppSecretVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OpenAppSecretVersion_Call) RunAndReturn(run func(*secret_service.OpenAppSecretVersionParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretVersionOK, error)) *MockClientService_OpenAppSecretVersion_Call {
	_c.Call.Return(run)
	return _c
}

// OpenAppSecrets provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) OpenAppSecrets(params *secret_service.OpenAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.OpenAppSecretsOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenAppSecrets")
	}

	var r0 *secret_service.OpenAppSecretsOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretsOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.OpenAppSecretsOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.OpenAppSecretsOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_OpenAppSecrets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenAppSecrets'
type MockClientService_OpenAppSecrets_Call struct {
	*mock.Call
}

// OpenAppSecrets is a helper method to define mock.On call
//   - params *secret_service.OpenAppSecretsParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) OpenAppSecrets(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_OpenAppSecrets_Call {
	return &MockClientService_OpenAppSecrets_Call{Call: _e.mock.On("OpenAppSecrets",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_OpenAppSecrets_Call) Run(run func(params *secret_service.OpenAppSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_OpenAppSecrets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.OpenAppSecretsParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_OpenAppSecrets_Call) Return(_a0 *secret_service.OpenAppSecretsOK, _a1 error) *MockClientService_OpenAppSecrets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_OpenAppSecrets_Call) RunAndReturn(run func(*secret_service.OpenAppSecretsParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.OpenAppSecretsOK, error)) *MockClientService_OpenAppSecrets_Call {
	_c.Call.Return(run)
	return _c
}

// SetTier provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) SetTier(params *secret_service.SetTierParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.SetTierOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTier")
	}

	var r0 *secret_service.SetTierOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.SetTierOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.SetTierOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.SetTierOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_SetTier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTier'
type MockClientService_SetTier_Call struct {
	*mock.Call
}

// SetTier is a helper method to define mock.On call
//   - params *secret_service.SetTierParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) SetTier(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_SetTier_Call {
	return &MockClientService_SetTier_Call{Call: _e.mock.On("SetTier",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_SetTier_Call) Run(run func(params *secret_service.SetTierParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_SetTier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.SetTierParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_SetTier_Call) Return(_a0 *secret_service.SetTierOK, _a1 error) *MockClientService_SetTier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_SetTier_Call) RunAndReturn(run func(*secret_service.SetTierParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.SetTierOK, error)) *MockClientService_SetTier_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApp provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateApp(params *secret_service.UpdateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateAppOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 *secret_service.UpdateAppOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAppOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateAppOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateAppOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateApp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApp'
type MockClientService_UpdateApp_Call struct {
	*mock.Call
}

// UpdateApp is a helper method to define mock.On call
//   - params *secret_service.UpdateAppParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateApp(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateApp_Call {
	return &MockClientService_UpdateApp_Call{Call: _e.mock.On("UpdateApp",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateApp_Call) Run(run func(params *secret_service.UpdateAppParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateApp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateAppParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateApp_Call) Return(_a0 *secret_service.UpdateAppOK, _a1 error) *MockClientService_UpdateApp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateApp_Call) RunAndReturn(run func(*secret_service.UpdateAppParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateAppOK, error)) *MockClientService_UpdateApp_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSyncInstallation provides a mock function with given fields: params, authInfo, opts
func (_m *MockClientService) UpdateSyncInstallation(params *secret_service.UpdateSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption) (*secret_service.UpdateSyncInstallationOK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params, authInfo)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSyncInstallation")
	}

	var r0 *secret_service.UpdateSyncInstallationOK
	var r1 error
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateSyncInstallationOK, error)); ok {
		return rf(params, authInfo, opts...)
	}
	if rf, ok := ret.Get(0).(func(*secret_service.UpdateSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) *secret_service.UpdateSyncInstallationOK); ok {
		r0 = rf(params, authInfo, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*secret_service.UpdateSyncInstallationOK)
		}
	}

	if rf, ok := ret.Get(1).(func(*secret_service.UpdateSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) error); ok {
		r1 = rf(params, authInfo, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_UpdateSyncInstallation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSyncInstallation'
type MockClientService_UpdateSyncInstallation_Call struct {
	*mock.Call
}

// UpdateSyncInstallation is a helper method to define mock.On call
//   - params *secret_service.UpdateSyncInstallationParams
//   - authInfo runtime.ClientAuthInfoWriter
//   - opts ...secret_service.ClientOption
func (_e *MockClientService_Expecter) UpdateSyncInstallation(params interface{}, authInfo interface{}, opts ...interface{}) *MockClientService_UpdateSyncInstallation_Call {
	return &MockClientService_UpdateSyncInstallation_Call{Call: _e.mock.On("UpdateSyncInstallation",
		append([]interface{}{params, authInfo}, opts...)...)}
}

func (_c *MockClientService_UpdateSyncInstallation_Call) Run(run func(params *secret_service.UpdateSyncInstallationParams, authInfo runtime.ClientAuthInfoWriter, opts ...secret_service.ClientOption)) *MockClientService_UpdateSyncInstallation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]secret_service.ClientOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(secret_service.ClientOption)
			}
		}
		run(args[0].(*secret_service.UpdateSyncInstallationParams), args[1].(runtime.ClientAuthInfoWriter), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_UpdateSyncInstallation_Call) Return(_a0 *secret_service.UpdateSyncInstallationOK, _a1 error) *MockClientService_UpdateSyncInstallation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_UpdateSyncInstallation_Call) RunAndReturn(run func(*secret_service.UpdateSyncInstallationParams, runtime.ClientAuthInfoWriter, ...secret_service.ClientOption) (*secret_service.UpdateSyncInstallationOK, error)) *MockClientService_UpdateSyncInstallation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
