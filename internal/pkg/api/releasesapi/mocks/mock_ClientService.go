// Code generated by mockery. DO NOT EDIT.

package mock_operations

import (
	runtime "github.com/go-openapi/runtime"
	operations "github.com/hashicorp/hcp/internal/pkg/api/releasesapi/client/operations"
	mock "github.com/stretchr/testify/mock"
)

// MockClientService is an autogenerated mock type for the ClientService type
type MockClientService struct {
	mock.Mock
}

type MockClientService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClientService) EXPECT() *MockClientService_Expecter {
	return &MockClientService_Expecter{mock: &_m.Mock}
}

// GetReleaseV1 provides a mock function with given fields: params, opts
func (_m *MockClientService) GetReleaseV1(params *operations.GetReleaseV1Params, opts ...operations.ClientOption) (*operations.GetReleaseV1OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseV1")
	}

	var r0 *operations.GetReleaseV1OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.GetReleaseV1Params, ...operations.ClientOption) (*operations.GetReleaseV1OK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.GetReleaseV1Params, ...operations.ClientOption) *operations.GetReleaseV1OK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.GetReleaseV1OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.GetReleaseV1Params, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_GetReleaseV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReleaseV1'
type MockClientService_GetReleaseV1_Call struct {
	*mock.Call
}

// GetReleaseV1 is a helper method to define mock.On call
//   - params *operations.GetReleaseV1Params
//   - opts ...operations.ClientOption
func (_e *MockClientService_Expecter) GetReleaseV1(params interface{}, opts ...interface{}) *MockClientService_GetReleaseV1_Call {
	return &MockClientService_GetReleaseV1_Call{Call: _e.mock.On("GetReleaseV1",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_GetReleaseV1_Call) Run(run func(params *operations.GetReleaseV1Params, opts ...operations.ClientOption)) *MockClientService_GetReleaseV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.GetReleaseV1Params), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_GetReleaseV1_Call) Return(_a0 *operations.GetReleaseV1OK, _a1 error) *MockClientService_GetReleaseV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_GetReleaseV1_Call) RunAndReturn(run func(*operations.GetReleaseV1Params, ...operations.ClientOption) (*operations.GetReleaseV1OK, error)) *MockClientService_GetReleaseV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListProductsV1 provides a mock function with given fields: params, opts
func (_m *MockClientService) ListProductsV1(params *operations.ListProductsV1Params, opts ...operations.ClientOption) (*operations.ListProductsV1OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProductsV1")
	}

	var r0 *operations.ListProductsV1OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListProductsV1Params, ...operations.ClientOption) (*operations.ListProductsV1OK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListProductsV1Params, ...operations.ClientOption) *operations.ListProductsV1OK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListProductsV1OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListProductsV1Params, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListProductsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListProductsV1'
type MockClientService_ListProductsV1_Call struct {
	*mock.Call
}

// ListProductsV1 is a helper method to define mock.On call
//   - params *operations.ListProductsV1Params
//   - opts ...operations.ClientOption
func (_e *MockClientService_Expecter) ListProductsV1(params interface{}, opts ...interface{}) *MockClientService_ListProductsV1_Call {
	return &MockClientService_ListProductsV1_Call{Call: _e.mock.On("ListProductsV1",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListProductsV1_Call) Run(run func(params *operations.ListProductsV1Params, opts ...operations.ClientOption)) *MockClientService_ListProductsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListProductsV1Params), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListProductsV1_Call) Return(_a0 *operations.ListProductsV1OK, _a1 error) *MockClientService_ListProductsV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListProductsV1_Call) RunAndReturn(run func(*operations.ListProductsV1Params, ...operations.ClientOption) (*operations.ListProductsV1OK, error)) *MockClientService_ListProductsV1_Call {
	_c.Call.Return(run)
	return _c
}

// ListReleasesV1 provides a mock function with given fields: params, opts
func (_m *MockClientService) ListReleasesV1(params *operations.ListReleasesV1Params, opts ...operations.ClientOption) (*operations.ListReleasesV1OK, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReleasesV1")
	}

	var r0 *operations.ListReleasesV1OK
	var r1 error
	if rf, ok := ret.Get(0).(func(*operations.ListReleasesV1Params, ...operations.ClientOption) (*operations.ListReleasesV1OK, error)); ok {
		return rf(params, opts...)
	}
	if rf, ok := ret.Get(0).(func(*operations.ListReleasesV1Params, ...operations.ClientOption) *operations.ListReleasesV1OK); ok {
		r0 = rf(params, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*operations.ListReleasesV1OK)
		}
	}

	if rf, ok := ret.Get(1).(func(*operations.ListReleasesV1Params, ...operations.ClientOption) error); ok {
		r1 = rf(params, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClientService_ListReleasesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReleasesV1'
type MockClientService_ListReleasesV1_Call struct {
	*mock.Call
}

// ListReleasesV1 is a helper method to define mock.On call
//   - params *operations.ListReleasesV1Params
//   - opts ...operations.ClientOption
func (_e *MockClientService_Expecter) ListReleasesV1(params interface{}, opts ...interface{}) *MockClientService_ListReleasesV1_Call {
	return &MockClientService_ListReleasesV1_Call{Call: _e.mock.On("ListReleasesV1",
		append([]interface{}{params}, opts...)...)}
}

func (_c *MockClientService_ListReleasesV1_Call) Run(run func(params *operations.ListReleasesV1Params, opts ...operations.ClientOption)) *MockClientService_ListReleasesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]operations.ClientOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(operations.ClientOption)
			}
		}
		run(args[0].(*operations.ListReleasesV1Params), variadicArgs...)
	})
	return _c
}

func (_c *MockClientService_ListReleasesV1_Call) Return(_a0 *operations.ListReleasesV1OK, _a1 error) *MockClientService_ListReleasesV1_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClientService_ListReleasesV1_Call) RunAndReturn(run func(*operations.ListReleasesV1Params, ...operations.ClientOption) (*operations.ListReleasesV1OK, error)) *MockClientService_ListReleasesV1_Call {
	_c.Call.Return(run)
	return _c
}

// SetTransport provides a mock function with given fields: transport
func (_m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	_m.Called(transport)
}

// MockClientService_SetTransport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTransport'
type MockClientService_SetTransport_Call struct {
	*mock.Call
}

// SetTransport is a helper method to define mock.On call
//   - transport runtime.ClientTransport
func (_e *MockClientService_Expecter) SetTransport(transport interface{}) *MockClientService_SetTransport_Call {
	return &MockClientService_SetTransport_Call{Call: _e.mock.On("SetTransport", transport)}
}

func (_c *MockClientService_SetTransport_Call) Run(run func(transport runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(runtime.ClientTransport))
	})
	return _c
}

func (_c *MockClientService_SetTransport_Call) Return() *MockClientService_SetTransport_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClientService_SetTransport_Call) RunAndReturn(run func(runtime.ClientTransport)) *MockClientService_SetTransport_Call {
	_c.Run(run)
	return _c
}

// NewMockClientService creates a new instance of MockClientService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClientService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClientService {
	mock := &MockClientService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
