// Code generated by mockery. DO NOT EDIT.

package iampolicy

import (
	context "context"

	models "github.com/hashicorp/hcp-sdk-go/clients/cloud-resource-manager/stable/2019-12-10/models"
	mock "github.com/stretchr/testify/mock"
)

// MockSetter is an autogenerated mock type for the Setter type
type MockSetter struct {
	mock.Mock
}

type MockSetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSetter) EXPECT() *MockSetter_Expecter {
	return &MockSetter_Expecter{mock: &_m.Mock}
}

// AddBinding provides a mock function with given fields: ctx, principalID, roleID
func (_m *MockSetter) AddBinding(ctx context.Context, principalID string, roleID string) (*models.HashicorpCloudResourcemanagerPolicy, error) {
	ret := _m.Called(ctx, principalID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for AddBinding")
	}

	var r0 *models.HashicorpCloudResourcemanagerPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.HashicorpCloudResourcemanagerPolicy, error)); ok {
		return rf(ctx, principalID, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.HashicorpCloudResourcemanagerPolicy); ok {
		r0 = rf(ctx, principalID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HashicorpCloudResourcemanagerPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, principalID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSetter_AddBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBinding'
type MockSetter_AddBinding_Call struct {
	*mock.Call
}

// AddBinding is a helper method to define mock.On call
//   - ctx context.Context
//   - principalID string
//   - roleID string
func (_e *MockSetter_Expecter) AddBinding(ctx interface{}, principalID interface{}, roleID interface{}) *MockSetter_AddBinding_Call {
	return &MockSetter_AddBinding_Call{Call: _e.mock.On("AddBinding", ctx, principalID, roleID)}
}

func (_c *MockSetter_AddBinding_Call) Run(run func(ctx context.Context, principalID string, roleID string)) *MockSetter_AddBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSetter_AddBinding_Call) Return(_a0 *models.HashicorpCloudResourcemanagerPolicy, _a1 error) *MockSetter_AddBinding_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSetter_AddBinding_Call) RunAndReturn(run func(context.Context, string, string) (*models.HashicorpCloudResourcemanagerPolicy, error)) *MockSetter_AddBinding_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBinding provides a mock function with given fields: ctx, principalID, roleID
func (_m *MockSetter) DeleteBinding(ctx context.Context, principalID string, roleID string) (*models.HashicorpCloudResourcemanagerPolicy, error) {
	ret := _m.Called(ctx, principalID, roleID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBinding")
	}

	var r0 *models.HashicorpCloudResourcemanagerPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.HashicorpCloudResourcemanagerPolicy, error)); ok {
		return rf(ctx, principalID, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.HashicorpCloudResourcemanagerPolicy); ok {
		r0 = rf(ctx, principalID, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HashicorpCloudResourcemanagerPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, principalID, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSetter_DeleteBinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBinding'
type MockSetter_DeleteBinding_Call struct {
	*mock.Call
}

// DeleteBinding is a helper method to define mock.On call
//   - ctx context.Context
//   - principalID string
//   - roleID string
func (_e *MockSetter_Expecter) DeleteBinding(ctx interface{}, principalID interface{}, roleID interface{}) *MockSetter_DeleteBinding_Call {
	return &MockSetter_DeleteBinding_Call{Call: _e.mock.On("DeleteBinding", ctx, principalID, roleID)}
}

func (_c *MockSetter_DeleteBinding_Call) Run(run func(ctx context.Context, principalID string, roleID string)) *MockSetter_DeleteBinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockSetter_DeleteBinding_Call) Return(_a0 *models.HashicorpCloudResourcemanagerPolicy, _a1 error) *MockSetter_DeleteBinding_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSetter_DeleteBinding_Call) RunAndReturn(run func(context.Context, string, string) (*models.HashicorpCloudResourcemanagerPolicy, error)) *MockSetter_DeleteBinding_Call {
	_c.Call.Return(run)
	return _c
}

// SetPolicy provides a mock function with given fields: ctx, policy
func (_m *MockSetter) SetPolicy(ctx context.Context, policy *models.HashicorpCloudResourcemanagerPolicy) (*models.HashicorpCloudResourcemanagerPolicy, error) {
	ret := _m.Called(ctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for SetPolicy")
	}

	var r0 *models.HashicorpCloudResourcemanagerPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) (*models.HashicorpCloudResourcemanagerPolicy, error)); ok {
		return rf(ctx, policy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) *models.HashicorpCloudResourcemanagerPolicy); ok {
		r0 = rf(ctx, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HashicorpCloudResourcemanagerPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) error); ok {
		r1 = rf(ctx, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSetter_SetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPolicy'
type MockSetter_SetPolicy_Call struct {
	*mock.Call
}

// SetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policy *models.HashicorpCloudResourcemanagerPolicy
func (_e *MockSetter_Expecter) SetPolicy(ctx interface{}, policy interface{}) *MockSetter_SetPolicy_Call {
	return &MockSetter_SetPolicy_Call{Call: _e.mock.On("SetPolicy", ctx, policy)}
}

func (_c *MockSetter_SetPolicy_Call) Run(run func(ctx context.Context, policy *models.HashicorpCloudResourcemanagerPolicy)) *MockSetter_SetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.HashicorpCloudResourcemanagerPolicy))
	})
	return _c
}

func (_c *MockSetter_SetPolicy_Call) Return(_a0 *models.HashicorpCloudResourcemanagerPolicy, _a1 error) *MockSetter_SetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSetter_SetPolicy_Call) RunAndReturn(run func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) (*models.HashicorpCloudResourcemanagerPolicy, error)) *MockSetter_SetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSetter creates a new instance of MockSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSetter {
	mock := &MockSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
