// Code generated by mockery. DO NOT EDIT.

package iampolicy

import (
	context "context"

	models "github.com/hashicorp/hcp-sdk-go/clients/cloud-resource-manager/stable/2019-12-10/models"
	mock "github.com/stretchr/testify/mock"
)

// MockResourceUpdater is an autogenerated mock type for the ResourceUpdater type
type MockResourceUpdater struct {
	mock.Mock
}

type MockResourceUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResourceUpdater) EXPECT() *MockResourceUpdater_Expecter {
	return &MockResourceUpdater_Expecter{mock: &_m.Mock}
}

// GetIamPolicy provides a mock function with given fields: _a0
func (_m *MockResourceUpdater) GetIamPolicy(_a0 context.Context) (*models.HashicorpCloudResourcemanagerPolicy, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetIamPolicy")
	}

	var r0 *models.HashicorpCloudResourcemanagerPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*models.HashicorpCloudResourcemanagerPolicy, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *models.HashicorpCloudResourcemanagerPolicy); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HashicorpCloudResourcemanagerPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceUpdater_GetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIamPolicy'
type MockResourceUpdater_GetIamPolicy_Call struct {
	*mock.Call
}

// GetIamPolicy is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockResourceUpdater_Expecter) GetIamPolicy(_a0 interface{}) *MockResourceUpdater_GetIamPolicy_Call {
	return &MockResourceUpdater_GetIamPolicy_Call{Call: _e.mock.On("GetIamPolicy", _a0)}
}

func (_c *MockResourceUpdater_GetIamPolicy_Call) Run(run func(_a0 context.Context)) *MockResourceUpdater_GetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockResourceUpdater_GetIamPolicy_Call) Return(_a0 *models.HashicorpCloudResourcemanagerPolicy, _a1 error) *MockResourceUpdater_GetIamPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceUpdater_GetIamPolicy_Call) RunAndReturn(run func(context.Context) (*models.HashicorpCloudResourcemanagerPolicy, error)) *MockResourceUpdater_GetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// SetIamPolicy provides a mock function with given fields: ctx, policy
func (_m *MockResourceUpdater) SetIamPolicy(ctx context.Context, policy *models.HashicorpCloudResourcemanagerPolicy) (*models.HashicorpCloudResourcemanagerPolicy, error) {
	ret := _m.Called(ctx, policy)

	if len(ret) == 0 {
		panic("no return value specified for SetIamPolicy")
	}

	var r0 *models.HashicorpCloudResourcemanagerPolicy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) (*models.HashicorpCloudResourcemanagerPolicy, error)); ok {
		return rf(ctx, policy)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) *models.HashicorpCloudResourcemanagerPolicy); ok {
		r0 = rf(ctx, policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HashicorpCloudResourcemanagerPolicy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) error); ok {
		r1 = rf(ctx, policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockResourceUpdater_SetIamPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIamPolicy'
type MockResourceUpdater_SetIamPolicy_Call struct {
	*mock.Call
}

// SetIamPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policy *models.HashicorpCloudResourcemanagerPolicy
func (_e *MockResourceUpdater_Expecter) SetIamPolicy(ctx interface{}, policy interface{}) *MockResourceUpdater_SetIamPolicy_Call {
	return &MockResourceUpdater_SetIamPolicy_Call{Call: _e.mock.On("SetIamPolicy", ctx, policy)}
}

func (_c *MockResourceUpdater_SetIamPolicy_Call) Run(run func(ctx context.Context, policy *models.HashicorpCloudResourcemanagerPolicy)) *MockResourceUpdater_SetIamPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.HashicorpCloudResourcemanagerPolicy))
	})
	return _c
}

func (_c *MockResourceUpdater_SetIamPolicy_Call) Return(_a0 *models.HashicorpCloudResourcemanagerPolicy, _a1 error) *MockResourceUpdater_SetIamPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockResourceUpdater_SetIamPolicy_Call) RunAndReturn(run func(context.Context, *models.HashicorpCloudResourcemanagerPolicy) (*models.HashicorpCloudResourcemanagerPolicy, error)) *MockResourceUpdater_SetIamPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockResourceUpdater creates a new instance of MockResourceUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResourceUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResourceUpdater {
	mock := &MockResourceUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
