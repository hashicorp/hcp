// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	oauth2 "golang.org/x/oauth2"

	profile "github.com/hashicorp/hcp-sdk-go/profile"

	tls "crypto/tls"

	url "net/url"
)

// MockHCPConfig is an autogenerated mock type for the HCPConfig type
type MockHCPConfig struct {
	mock.Mock
}

type MockHCPConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHCPConfig) EXPECT() *MockHCPConfig_Expecter {
	return &MockHCPConfig_Expecter{mock: &_m.Mock}
}

// APIAddress provides a mock function with given fields:
func (_m *MockHCPConfig) APIAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for APIAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHCPConfig_APIAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APIAddress'
type MockHCPConfig_APIAddress_Call struct {
	*mock.Call
}

// APIAddress is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) APIAddress() *MockHCPConfig_APIAddress_Call {
	return &MockHCPConfig_APIAddress_Call{Call: _e.mock.On("APIAddress")}
}

func (_c *MockHCPConfig_APIAddress_Call) Run(run func()) *MockHCPConfig_APIAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_APIAddress_Call) Return(_a0 string) *MockHCPConfig_APIAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHCPConfig_APIAddress_Call) RunAndReturn(run func() string) *MockHCPConfig_APIAddress_Call {
	_c.Call.Return(run)
	return _c
}

// APITLSConfig provides a mock function with given fields:
func (_m *MockHCPConfig) APITLSConfig() *tls.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for APITLSConfig")
	}

	var r0 *tls.Config
	if rf, ok := ret.Get(0).(func() *tls.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Config)
		}
	}

	return r0
}

// MockHCPConfig_APITLSConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APITLSConfig'
type MockHCPConfig_APITLSConfig_Call struct {
	*mock.Call
}

// APITLSConfig is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) APITLSConfig() *MockHCPConfig_APITLSConfig_Call {
	return &MockHCPConfig_APITLSConfig_Call{Call: _e.mock.On("APITLSConfig")}
}

func (_c *MockHCPConfig_APITLSConfig_Call) Run(run func()) *MockHCPConfig_APITLSConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_APITLSConfig_Call) Return(_a0 *tls.Config) *MockHCPConfig_APITLSConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHCPConfig_APITLSConfig_Call) RunAndReturn(run func() *tls.Config) *MockHCPConfig_APITLSConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields:
func (_m *MockHCPConfig) Logout() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHCPConfig_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type MockHCPConfig_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) Logout() *MockHCPConfig_Logout_Call {
	return &MockHCPConfig_Logout_Call{Call: _e.mock.On("Logout")}
}

func (_c *MockHCPConfig_Logout_Call) Run(run func()) *MockHCPConfig_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_Logout_Call) Return(_a0 error) *MockHCPConfig_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHCPConfig_Logout_Call) RunAndReturn(run func() error) *MockHCPConfig_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// PortalURL provides a mock function with given fields:
func (_m *MockHCPConfig) PortalURL() *url.URL {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PortalURL")
	}

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func() *url.URL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	return r0
}

// MockHCPConfig_PortalURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PortalURL'
type MockHCPConfig_PortalURL_Call struct {
	*mock.Call
}

// PortalURL is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) PortalURL() *MockHCPConfig_PortalURL_Call {
	return &MockHCPConfig_PortalURL_Call{Call: _e.mock.On("PortalURL")}
}

func (_c *MockHCPConfig_PortalURL_Call) Run(run func()) *MockHCPConfig_PortalURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_PortalURL_Call) Return(_a0 *url.URL) *MockHCPConfig_PortalURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHCPConfig_PortalURL_Call) RunAndReturn(run func() *url.URL) *MockHCPConfig_PortalURL_Call {
	_c.Call.Return(run)
	return _c
}

// Profile provides a mock function with given fields:
func (_m *MockHCPConfig) Profile() *profile.UserProfile {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Profile")
	}

	var r0 *profile.UserProfile
	if rf, ok := ret.Get(0).(func() *profile.UserProfile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*profile.UserProfile)
		}
	}

	return r0
}

// MockHCPConfig_Profile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Profile'
type MockHCPConfig_Profile_Call struct {
	*mock.Call
}

// Profile is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) Profile() *MockHCPConfig_Profile_Call {
	return &MockHCPConfig_Profile_Call{Call: _e.mock.On("Profile")}
}

func (_c *MockHCPConfig_Profile_Call) Run(run func()) *MockHCPConfig_Profile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_Profile_Call) Return(_a0 *profile.UserProfile) *MockHCPConfig_Profile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHCPConfig_Profile_Call) RunAndReturn(run func() *profile.UserProfile) *MockHCPConfig_Profile_Call {
	_c.Call.Return(run)
	return _c
}

// SCADAAddress provides a mock function with given fields:
func (_m *MockHCPConfig) SCADAAddress() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SCADAAddress")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockHCPConfig_SCADAAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SCADAAddress'
type MockHCPConfig_SCADAAddress_Call struct {
	*mock.Call
}

// SCADAAddress is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) SCADAAddress() *MockHCPConfig_SCADAAddress_Call {
	return &MockHCPConfig_SCADAAddress_Call{Call: _e.mock.On("SCADAAddress")}
}

func (_c *MockHCPConfig_SCADAAddress_Call) Run(run func()) *MockHCPConfig_SCADAAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_SCADAAddress_Call) Return(_a0 string) *MockHCPConfig_SCADAAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHCPConfig_SCADAAddress_Call) RunAndReturn(run func() string) *MockHCPConfig_SCADAAddress_Call {
	_c.Call.Return(run)
	return _c
}

// SCADATLSConfig provides a mock function with given fields:
func (_m *MockHCPConfig) SCADATLSConfig() *tls.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SCADATLSConfig")
	}

	var r0 *tls.Config
	if rf, ok := ret.Get(0).(func() *tls.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Config)
		}
	}

	return r0
}

// MockHCPConfig_SCADATLSConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SCADATLSConfig'
type MockHCPConfig_SCADATLSConfig_Call struct {
	*mock.Call
}

// SCADATLSConfig is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) SCADATLSConfig() *MockHCPConfig_SCADATLSConfig_Call {
	return &MockHCPConfig_SCADATLSConfig_Call{Call: _e.mock.On("SCADATLSConfig")}
}

func (_c *MockHCPConfig_SCADATLSConfig_Call) Run(run func()) *MockHCPConfig_SCADATLSConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_SCADATLSConfig_Call) Return(_a0 *tls.Config) *MockHCPConfig_SCADATLSConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHCPConfig_SCADATLSConfig_Call) RunAndReturn(run func() *tls.Config) *MockHCPConfig_SCADATLSConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Token provides a mock function with given fields:
func (_m *MockHCPConfig) Token() (*oauth2.Token, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Token")
	}

	var r0 *oauth2.Token
	var r1 error
	if rf, ok := ret.Get(0).(func() (*oauth2.Token, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *oauth2.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Token)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHCPConfig_Token_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Token'
type MockHCPConfig_Token_Call struct {
	*mock.Call
}

// Token is a helper method to define mock.On call
func (_e *MockHCPConfig_Expecter) Token() *MockHCPConfig_Token_Call {
	return &MockHCPConfig_Token_Call{Call: _e.mock.On("Token")}
}

func (_c *MockHCPConfig_Token_Call) Run(run func()) *MockHCPConfig_Token_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHCPConfig_Token_Call) Return(_a0 *oauth2.Token, _a1 error) *MockHCPConfig_Token_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHCPConfig_Token_Call) RunAndReturn(run func() (*oauth2.Token, error)) *MockHCPConfig_Token_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHCPConfig creates a new instance of MockHCPConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHCPConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHCPConfig {
	mock := &MockHCPConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
